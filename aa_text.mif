DEPTH = 16384;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
00000000 : 00001217;   % 224:  	la 	tp, ExceptionHandling	# carrega em tp o endere�o base das rotinas do sistema ECALL %
00000001 : 6e420213;   % 224:  %
00000002 : 00521073;   % 225:  	csrw 	tp, utvec 		# seta utvec para o endere�o tp %
00000003 : 0000e073;   % 226:  	csrsi 	ustatus, 1 		# seta o bit de habilita��o de interrup��o em ustatus (reg 0)																																																				 %
00000004 : 0fc15517;   % 8:     la a0, pokebola %
00000005 : ac850513;   % 8:  %
00000006 : 01000593;   % 9:     li a1, 16 %
00000007 : 01000613;   % 10:     li a2, 16 %
00000008 : 00000693;   % 11:     li a3, 0 %
00000009 : 00000317;   % 12:     call PRINT %
0000000a : 19c300e7;   % 12:  %
0000000b : 0fc15517;   % 14:     la a0, pokebola %
0000000c : aac50513;   % 14:  %
0000000d : 12000593;   % 15:     li a1, 288 %
0000000e : 01000613;   % 16:     li a2, 16 %
0000000f : 00000693;   % 17:     li a3, 0 %
00000010 : 00000317;   % 18:     call PRINT %
00000011 : 180300e7;   % 18:  %
00000012 : 0fc15517;   % 20:     la a0, pokebola %
00000013 : a9050513;   % 20:  %
00000014 : 01000593;   % 21:     li a1, 16 %
00000015 : 0d000613;   % 22:     li a2, 208 %
00000016 : 00000693;   % 23:     li a3, 0 %
00000017 : 00000317;   % 24:     call PRINT %
00000018 : 164300e7;   % 24:  %
00000019 : 0fc15517;   % 26:     la a0, pokebola %
0000001a : a7450513;   % 26:  %
0000001b : 12000593;   % 27:     li a1, 288 %
0000001c : 0d000613;   % 28:     li a2, 208 %
0000001d : 00000693;   % 29:     li a3, 0 %
0000001e : 00000317;   % 30:     call PRINT %
0000001f : 148300e7;   % 30:  %
00000020 : 0fc15517;   % 34:     la a0, squirtle %
00000021 : 95050513;   % 34:  %
00000022 : 0a000593;   % 35:     li a1, 160 %
00000023 : 06000613;   % 36:     li a2, 96 %
00000024 : 00000693;   % 37:     li a3, 0 %
00000025 : 00000317;   % 38:     call PRINT %
00000026 : 12c300e7;   % 38:  %
00000027 : 0fc14517;   % 40:     la a0, charmander %
00000028 : 72450513;   % 40:  %
00000029 : 07000593;   % 41:     li a1, 112 %
0000002a : 06000613;   % 42:     li a2, 96 %
0000002b : 00000693;   % 43:     li a3, 0 %
0000002c : 00000317;   % 44:     call PRINT %
0000002d : 110300e7;   % 44:  %
0000002e : 0fc15517;   % 46:     la a0, bulbasaur %
0000002f : 81050513;   % 46:  %
00000030 : 0c000593;   % 47:     li a1, 192 %
00000031 : 06000613;   % 48:     li a2, 96 %
00000032 : 00000693;   % 49:     li a3, 0 %
00000033 : 00000317;   % 50:     call PRINT %
00000034 : 0f4300e7;   % 50:  %
00000035 : 0fc14517;   % 53:     la a0, o %
00000036 : 5e450513;   % 53:  %
00000037 : 07000593;   % 54:     li a1, 112 %
00000038 : 04000613;   % 55:     li a2, 64 %
00000039 : 00000693;   % 56:     li a3, 0 %
0000003a : 00000317;   % 57:     call PRINT %
0000003b : 0d8300e7;   % 57:  %
0000003c : 0fc14517;   % 59:     la a0, a %
0000003d : 1a850513;   % 59:  %
0000003e : 08000593;   % 60:     li a1, 128 %
0000003f : 04000613;   % 61:     li a2, 64 %
00000040 : 00000693;   % 62:     li a3, 0 %
00000041 : 00000317;   % 63:     call PRINT %
00000042 : 0bc300e7;   % 63:  %
00000043 : 0fc14517;   % 65:     la a0, c %
00000044 : 29450513;   % 65:  %
00000045 : 09000593;   % 66:     li a1, 144 %
00000046 : 04000613;   % 67:     li a2, 64 %
00000047 : 00000693;   % 68:     li a3, 0 %
00000048 : 00000317;   % 69:     call PRINT %
00000049 : 0a0300e7;   % 69:  %
0000004a : 0fc14517;   % 71:     la a0, m %
0000004b : 38050513;   % 71:  %
0000004c : 0a000593;   % 72:     li a1, 160 %
0000004d : 04000613;   % 73:     li a2, 64 %
0000004e : 00000693;   % 74:     li a3, 0 %
0000004f : 00000317;   % 75:     call PRINT %
00000050 : 084300e7;   % 75:  %
00000051 : 0fc14517;   % 77:     la a0, o %
00000052 : 57450513;   % 77:  %
00000053 : 0b000593;   % 78:     li a1, 176 %
00000054 : 04000613;   % 79:     li a2, 64 %
00000055 : 00000693;   % 80:     li a3, 0 %
00000056 : 00000317;   % 81:     call PRINT %
00000057 : 068300e7;   % 81:  %
00000058 : 0fc14517;   % 83:     la a0, n %
00000059 : 45050513;   % 83:  %
0000005a : 0c000593;   % 84:     li a1, 192 %
0000005b : 04000613;   % 85:     li a2, 64 %
0000005c : 00000693;   % 86:     li a3, 0 %
0000005d : 00000317;   % 87:     call PRINT %
0000005e : 04c300e7;   % 87:  %
0000005f : 0fc10517;   % 90:     la a0, msg2 %
00000060 : eaa50513;   % 90:  %
00000061 : 00000317;   % 91:     call PRINT_STR %
00000062 : 020300e7;   % 91:  %
00000063 : 0fc10517;   % 96:     la a0, msg1 %
00000064 : e7450513;   % 96:  %
00000065 : 00000317;   % 97:     call PRINT_STR %
00000066 : 010300e7;   % 97:  %
00000067 : 00000317;   % 99:     call KEY_MENU %
00000068 : 104300e7;   % 99:  %
00000069 : 06800893;   % 105:     li a7, 104 %
0000006a : 00000593;   % 107: 	li a1, 0 %
0000006b : 09000613;   % 108: 	li a2, 144 %
0000006c : 02d00693;   % 109: 	li a3, 0x002D %
0000006d : 00000713;   % 110: 	li a4, 0 %
0000006e : 00000073;   % 111: 	ecall %
0000006f : 00008067;   % 112: 	ret		 %
00000070 : 000012b7;   % 115:     li t0, 0xFF0 %
00000071 : ff028293;   % 115:  %
00000072 : 00d282b3;   % 116:     add t0, t0, a3 %
00000073 : 01429293;   % 117:     slli t0, t0, 20 %
00000074 : 00b282b3;   % 119:     add t0, t0, a1 %
00000075 : 14000313;   % 121:     li t1, 320 %
00000076 : 02c30333;   % 122:     mul t1, t1, a2 %
00000077 : 006282b3;   % 123:     add t0, t0, t1 %
00000078 : 00850313;   % 125:     addi t1, a0, 8  # a0 = endereco da imagem %
00000079 : 000003b3;   % 127:     mv t2, zero %
0000007a : 00000e33;   % 128:     mv t3, zero %
0000007b : 00052e83;   % 130:     lw t4, 0(a0) %
0000007c : 00452f03;   % 131:     lw t5, 4(a0) %
0000007d : 00032f83;   % 134:     lw t6, 0(t1) %
0000007e : 01f2a023;   % 135:     sw t6, 0(t0) %
0000007f : 00428293;   % 137:     addi t0, t0, 4 %
00000080 : 00430313;   % 138:     addi t1, t1, 4 %
00000081 : 004e0e13;   % 140:     addi t3, t3, 4 %
00000082 : ffde46e3;   % 142:     blt t3, t4, PRINT_LINHA %
00000083 : 14028293;   % 144:     addi t0, t0, 320 %
00000084 : 41d282b3;   % 145:     sub t0, t0, t4 %
00000085 : 00000e33;   % 147:     mv t3, zero %
00000086 : 00138393;   % 148:     addi t2, t2, 1 %
00000087 : fde3cce3;   % 150:     bgt t5, t2, PRINT_LINHA %
00000088 : 00008067;   % 152:     ret %
00000089 : 00300613;   % 155:     li a2, 3					# define o instrumento %
0000008a : 07f00693;   % 156: 	li a3, 127					# define o volume %
0000008b : 0fc10417;   % 157: 	la s0, NUM				    # define o endereco do numero de notas %
0000008c : e2040413;   % 157:  %
0000008d : 00042483;   % 158: 	lw s1, 0(s0)				# le o numero de notas %
0000008e : 0fc10417;   % 159: 	la s0, NOTAS				# define o endereco das notas %
0000008f : e1840413;   % 159:  %
00000090 : 00000293;   % 160: 	li t0, 0					# zera o contador de notas %
00000091 : 04400613;   % 161: 	li a2, 68					# define o instrumento %
00000092 : 07f00693;   % 162: 	li a3, 127					# define o volume %
00000093 : 0080006f;   % 163: 	j LOOP %
00000094 : 00008067;   % 164: 	ret %
00000095 : 02928863;   % 167:     beq t0, s1, FIM_SONG				# contador chegou no final? entao  va para FIM %
00000096 : 00042503;   % 168: 	lw a0, 0(s0)				# le o valor da nota %
00000097 : 00442583;   % 169: 	lw a1, 4(s0)				# le a duracao da nota %
00000098 : 01f00893;   % 170: 	li a7, 31					# define a chamada de syscall %
00000099 : 00000073;   % 171: 	ecall						# toca a not %
0000009a : 00b00533;   % 172: 	mv a0, a1					# passa a duracao da nota para a pausa %
0000009b : 02000893;   % 173: 	li a7, 32					# define a chamada de syscal  %
0000009c : 00000073;   % 174: 	ecall						# realiza uma pausa de a0 m %
0000009d : 00840413;   % 175: 	addi s0, s0, 8				# incrementa para o endereco da proxima nota %
0000009e : 00128293;   % 176: 	addi t0, t0, 1				# incrementa o contador de notas %
0000009f : fd9ff06f;   % 177: 	j LOOP					    # volta ao loop %
000000a0 : 00008067;   % 178: 	ret %
000000a1 : 02800513;   % 181:     li a0, 40					# define a nota %
000000a2 : 12c00593;   % 182: 	li a1, 300					# define a duracao da nota em ms %
000000a3 : 07f00613;   % 183: 	li a2, 127					# define o instrumento %
000000a4 : 07f00693;   % 184: 	li a3, 127					# define o volume %
000000a5 : 02100893;   % 185: 	li a7, 33					# define o syscall %
000000a6 : 00000073;   % 186: 	ecall						# toca a nota %
000000a7 : 00008067;   % 187: 	ret %
000000a8 : ff200337;   % 190: 	li t1,0xFF200000		# carrega o endereço de controle do KDMMIO %
000000a9 : 00030313;   % 190:  %
000000aa : 00032283;   % 191: 	lw t0,0(t1)			    # Le bit de Controle Teclado %
000000ab : 0012f293;   % 192: 	andi t0,t0,0x0001		# mascara o bit menos significativo %
000000ac : 00028a63;   % 193:    	beq t0,zero,FIM_MENU   	# Se não há tecla pressionada então vai para FIM %
000000ad : 00432383;   % 194:   	lw t2,4(t1)  			# le o valor da tecla tecla %
000000ae : 07300e13;   % 195:     li t3, 's'		# carrega o valor da tecla S %
000000af : 01c38663;   % 196:    	beq t2,t3,PALLET_TOWN	# se a tecla for S então vai para mapa PalletTown %
000000b0 : 0040006f;   % 197:    	j FIM_MENU				# se não for S então volta para FIM_MENU %
000000b1 : fddff06f;   % 199: FIM_MENU:	j KEY_MENU		# retorna %
000000b2 : 00000b93;   % 97: 	li s7, 0			#s7 define o sprite do personagem andando %
000000b3 : 0fc14b17;   % 98: 	la s6, ash_parado	#s6 define o sprite do personagem %
000000b4 : a3cb0b13;   % 98:  %
000000b5 : 00000c13;   % 99: 	li s8, 0			#s8 define se vai ser usada a imagem ao contrário %
000000b6 : 0fc11517;   % 104: 	la a0, posicao_inicial %
000000b7 : 9a850513;   % 104:  %
000000b8 : 00052283;   % 105: 	lw t0, 0(a0) %
000000b9 : 00452303;   % 106: 	lw t1, 4(a0) %
000000ba : 00400393;   % 108: 	li t2, 4 %
000000bb : 027282b3;   % 109: 	mul t0, t0, t2 %
000000bc : 02730333;   % 110: 	mul t1, t1, t2 %
000000bd : 02d00393;   % 112: 	li t2, 45 %
000000be : 02730333;   % 113: 	mul t1, t1, t2 %
000000bf : 0fc10517;   % 115: 	la a0, tiles %
000000c0 : 27c50513;   % 115:  %
000000c1 : 0022d293;   % 117: 	srli t0, t0, 2 %
000000c2 : 00235313;   % 118: 	srli t1, t1, 2 %
000000c3 : 00550533;   % 120: 	add a0, a0, t0 %
000000c4 : 00650533;   % 121: 	add a0, a0, t1 %
000000c5 : 00000e13;   % 123: 	li t3, 0 %
000000c6 : 00000e93;   % 124: 	li t4, 0 %
000000c7 : 00001437;   % 127: 	li s0, 0xff0 %
000000c8 : ff040413;   % 127:  %
000000c9 : 01441413;   % 128: 	slli s0, s0, 20 %
000000ca : 01000393;   % 131: 	li t2, 16 %
000000cb : 027e0f33;   % 132: 	mul t5, t3, t2 %
000000cc : 01e40433;   % 133: 	add s0, s0, t5 %
000000cd : 03d38f33;   % 135: 	mul t5, t2, t4 %
000000ce : 14000393;   % 136: 	li t2, 320 %
000000cf : 027f0f33;   % 137: 	mul t5, t5, t2 %
000000d0 : 01e40433;   % 138: 	add s0, s0, t5 %
000000d1 : 00050283;   % 140: 	lb t0, 0(a0) %
000000d2 : 00000393;   % 142: 	li t2, 0 %
000000d3 : 1c728263;   % 143: 	beq t0, t2, BLACK_TILE %
000000d4 : 00100393;   % 145: 	li t2, 1 %
000000d5 : 20728c63;   % 146: 	beq t0, t2, CARREGA1 %
000000d6 : 00200393;   % 148: 	li t2, 2 %
000000d7 : 22728063;   % 149: 	beq t0, t2, CARREGA2 %
000000d8 : 00300393;   % 151: 	li t2, 3 %
000000d9 : 22728463;   % 152: 	beq t0, t2, CARREGA3 %
000000da : 00400393;   % 154: 	li t2, 4 %
000000db : 22728863;   % 155: 	beq t0, t2, CARREGA4 %
000000dc : 00500393;   % 157: 	li t2, 5 %
000000dd : 22728c63;   % 158: 	beq t0, t2, CARREGA5 %
000000de : 00600393;   % 160: 	li t2, 6 %
000000df : 24728063;   % 161: 	beq t0, t2, CARREGA6 %
000000e0 : ffa00393;   % 163: 	li t2, -6 %
000000e1 : 24728463;   % 164: 	beq t0, t2, CARREGA6NEG %
000000e2 : 00700393;   % 166: 	li t2, 7 %
000000e3 : 24728863;   % 167: 	beq t0, t2, CARREGA7 %
000000e4 : ff900393;   % 169: 	li t2, -7 %
000000e5 : 24728c63;   % 170: 	beq t0, t2, CARREGA7NEG %
000000e6 : 00800393;   % 172: 	li t2, 8 %
000000e7 : 26728063;   % 173: 	beq t0, t2, CARREGA8 %
000000e8 : ff800393;   % 175: 	li t2, -8 %
000000e9 : 26728463;   % 176: 	beq t0, t2, CARREGA8NEG %
000000ea : 00900393;   % 178: 	li t2, 9 %
000000eb : 26728863;   % 179: 	beq t0, t2, CARREGA9 %
000000ec : ff700393;   % 181: 	li t2, -9 %
000000ed : 26728c63;   % 182: 	beq t0, t2, CARREGA9NEG %
000000ee : 00a00393;   % 184: 	li t2, 10 %
000000ef : 28728063;   % 185: 	beq t0, t2, CARREGA10 %
000000f0 : ff600393;   % 187: 	li t2, -10 %
000000f1 : 28728463;   % 188: 	beq t0, t2, CARREGA10NEG %
000000f2 : 00b00393;   % 190: 	li t2, 11 %
000000f3 : 28728863;   % 191: 	beq t0, t2, CARREGA11 %
000000f4 : ff500393;   % 193: 	li t2, -11 %
000000f5 : 28728c63;   % 194: 	beq t0, t2, CARREGA11NEG %
000000f6 : 00c00393;   % 196: 	li t2, 12 %
000000f7 : 2a728063;   % 197: 	beq t0, t2, CARREGA12 %
000000f8 : ff400393;   % 199: 	li t2, -12 %
000000f9 : 2a728463;   % 200: 	beq t0, t2, CARREGA12NEG %
000000fa : 00d00393;   % 202: 	li t2, 13 %
000000fb : 2a728863;   % 203: 	beq t0, t2, CARREGA13 %
000000fc : ff300393;   % 205: 	li t2, -13 %
000000fd : 2a728c63;   % 206: 	beq t0, t2, CARREGA13NEG %
000000fe : 00e00393;   % 208: 	li t2, 14 %
000000ff : 2c728063;   % 209: 	beq t0, t2, CARREGA14 %
00000100 : ff200393;   % 211: 	li t2, -14 %
00000101 : 2c728463;   % 212: 	beq t0, t2, CARREGA14NEG %
00000102 : 00f00393;   % 214: 	li t2, 15 %
00000103 : 2c728863;   % 215: 	beq t0, t2, CARREGA15 %
00000104 : ff100393;   % 217: 	li t2, -15 %
00000105 : 2c728c63;   % 218: 	beq t0, t2, CARREGA15NEG %
00000106 : 01000393;   % 220: 	li t2, 16 %
00000107 : 2e728063;   % 221: 	beq t0, t2, CARREGA16 %
00000108 : ff000393;   % 223: 	li t2, -16 %
00000109 : 2e728463;   % 224: 	beq t0, t2, CARREGA16NEG %
0000010a : 01100393;   % 226: 	li t2, 17 %
0000010b : 2e728863;   % 227: 	beq t0, t2, CARREGA17 %
0000010c : fef00393;   % 229: 	li t2, -17 %
0000010d : 2e728c63;   % 230: 	beq t0, t2, CARREGA17NEG %
0000010e : 01200393;   % 232: 	li t2, 18 %
0000010f : 30728063;   % 233: 	beq t0, t2, CARREGA18 %
00000110 : fee00393;   % 235: 	li t2, -18 %
00000111 : 30728463;   % 236: 	beq t0, t2, CARREGA18NEG %
00000112 : 01300393;   % 238: 	li t2, 19 %
00000113 : 30728863;   % 239: 	beq t0, t2, CARREGA19 %
00000114 : fed00393;   % 241: 	li t2, -19 %
00000115 : 30728c63;   % 242: 	beq t0, t2, CARREGA19NEG %
00000116 : 01400393;   % 244: 	li t2, 20 %
00000117 : 32728063;   % 245: 	beq t0, t2, CARREGA20 %
00000118 : fec00393;   % 247: 	li t2, -20 %
00000119 : 32728463;   % 248: 	beq t0, t2, CARREGA20NEG %
0000011a : 01500393;   % 250: 	li t2, 21 %
0000011b : 32728863;   % 251: 	beq t0, t2, CARREGA21 %
0000011c : 01600393;   % 253: 	li t2, 22 %
0000011d : 32728c63;   % 254: 	beq t0, t2, CARREGA22 %
0000011e : 03100393;   % 257: 	li t2, 49 %
0000011f : 34728063;   % 258: 	beq t0, t2, CARREGA49 %
00000120 : 03200393;   % 260: 	li t2, 50 %
00000121 : 34728463;   % 261: 	beq t0, t2, CARREGA50 %
00000122 : 03300393;   % 263: 	li t2, 51 %
00000123 : 34728863;   % 264: 	beq t0, t2, CARREGA51 %
00000124 : 03400393;   % 266: 	li t2, 52 %
00000125 : 34728c63;   % 267: 	beq t0, t2, CARREGA52 %
00000126 : 42c0006f;   % 269: 	j KEY2 %
00000127 : 00000293;   % 272: 	li t0, 0 %
00000128 : 00000f13;   % 273: 	li t5, 0 %
00000129 : 00000317;   % 275: 	call PRINT_TILE %
0000012a : 358300e7;   % 275:  %
0000012b : 00150513;   % 277: 	addi a0, a0, 1		 %
0000012c : 001e0e13;   % 278: 	addi t3, t3, 1 %
0000012d : 01400393;   % 280: 	li t2, 20 %
0000012e : e7c392e3;   % 281: 	bne t2, t3, PERCORRE_TILES %
0000012f : 00000e13;   % 283: 	li t3, 0 %
00000130 : 001e8e93;   % 284: 	addi t4, t4, 1 %
00000131 : 01950513;   % 285: 	addi a0, a0, 25		#volta os tiles para a linha abaixo %
00000132 : 00f00393;   % 286: 	li t2, 15 %
00000133 : e5d398e3;   % 288: 	bne t2, t4, PERCORRE_TILES %
00000134 : 3940006f;   % 291: 	j CALCULA_POSICAO_PERSONAGEM %
00000135 : 00000293;   % 294: 	li t0, 0 %
00000136 : 00000f13;   % 295: 	li t5, 0 %
00000137 : 00f40413;   % 297: 	addi s0, s0, 15 %
00000138 : 00000317;   % 298: 	call PRINT_TILE_INVERSO %
00000139 : 350300e7;   % 298:  %
0000013a : 00150513;   % 300: 	addi a0, a0, 1		 %
0000013b : 001e0e13;   % 301: 	addi t3, t3, 1 %
0000013c : 01400393;   % 303: 	li t2, 20 %
0000013d : e3c394e3;   % 304: 	bne t2, t3, PERCORRE_TILES %
0000013e : 00000e13;   % 306: 	li t3, 0 %
0000013f : 001e8e93;   % 307: 	addi t4, t4, 1 %
00000140 : 01950513;   % 308: 	addi a0, a0, 25		#volta os tiles para a linha abaixo %
00000141 : 00f00393;   % 309: 	li t2, 15 %
00000142 : e1d39ae3;   % 310: 	bne t2, t4, PERCORRE_TILES %
00000143 : 3580006f;   % 313: 	j CALCULA_POSICAO_PERSONAGEM %
00000144 : 00000593;   % 317: 	li a1, 0x00000000 %
00000145 : 00000293;   % 319: 	li t0, 0 %
00000146 : 00000f13;   % 320: 	li t5, 0 %
00000147 : 00b42023;   % 323: 	sw a1, 0(s0)		#frame %
00000148 : 00428293;   % 325: 	addi t0, t0, 4 %
00000149 : 00440413;   % 326: 	addi s0, s0, 4 %
0000014a : 01000393;   % 328: 	li t2, 16 %
0000014b : fe7298e3;   % 329: 	bne t0, t2, PRINT_BLACK_TILE %
0000014c : 00000293;   % 331: 	li t0, 0 %
0000014d : 001f0f13;   % 332: 	addi t5, t5, 1 %
0000014e : 13040413;   % 333: 	addi s0, s0, 304	#320-16  %
0000014f : 01000393;   % 335: 	li t2, 16 %
00000150 : fc7f1ee3;   % 336: 	bne t5, t2, PRINT_BLACK_TILE %
00000151 : 00150513;   % 340: 	addi a0, a0, 1		 %
00000152 : 001e0e13;   % 341: 	addi t3, t3, 1 %
00000153 : 01400393;   % 343: 	li t2, 20 %
00000154 : ddc396e3;   % 344: 	bne t2, t3, PERCORRE_TILES %
00000155 : 00000e13;   % 346: 	li t3, 0 %
00000156 : 001e8e93;   % 347: 	addi t4, t4, 1 %
00000157 : 01950513;   % 348: 	addi a0, a0, 25		#volta os tiles para a linha abaixo %
00000158 : 00f00393;   % 349: 	li t2, 15 %
00000159 : dbd39ce3;   % 351: 	bne t2, t4, PERCORRE_TILES %
0000015a : 2fc0006f;   % 352: 	j CALCULA_POSICAO_PERSONAGEM %
0000015b : 0fc11597;   % 356: 	la a1, tetoCimaUnico %
0000015c : f6458593;   % 356:  %
0000015d : 00858593;   % 357: 	addi a1, a1, 8 %
0000015e : f25ff06f;   % 358: 	j PRE_PRINT_TILE %
0000015f : 0fc11597;   % 361: 	la a1, tetoMeioUnico %
00000160 : 05c58593;   % 361:  %
00000161 : 00858593;   % 362: 	addi a1, a1, 8 %
00000162 : f15ff06f;   % 363: 	j PRE_PRINT_TILE %
00000163 : 0fc11597;   % 366: 	la a1, tetoBaixoUnico %
00000164 : 67c58593;   % 366:  %
00000165 : 00858593;   % 367: 	addi a1, a1, 8 %
00000166 : f05ff06f;   % 368: 	j PRE_PRINT_TILE %
00000167 : 0fc12597;   % 371: 	la a1, frenteMeioUnico %
00000168 : 87c58593;   % 371:  %
00000169 : 00858593;   % 372: 	addi a1, a1, 8 %
0000016a : ef5ff06f;   % 373: 	j PRE_PRINT_TILE %
0000016b : 0fc11597;   % 376: 	la a1, frenteBaixoUnico %
0000016c : 76458593;   % 376:  %
0000016d : 00858593;   % 377: 	addi a1, a1, 8 %
0000016e : ee5ff06f;   % 378: 	j PRE_PRINT_TILE %
0000016f : 0fc11597;   % 381: 	la a1, tetoCimaEsquerdo %
00000170 : 43c58593;   % 381:  %
00000171 : 00858593;   % 382: 	addi a1, a1, 8 %
00000172 : ed5ff06f;   % 383: 	j PRE_PRINT_TILE %
00000173 : 0fc11597;   % 386: 	la a1, tetoCimaEsquerdo %
00000174 : 42c58593;   % 386:  %
00000175 : 00858593;   % 387: 	addi a1, a1, 8 %
00000176 : efdff06f;   % 388: 	j PRE_PRINT_TILE_INVERSO %
00000177 : 0fc11597;   % 391: 	la a1, tetoCimaMeio %
00000178 : bdc58593;   % 391:  %
00000179 : 00858593;   % 392: 	addi a1, a1, 8 %
0000017a : eb5ff06f;   % 393: 	j PRE_PRINT_TILE %
0000017b : 0fc11597;   % 396: 	la a1, tetoCimaMeio %
0000017c : bcc58593;   % 396:  %
0000017d : 00858593;   % 397: 	addi a1, a1, 8 %
0000017e : eddff06f;   % 398: 	j PRE_PRINT_TILE_INVERSO %
0000017f : 0fc11597;   % 401: 	la a1, tetoCimaDireito %
00000180 : 1ec58593;   % 401:  %
00000181 : 00858593;   % 402: 	addi a1, a1, 8 %
00000182 : e95ff06f;   % 403: 	j PRE_PRINT_TILE %
00000183 : 0fc11597;   % 406: 	la a1, tetoCimaDireito %
00000184 : 1dc58593;   % 406:  %
00000185 : 00858593;   % 407: 	addi a1, a1, 8 %
00000186 : ebdff06f;   % 408: 	j PRE_PRINT_TILE_INVERSO %
00000187 : 0fc11597;   % 411: 	la a1, tetoMeioEsquerdo %
00000188 : 4e458593;   % 411:  %
00000189 : 00858593;   % 412: 	addi a1, a1, 8 %
0000018a : e75ff06f;   % 413: 	j PRE_PRINT_TILE %
0000018b : 0fc11597;   % 416: 	la a1, tetoMeioEsquerdo %
0000018c : 4d458593;   % 416:  %
0000018d : 00858593;   % 417: 	addi a1, a1, 8 %
0000018e : e9dff06f;   % 418: 	j PRE_PRINT_TILE_INVERSO %
0000018f : 0fc11597;   % 421: 	la a1, tetoMeioMeio %
00000190 : c8458593;   % 421:  %
00000191 : 00858593;   % 422: 	addi a1, a1, 8 %
00000192 : e55ff06f;   % 423: 	j PRE_PRINT_TILE %
00000193 : 0fc11597;   % 426: 	la a1, tetoMeioMeio %
00000194 : c7458593;   % 426:  %
00000195 : 00858593;   % 427: 	addi a1, a1, 8 %
00000196 : e7dff06f;   % 428: 	j PRE_PRINT_TILE_INVERSO %
00000197 : 0fc11597;   % 431: 	la a1, tetoMeioDireito %
00000198 : 29458593;   % 431:  %
00000199 : 00858593;   % 432: 	addi a1, a1, 8 %
0000019a : e35ff06f;   % 433: 	j PRE_PRINT_TILE %
0000019b : 0fc11597;   % 436: 	la a1, tetoMeioDireito %
0000019c : 28458593;   % 436:  %
0000019d : 00858593;   % 437: 	addi a1, a1, 8 %
0000019e : e5dff06f;   % 438: 	j PRE_PRINT_TILE_INVERSO %
0000019f : 0fc12597;   % 441: 	la a1, tetoBaixoEsquerdo %
000001a0 : bbc58593;   % 441:  %
000001a1 : 00858593;   % 442: 	addi a1, a1, 8 %
000001a2 : e15ff06f;   % 443: 	j PRE_PRINT_TILE %
000001a3 : 0fc12597;   % 446: 	la a1, tetoBaixoEsquerdo %
000001a4 : bac58593;   % 446:  %
000001a5 : 00858593;   % 447: 	addi a1, a1, 8 %
000001a6 : e3dff06f;   % 448: 	j PRE_PRINT_TILE_INVERSO %
000001a7 : 0fc12597;   % 451: 	la a1, tetoBaixoMeio %
000001a8 : a9458593;   % 451:  %
000001a9 : 00858593;   % 452: 	addi a1, a1, 8 %
000001aa : df5ff06f;   % 453: 	j PRE_PRINT_TILE %
000001ab : 0fc12597;   % 456: 	la a1, tetoBaixoMeio %
000001ac : a8458593;   % 456:  %
000001ad : 00858593;   % 457: 	addi a1, a1, 8 %
000001ae : e1dff06f;   % 458: 	j PRE_PRINT_TILE_INVERSO %
000001af : 0fc12597;   % 461: 	la a1, tetoBaixoDireito %
000001b0 : 86458593;   % 461:  %
000001b1 : 00858593;   % 462: 	addi a1, a1, 8 %
000001b2 : dd5ff06f;   % 463: 	j PRE_PRINT_TILE %
000001b3 : 0fc12597;   % 466: 	la a1, tetoBaixoDireito %
000001b4 : 85458593;   % 466:  %
000001b5 : 00858593;   % 467: 	addi a1, a1, 8 %
000001b6 : dfdff06f;   % 468: 	j PRE_PRINT_TILE_INVERSO %
000001b7 : 0fc11597;   % 471: 	la a1, frenteMeioEsquerdo %
000001b8 : 9d458593;   % 471:  %
000001b9 : 00858593;   % 472: 	addi a1, a1, 8 %
000001ba : db5ff06f;   % 473: 	j PRE_PRINT_TILE %
000001bb : 0fc11597;   % 476: 	la a1, frenteMeioEsquerdo %
000001bc : 9c458593;   % 476:  %
000001bd : 00858593;   % 477: 	addi a1, a1, 8 %
000001be : dddff06f;   % 478: 	j PRE_PRINT_TILE_INVERSO %
000001bf : 0fc11597;   % 481: 	la a1, frenteMeioMeio %
000001c0 : ccc58593;   % 481:  %
000001c1 : 00858593;   % 482: 	addi a1, a1, 8 %
000001c2 : d95ff06f;   % 483: 	j PRE_PRINT_TILE %
000001c3 : 0fc11597;   % 486: 	la a1, frenteMeioMeio %
000001c4 : cbc58593;   % 486:  %
000001c5 : 00858593;   % 487: 	addi a1, a1, 8 %
000001c6 : dbdff06f;   % 488: 	j PRE_PRINT_TILE_INVERSO %
000001c7 : 0fc11597;   % 491: 	la a1, frenteMeioDireito %
000001c8 : fc458593;   % 491:  %
000001c9 : 00858593;   % 492: 	addi a1, a1, 8 %
000001ca : d75ff06f;   % 493: 	j PRE_PRINT_TILE %
000001cb : 0fc11597;   % 496: 	la a1, frenteMeioDireito %
000001cc : fb458593;   % 496:  %
000001cd : 00858593;   % 497: 	addi a1, a1, 8 %
000001ce : d9dff06f;   % 498: 	j PRE_PRINT_TILE_INVERSO %
000001cf : 0fc12597;   % 501: 	la a1, frenteBaixoEsquerdo %
000001d0 : c0458593;   % 501:  %
000001d1 : 00858593;   % 502: 	addi a1, a1, 8 %
000001d2 : d55ff06f;   % 503: 	j PRE_PRINT_TILE %
000001d3 : 0fc12597;   % 506: 	la a1, frenteBaixoEsquerdo %
000001d4 : bf458593;   % 506:  %
000001d5 : 00858593;   % 507: 	addi a1, a1, 8 %
000001d6 : d7dff06f;   % 508: 	j PRE_PRINT_TILE_INVERSO %
000001d7 : 0fc12597;   % 511: 	la a1, frenteBaixoMeio %
000001d8 : 8cc58593;   % 511:  %
000001d9 : 00858593;   % 512: 	addi a1, a1, 8 %
000001da : d35ff06f;   % 513: 	j PRE_PRINT_TILE %
000001db : 0fc12597;   % 516: 	la a1, frenteBaixoMeio %
000001dc : 8bc58593;   % 516:  %
000001dd : 00858593;   % 517: 	addi a1, a1, 8 %
000001de : d5dff06f;   % 518: 	j PRE_PRINT_TILE_INVERSO %
000001df : 0fc12597;   % 521: 	la a1, frenteBaixoDireito %
000001e0 : ccc58593;   % 521:  %
000001e1 : 00858593;   % 522: 	addi a1, a1, 8 %
000001e2 : d15ff06f;   % 523: 	j PRE_PRINT_TILE %
000001e3 : 0fc12597;   % 526: 	la a1, frenteBaixoDireito %
000001e4 : cbc58593;   % 526:  %
000001e5 : 00858593;   % 527: 	addi a1, a1, 8 %
000001e6 : d3dff06f;   % 528: 	j PRE_PRINT_TILE_INVERSO %
000001e7 : 0fc12597;   % 531: 	la a1, grama %
000001e8 : db458593;   % 531:  %
000001e9 : 00858593;   % 532: 	addi a1, a1, 8 %
000001ea : cf5ff06f;   % 533: 	j PRE_PRINT_TILE %
000001eb : 0fc12597;   % 536: 	la a1, flor %
000001ec : eac58593;   % 536:  %
000001ed : 00858593;   % 537: 	addi a1, a1, 8 %
000001ee : ce5ff06f;   % 538: 	j PRE_PRINT_TILE %
000001ef : 0fc12597;   % 542: 	la a1, arvore_1_1 %
000001f0 : fa458593;   % 542:  %
000001f1 : 00858593;   % 543: 	addi a1, a1, 8 %
000001f2 : cd5ff06f;   % 544: 	j PRE_PRINT_TILE %
000001f3 : 0fc12597;   % 547: 	la a1, arvore_1_2 %
000001f4 : 09c58593;   % 547:  %
000001f5 : 00858593;   % 548: 	addi a1, a1, 8 %
000001f6 : cc5ff06f;   % 549: 	j PRE_PRINT_TILE %
000001f7 : 0fc12597;   % 552: 	la a1, arvore_2_1 %
000001f8 : 19458593;   % 552:  %
000001f9 : 00858593;   % 553: 	addi a1, a1, 8 %
000001fa : cb5ff06f;   % 554: 	j PRE_PRINT_TILE %
000001fb : 0fc12597;   % 557: 	la a1, arvore_2_2 %
000001fc : 28c58593;   % 557:  %
000001fd : 00858593;   % 558: 	addi a1, a1, 8 %
000001fe : ca5ff06f;   % 559: 	j PRE_PRINT_TILE %
000001ff : 0005a383;   % 563: 	lw t2, 0(a1)		#imagem %
00000200 : 00742023;   % 564: 	sw t2, 0(s0)		#frame %
00000201 : 00428293;   % 566: 	addi t0, t0, 4 %
00000202 : 00458593;   % 567: 	addi a1, a1, 4 %
00000203 : 00440413;   % 568: 	addi s0, s0, 4 %
00000204 : 01000393;   % 570: 	li t2, 16 %
00000205 : fe7294e3;   % 571: 	bne t0, t2, PRINT_TILE %
00000206 : 00000293;   % 573: 	li t0, 0 %
00000207 : 001f0f13;   % 574: 	addi t5, t5, 1 %
00000208 : 13040413;   % 575: 	addi s0, s0, 304	#320-16  %
00000209 : 01000393;   % 578: 	li t2, 16 %
0000020a : fc7f1ae3;   % 579: 	bne t5, t2, PRINT_TILE %
0000020b : 00008067;   % 580: 	ret %
0000020c : 00058383;   % 583: 	lb t2, 0(a1)		#imagem %
0000020d : 00740023;   % 584: 	sb t2, 0(s0)		#frame %
0000020e : 00128293;   % 586: 	addi t0, t0, 1 %
0000020f : 00158593;   % 587: 	addi a1, a1, 1 %
00000210 : fff40413;   % 588: 	addi s0, s0, -1 %
00000211 : 01000393;   % 590: 	li t2, 16 %
00000212 : fe7294e3;   % 591: 	bne t0, t2, PRINT_TILE_INVERSO %
00000213 : 00000293;   % 593: 	li t0, 0 %
00000214 : 001f0f13;   % 594: 	addi t5, t5, 1 %
00000215 : 15040413;   % 595: 	addi s0, s0, 336	#320+16  %
00000216 : 01000393;   % 597: 	li t2, 16 %
00000217 : fc7f1ae3;   % 598: 	bne t5, t2, PRINT_TILE_INVERSO %
00000218 : 00008067;   % 599: 	ret %
00000219 : 0fc10397;   % 602: 	la t2, posicao_personagem %
0000021a : 42438393;   % 602:  %
0000021b : 0003a283;   % 603: 	lw t0, 0(t2) %
0000021c : 0043a303;   % 604: 	lw t1, 4(t2) %
0000021d : 00001437;   % 606: 	li s0, 0xff0 %
0000021e : ff040413;   % 606:  %
0000021f : 01441413;   % 607: 	slli s0, s0, 20 %
00000220 : 01000393;   % 609: 	li t2, 16 %
00000221 : 02728f33;   % 610: 	mul t5, t0, t2 %
00000222 : 01e40433;   % 611: 	add s0, s0, t5 %
00000223 : 02730f33;   % 613: 	mul t5, t1, t2 %
00000224 : 14000393;   % 614: 	li t2, 320 %
00000225 : 027f0f33;   % 615: 	mul t5, t5, t2 %
00000226 : 01e40433;   % 616: 	add s0, s0, t5 %
00000227 : 00000293;   % 618: 	li t0, 0 %
00000228 : 00000f13;   % 619: 	li t5, 0 %
00000229 : 016005b3;   % 621: 	mv a1, s6			#s6 ficará salvo a sprite do ash %
0000022a : 00858593;   % 622: 	addi a1, a1, 8 %
0000022b : 000c1863;   % 624: 	bnez s8, CONTRARIO %
0000022c : 00000317;   % 625: 	call PRINT_TILE %
0000022d : f4c300e7;   % 625:  %
0000022e : 00c0006f;   % 626: 	j KEY2 %
0000022f : 00000317;   % 629: 	call PRINT_TILE_INVERSO %
00000230 : f74300e7;   % 629:  %
00000231 : ff200337;   % 632: 	li t1,0xFF200000		# carrega o endereço de controle do KDMMIO %
00000232 : 00030313;   % 632:  %
00000233 : 00032283;   % 633: 	lw t0,0(t1)				# Le bit de Controle Teclado %
00000234 : 0012f293;   % 634: 	andi t0,t0,0x0001		# mascara o bit menos significativo %
00000235 : 00028863;   % 635:    	beq t0,zero,FIM   	   	# Se não há tecla pressionada então vai para FIM %
00000236 : 00432383;   % 636:   	lw t2,4(t1)  			# le o valor da tecla tecla %
00000237 : 00000317;   % 637: 	call MOVE_TELA %
00000238 : 00c300e7;   % 637:  %
00000239 : fe1ff06f;   % 638: FIM:	j KEY2				# retorna %
0000023a : 06400293;   % 642: 	li t0, 'd' %
0000023b : 02728063;   % 643: 	beq t0, t2, MOVE_DIREITA %
0000023c : 06100293;   % 645: 	li t0, 'a' %
0000023d : 04728a63;   % 646: 	beq t0, t2, MOVE_ESQUERDA %
0000023e : 07700293;   % 648: 	li t0, 'w' %
0000023f : 08728463;   % 649: 	beq t0, t2, MOVE_CIMA %
00000240 : 07300293;   % 651: 	li t0, 's' %
00000241 : 0e728063;   % 652: 	beq t0, t2, MOVE_BAIXO %
00000242 : 00008067;   % 654: 	ret %
00000243 : 00000c13;   % 658: 	li s8, 0 %
00000244 : 000b8a63;   % 659: 	beqz s7, DIR1 %
00000245 : 0fc13b17;   % 660: 	la s6, ash_dir_dir %
00000246 : fd4b0b13;   % 660:  %
00000247 : 00000b93;   % 661: 	li s7, 0 %
00000248 : 0100006f;   % 662: 	j DIR2 %
00000249 : 0fc13b17;   % 665: 	la s6, ash_dir_esq %
0000024a : 0ccb0b13;   % 665:  %
0000024b : 00100b93;   % 666: 	li s7, 1 %
0000024c : 0fc10517;   % 668: 	la a0, posicao_inicial %
0000024d : 35050513;   % 668:  %
0000024e : 00052283;   % 669: 	lw t0, 0(a0) %
0000024f : 00128293;   % 670: 	addi t0, t0, 1	 %
00000250 : 00552023;   % 671: 	sw t0, 0(a0) %
00000251 : 995ff06f;   % 672: 	j COMECO %
00000252 : 00000c13;   % 675: 	li s8, 0 %
00000253 : 000b8a63;   % 676: 	beqz s7, ESQ1 %
00000254 : 0fc13b17;   % 677: 	la s6, ash_esq_dir %
00000255 : 1a8b0b13;   % 677:  %
00000256 : 00000b93;   % 678: 	li s7, 0 %
00000257 : 0100006f;   % 679: 	j ESQ2 %
00000258 : 0fc13b17;   % 682: 	la s6, ash_esq_esq %
00000259 : 2a0b0b13;   % 682:  %
0000025a : 00100b93;   % 683: 	li s7, 1 %
0000025b : 0fc10517;   % 685: 	la a0, posicao_inicial %
0000025c : 31450513;   % 685:  %
0000025d : 00052283;   % 686: 	lw t0, 0(a0) %
0000025e : fff28293;   % 687: 	addi t0, t0, -1	 %
0000025f : 00552023;   % 688: 	sw t0, 0(a0) %
00000260 : 959ff06f;   % 689: 	j COMECO %
00000261 : 00000c13;   % 692: 	li s8, 0 %
00000262 : 000b8a63;   % 693: 	beqz s7, CIMA1 %
00000263 : 0fc13b17;   % 694: 	la s6, ash_costas_dir %
00000264 : c44b0b13;   % 694:  %
00000265 : 00000b93;   % 695: 	li s7, 0 %
00000266 : 0100006f;   % 696: 	j CIMA2 %
00000267 : 0fc13b17;   % 699: 	la s6, ash_costas_esq %
00000268 : d3cb0b13;   % 699:  %
00000269 : 00100b93;   % 700: 	li s7, 1 %
0000026a : 0fc10517;   % 702: 	la a0, posicao_inicial %
0000026b : 2d850513;   % 702:  %
0000026c : 00052303;   % 703: 	lw t1, 0(a0) %
0000026d : 00452283;   % 704: 	lw t0, 4(a0) %
0000026e : fff28293;   % 705: 	addi t0, t0, -1		 %
0000026f : 06028463;   % 707: 	beqz t0, VAI_ROCHA %
00000270 : 00900393;   % 709: 	li t2, 9 %
00000271 : 00538663;   % 710: 	beq t2, t0 TALVEZ_SAI %
00000272 : 00552223;   % 712: 	sw t0, 4(a0) %
00000273 : 90dff06f;   % 713: 	j COMECO %
00000274 : 00a00393;   % 716: 	li t2, 10 %
00000275 : 04638663;   % 717: 	beq t2, t1, ENTRA_CASA %
00000276 : 04028663;   % 719: 	beqz t0, VAI_ROCHA %
00000277 : 00552223;   % 721: 	sw t0, 4(a0) %
00000278 : 8f9ff06f;   % 722: 	j COMECO %
00000279 : 00000c13;   % 725: 	li s8, 0 %
0000027a : 000b8a63;   % 726: 	beqz s7, BAIXO1 %
0000027b : 0fc13b17;   % 727: 	la s6, ash_andando_dir %
0000027c : 8ccb0b13;   % 727:  %
0000027d : 00000b93;   % 728: 	li s7, 0 %
0000027e : 0100006f;   % 729: 	j BAIXO2 %
0000027f : 0fc13b17;   % 732: 	la s6, ash_andando_esq %
00000280 : 9c4b0b13;   % 732:  %
00000281 : 00100b93;   % 733: 	li s7, 1 %
00000282 : 0fc10517;   % 735: 	la a0, posicao_inicial %
00000283 : 27850513;   % 735:  %
00000284 : 00452283;   % 736: 	lw t0, 4(a0) %
00000285 : 00128293;   % 737: 	addi t0, t0, 1	 %
00000286 : 00552223;   % 738: 	sw t0, 4(a0) %
00000287 : 8bdff06f;   % 739: 	j COMECO %
00000288 : 0080006f;   % 742: 	j CASA %
00000289 : 3a00006f;   % 745: 	j ROCHAS %
0000028a : 00000b93;   % 32: 	li s7, 0			#s7 define o sprite do personagem andando %
0000028b : 0fc13b17;   % 33: 	la s6, ash_costas		#s6 define o sprite do personagem %
0000028c : a9cb0b13;   % 33:  %
0000028d : 00000c13;   % 34: 	li s8, 0			#s8 define se vai ser usada a imagem ao contrário %
0000028e : 0fc13517;   % 36: 	la a0, tiles_casa %
0000028f : 3d850513;   % 36:  %
00000290 : 00000e13;   % 38: 	li t3, 0 %
00000291 : 00000e93;   % 39: 	li t4, 0 %
00000292 : 00001437;   % 42: 	li s0, 0xFF0 %
00000293 : ff040413;   % 42:  %
00000294 : 01441413;   % 43: 	slli s0, s0, 20 %
00000295 : 01000393;   % 46: 	li t2, 16 %
00000296 : 027e0f33;   % 47: 	mul t5, t3, t2 %
00000297 : 01e40433;   % 48: 	add s0, s0, t5 %
00000298 : 03d38f33;   % 50: 	mul t5, t2, t4 %
00000299 : 14000393;   % 51: 	li t2, 320 %
0000029a : 027f0f33;   % 52: 	mul t5, t5, t2 %
0000029b : 01e40433;   % 53: 	add s0, s0, t5 %
0000029c : 00050283;   % 56: 	lb t0, 0(a0) %
0000029d : 00000393;   % 58: 	li t2, 0 %
0000029e : 0e728663;   % 59: 	beq t0, t2, CHAO %
0000029f : 00200393;   % 61: 	li t2, 2 %
000002a0 : 10728263;   % 62: 	beq t0, t2, CAIXA %
000002a1 : 00300393;   % 64: 	li t2, 3 %
000002a2 : 10728663;   % 65: 	beq t0, t2, TAPETE %
000002a3 : ffd00393;   % 67: 	li t2, -3 %
000002a4 : 10728a63;   % 68: 	beq t0, t2, TAPETENEG %
000002a5 : 00500393;   % 70: 	li t2, 5 %
000002a6 : 00728463;   % 71: 	beq t0, t2, BLACK_TILE_CASA %
000002a7 : 1180006f;   % 73: 	j KEY2_CASA %
000002a8 : 00000593;   % 76: 	li a1, 0x00000000 %
000002a9 : 00000293;   % 78: 	li t0, 0 %
000002aa : 00000f13;   % 79: 	li t5, 0 %
000002ab : 00b42023;   % 82: 	sw a1, 0(s0)		#frame %
000002ac : 00428293;   % 84: 	addi t0, t0, 4 %
000002ad : 00440413;   % 85: 	addi s0, s0, 4 %
000002ae : 01000393;   % 87: 	li t2, 16 %
000002af : fe7298e3;   % 88: 	bne t0, t2, PRINT_BLACK_TILE_CASA %
000002b0 : 00000293;   % 90: 	li t0, 0 %
000002b1 : 001f0f13;   % 91: 	addi t5, t5, 1 %
000002b2 : 13040413;   % 92: 	addi s0, s0, 304	#320-16  %
000002b3 : 01000393;   % 94: 	li t2, 16 %
000002b4 : fc7f1ee3;   % 95: 	bne t5, t2, PRINT_BLACK_TILE_CASA %
000002b5 : 00150513;   % 99: 	addi a0, a0, 1		 %
000002b6 : 001e0e13;   % 100: 	addi t3, t3, 1 %
000002b7 : 01400393;   % 102: 	li t2, 20 %
000002b8 : f7c394e3;   % 103: 	bne t2, t3, PERCORRE_TILES_CASA %
000002b9 : 00000e13;   % 105: 	li t3, 0 %
000002ba : 001e8e93;   % 106: 	addi t4, t4, 1 %
000002bb : 00f00393;   % 107: 	li t2, 15 %
000002bc : f5d39ce3;   % 109: 	bne t2, t4, PERCORRE_TILES_CASA %
000002bd : 2200006f;   % 110: 	j PRINT_PROF %
000002be : 00000293;   % 113: 	li t0, 0 %
000002bf : 00000f13;   % 114: 	li t5, 0 %
000002c0 : 00000317;   % 116: 	call PRINT_TILE %
000002c1 : cfc300e7;   % 116:  %
000002c2 : 00150513;   % 118: 	addi a0, a0, 1		 %
000002c3 : 001e0e13;   % 119: 	addi t3, t3, 1 %
000002c4 : 01400393;   % 121: 	li t2, 20 %
000002c5 : f3c39ae3;   % 122: 	bne t2, t3, PERCORRE_TILES_CASA %
000002c6 : 00000e13;   % 124: 	li t3, 0 %
000002c7 : 001e8e93;   % 125: 	addi t4, t4, 1 %
000002c8 : 00f00393;   % 126: 	li t2, 15 %
000002c9 : f3d392e3;   % 128: 	bne t2, t4, PERCORRE_TILES_CASA %
000002ca : 1ec0006f;   % 131: 	j PRINT_PROF %
000002cb : 00000293;   % 134: 	li t0, 0 %
000002cc : 00000f13;   % 135: 	li t5, 0 %
000002cd : 00f40413;   % 137: 	addi s0, s0, 15 %
000002ce : 00000317;   % 138: 	call PRINT_TILE_INVERSO %
000002cf : cf8300e7;   % 138:  %
000002d0 : 00150513;   % 140: 	addi a0, a0, 1		 %
000002d1 : 001e0e13;   % 141: 	addi t3, t3, 1 %
000002d2 : 01400393;   % 143: 	li t2, 20 %
000002d3 : efc39ee3;   % 144: 	bne t2, t3, PERCORRE_TILES_CASA %
000002d4 : 00000e13;   % 146: 	li t3, 0 %
000002d5 : 001e8e93;   % 147: 	addi t4, t4, 1 %
000002d6 : 00f00393;   % 148: 	li t2, 15 %
000002d7 : efd396e3;   % 149: 	bne t2, t4, PERCORRE_TILES_CASA %
000002d8 : 1b40006f;   % 152: 	j PRINT_PROF %
000002d9 : 0fc10597;   % 155: 	la a1, chao %
000002da : 33c58593;   % 155:  %
000002db : 00858593;   % 156: 	addi a1, a1, 8 %
000002dc : f89ff06f;   % 157: 	j PRE_PRINT_TILE_CASA %
000002dd : 0fc10597;   % 160: 	la a1, professor %
000002de : 11c58593;   % 160:  %
000002df : 00858593;   % 161: 	addi a1, a1, 8 %
000002e0 : f79ff06f;   % 162: 	j PRE_PRINT_TILE_CASA %
000002e1 : 0fc10597;   % 165: 	la a1, caixa %
000002e2 : 21458593;   % 165:  %
000002e3 : 00858593;   % 166: 	addi a1, a1, 8 %
000002e4 : f69ff06f;   % 167: 	j PRE_PRINT_TILE_CASA %
000002e5 : 0fc10597;   % 170: 	la a1, tapete %
000002e6 : 41458593;   % 170:  %
000002e7 : 00858593;   % 171: 	addi a1, a1, 8 %
000002e8 : f59ff06f;   % 172: 	j PRE_PRINT_TILE_CASA %
000002e9 : 0fc10597;   % 175: 	la a1, tapete %
000002ea : 40458593;   % 175:  %
000002eb : 00858593;   % 176: 	addi a1, a1, 8 %
000002ec : f7dff06f;   % 177: 	j PRE_PRINT_TILE_INVERSO_CASA %
000002ed : ff200337;   % 180: 	li t1,0xFF200000		# carrega o endereço de controle do KDMMIO %
000002ee : 00030313;   % 180:  %
000002ef : 00032283;   % 181: 	lw t0,0(t1)			# Le bit de Controle Teclado %
000002f0 : 0012f293;   % 182: 	andi t0,t0,0x0001		# mascara o bit menos significativo %
000002f1 : 00028863;   % 183:    	beq t0,zero,FIM_CASA 	   	# Se não há tecla pressionada então vai para FIM %
000002f2 : 00432383;   % 184:   	lw t2,4(t1)  			# le o valor da tecla tecla %
000002f3 : 00000317;   % 185: 	call MOVE_PERSONAGEM %
000002f4 : 00c300e7;   % 185:  %
000002f5 : fe1ff06f;   % 188: 	j KEY2_CASA %
000002f6 : 06100293;   % 191: 	li t0, 'a' %
000002f7 : 02728863;   % 192: 	beq t0, t2, TROCA_ESQ %
000002f8 : 06400293;   % 194: 	li t0, 'd' %
000002f9 : 06728263;   % 195: 	beq t0, t2, TROCA_DIR %
000002fa : 07700293;   % 197: 	li t0, 'w' %
000002fb : 08728c63;   % 198: 	beq t0, t2, TROCA_CIMA %
000002fc : 07300293;   % 200: 	li t0, 's' %
000002fd : 0c728663;   % 201: 	beq t0, t2, TROCA_BAIXO %
000002fe : 07000293;   % 203: 	li t0, 'p' %
000002ff : 54728063;   % 204: 	beq t0, t2, DIALOGO %
00000300 : 06900293;   % 206: 	li t0, 'i' %
00000301 : 127280e3;   % 207: 	beq t0, t2, ABRE_INVENTARIO %
00000302 : 00008067;   % 209: 	ret %
00000303 : 00000c13;   % 212: 	li s8, 0 %
00000304 : 000b8a63;   % 213: 	beqz s7, ESQ0 %
00000305 : 0fc13b17;   % 214: 	la s6, ash_esq_dir %
00000306 : ee4b0b13;   % 214:  %
00000307 : 00000b93;   % 215: 	li s7, 0 %
00000308 : 0100006f;   % 216: 	j ESQ %
00000309 : 0fc13b17;   % 218: 	la s6, ash_esq_esq %
0000030a : fdcb0b13;   % 218:  %
0000030b : 00100b93;   % 219: 	li s7, 1 %
0000030c : 0fc13517;   % 222: 	la a0, posicao_inicial_casa %
0000030d : 30c50513;   % 222:  %
0000030e : 00052303;   % 223: 	lw t1, 0(a0) %
0000030f : fff30313;   % 224: 	addi t1, t1, -1 %
00000310 : 00652023;   % 225: 	sw t1, 0(a0) %
00000311 : df5ff06f;   % 227: 	j INICIO %
00000312 : 00000c13;   % 230: 	li s8, 0 %
00000313 : 000b8a63;   % 231: 	beqz s7, DIR0 %
00000314 : 0fc13b17;   % 232: 	la s6, ash_dir_dir %
00000315 : c98b0b13;   % 232:  %
00000316 : 00000b93;   % 233: 	li s7, 0 %
00000317 : 0100006f;   % 234: 	j DIR %
00000318 : 0fc13b17;   % 236: 	la s6, ash_dir_esq %
00000319 : d90b0b13;   % 236:  %
0000031a : 00100b93;   % 237: 	li s7, 1 %
0000031b : 0fc13517;   % 240: 	la a0, posicao_inicial_casa %
0000031c : 2d050513;   % 240:  %
0000031d : 00052303;   % 241: 	lw t1, 0(a0) %
0000031e : 00130313;   % 242: 	addi t1, t1, 1 %
0000031f : 00652023;   % 243: 	sw t1, 0(a0) %
00000320 : db9ff06f;   % 245: 	j INICIO %
00000321 : 00000c13;   % 248: 	li s8, 0 %
00000322 : 000b8a63;   % 249: 	beqz s7, CIMA0 %
00000323 : 0fc13b17;   % 250: 	la s6, ash_costas_dir %
00000324 : 944b0b13;   % 250:  %
00000325 : 00000b93;   % 251: 	li s7, 0 %
00000326 : 0100006f;   % 252: 	j CIMA %
00000327 : 0fc13b17;   % 255: 	la s6, ash_costas_esq %
00000328 : a3cb0b13;   % 255:  %
00000329 : 00100b93;   % 256: 	li s7, 1 %
0000032a : 0fc13517;   % 259: 	la a0, posicao_inicial_casa %
0000032b : 29450513;   % 259:  %
0000032c : 00452303;   % 260: 	lw t1, 4(a0) %
0000032d : fff30313;   % 261: 	addi t1, t1, -1 %
0000032e : 00652223;   % 262: 	sw t1, 4(a0) %
0000032f : d7dff06f;   % 264: 	j INICIO %
00000330 : 00000c13;   % 267: 	li s8, 0 %
00000331 : 000b8a63;   % 268: 	beqz s7, BAIXO0 %
00000332 : 0fc12b17;   % 269: 	la s6, ash_andando_dir %
00000333 : 5f0b0b13;   % 269:  %
00000334 : 00000b93;   % 270: 	li s7, 0 %
00000335 : 0100006f;   % 271: 	j BAIXO %
00000336 : 0fc12b17;   % 274: 	la s6, ash_andando_esq %
00000337 : 6e8b0b13;   % 274:  %
00000338 : 00100b93;   % 275: 	li s7, 1 %
00000339 : 0fc13517;   % 278: 	la a0, posicao_inicial_casa %
0000033a : 25850513;   % 278:  %
0000033b : 00052383;   % 279: 	lw t2, 0(a0) %
0000033c : 00452303;   % 280: 	lw t1, 4(a0) %
0000033d : 00130313;   % 281: 	addi t1, t1, 1 %
0000033e : 026383b3;   % 283: 	mul t2, t2, t1 %
0000033f : 08c00f13;   % 284: 	li t5, 140 %
00000340 : 0c7f0063;   % 285: 	beq t5, t2, SAI_CASA %
00000341 : 07e00f13;   % 287: 	li t5, 126 %
00000342 : 0a7f0c63;   % 288: 	beq t5, t2, SAI_CASA %
00000343 : 00652223;   % 290: 	sw t1, 4(a0) %
00000344 : d29ff06f;   % 292: 	j INICIO %
00000345 : 0fc10597;   % 295: 	la a1, professor %
00000346 : f7c58593;   % 295:  %
00000347 : 00858593;   % 296: 	addi a1, a1, 8 %
00000348 : 00001437;   % 298: 	li s0, 0xFF0 %
00000349 : ff040413;   % 298:  %
0000034a : 01441413;   % 299: 	slli s0, s0, 20 %
0000034b : 00500393;   % 301: 	li t2, 5 		#a posição do professor não muda: 5,5 %
0000034c : 01000f13;   % 302: 	li t5, 16 %
0000034d : 03e383b3;   % 303: 	mul t2, t2, t5 %
0000034e : 00740433;   % 304: 	add s0, s0, t2 %
0000034f : 14000f13;   % 306: 	li t5, 320 %
00000350 : 03e383b3;   % 307: 	mul t2, t2, t5 %
00000351 : 00740433;   % 308: 	add s0, s0, t2	 %
00000352 : 01a00533;   % 310: 	mv a0, s10 %
00000353 : 00000293;   % 312: 	li t0, 0 %
00000354 : 00000f13;   % 313: 	li t5, 0 %
00000355 : 00000317;   % 315: 	call PRINT_TILE	 %
00000356 : aa8300e7;   % 315:  %
00000357 : 0fc13397;   % 318: 	la t2, posicao_inicial_casa %
00000358 : 1e038393;   % 318:  %
00000359 : 0003a283;   % 319: 	lw t0, 0(t2) %
0000035a : 0043a303;   % 320: 	lw t1, 4(t2) %
0000035b : 00001437;   % 322: 	li s0, 0xFF0 %
0000035c : ff040413;   % 322:  %
0000035d : 01441413;   % 323: 	slli s0, s0, 20 %
0000035e : 01000393;   % 325: 	li t2, 16 %
0000035f : 02728f33;   % 326: 	mul t5, t0, t2 %
00000360 : 01e40433;   % 327: 	add s0, s0, t5 %
00000361 : 02730f33;   % 329: 	mul t5, t1, t2 %
00000362 : 14000393;   % 330: 	li t2, 320 %
00000363 : 027f0f33;   % 331: 	mul t5, t5, t2 %
00000364 : 01e40433;   % 332: 	add s0, s0, t5 %
00000365 : 00000293;   % 334: 	li t0, 0 %
00000366 : 00000f13;   % 335: 	li t5, 0 %
00000367 : 016005b3;   % 337: 	mv a1, s6			#s6 ficará salvo a sprite do ash %
00000368 : 00858593;   % 338: 	addi a1, a1, 8 %
00000369 : 000c1863;   % 340: 	bnez s8, CONTRARIO_CASA %
0000036a : 00000317;   % 341: 	call PRINT_TILE %
0000036b : a54300e7;   % 341:  %
0000036c : e05ff06f;   % 342: 	j KEY2_CASA %
0000036d : 00000317;   % 345: 	call PRINT_TILE_INVERSO %
0000036e : a7c300e7;   % 345:  %
0000036f : df9ff06f;   % 346: 	j KEY2_CASA %
00000370 : d08ff06f;   % 349: 	j PALLET_TOWN %
00000371 : 00000b93;   % 47: 	li s7, 0		#s7 define o sprite do personagem andando %
00000372 : 0fc12b17;   % 48: 	la s6, ash_costas	#s6 define o sprite do personagem %
00000373 : 700b0b13;   % 48:  %
00000374 : 00000c13;   % 49: 	li s8, 0		#s8 define se vai ser usada a imagem ao contrário %
00000375 : 0fc13517;   % 52: 	la a0, tiles_rochas %
00000376 : 17050513;   % 52:  %
00000377 : 00000e13;   % 54: 	li t3, 0 %
00000378 : 00000e93;   % 55: 	li t4, 0 %
00000379 : 00001437;   % 58: 	li s0, 0xff0 %
0000037a : ff040413;   % 58:  %
0000037b : 01441413;   % 59: 	slli s0, s0, 20 %
0000037c : 01000393;   % 62: 	li t2, 16 %
0000037d : 027e0f33;   % 63: 	mul t5, t3, t2 %
0000037e : 01e40433;   % 64: 	add s0, s0, t5 %
0000037f : 03d38f33;   % 66: 	mul t5, t2, t4 %
00000380 : 14000393;   % 67: 	li t2, 320 %
00000381 : 027f0f33;   % 68: 	mul t5, t5, t2 %
00000382 : 01e40433;   % 69: 	add s0, s0, t5 %
00000383 : 00050283;   % 72:  	lb t0, 0(a0) %
00000384 : 00000393;   % 74: 	li t2, 0 %
00000385 : 0a728463;   % 75: 	beq t0, t2, BLACK_TILE_ROCHA %
00000386 : 00100393;   % 77: 	li t2, 1 %
00000387 : 0e728c63;   % 78: 	beq t0, t2, ROCHA_LATERAL %
00000388 : fff00393;   % 80: 	li t2, -1 %
00000389 : 10728063;   % 81: 	beq t0, t2, ROCHA_LATERAL_NEG %
0000038a : 00200393;   % 83: 	li t2, 2 %
0000038b : 10728463;   % 84: 	beq t0, t2, CHAO_ROCHA %
0000038c : 00300393;   % 86: 	li t2, 3 %
0000038d : 10728863;   % 87: 	beq t0, t2, ROCHA_DIAGONAL %
0000038e : ffd00393;   % 89: 	li t2, -3 %
0000038f : 10728c63;   % 90: 	beq t0, t2, ROCHA_DIAGONAL_NEG %
00000390 : 00400393;   % 92: 	li t2, 4 %
00000391 : 12728063;   % 93: 	beq t0, t2, AREIA %
00000392 : 00500393;   % 95: 	li t2, 5 %
00000393 : 12728463;   % 96: 	beq t0, t2, PEDRA %
00000394 : 00000293;   % 99: 	li t0, 0 %
00000395 : 00000f13;   % 100: 	li t5, 0 %
00000396 : 00000317;   % 102: 	call PRINT_TILE %
00000397 : 9a4300e7;   % 102:  %
00000398 : 00150513;   % 104: 	addi a0, a0, 1		 %
00000399 : 001e0e13;   % 105: 	addi t3, t3, 1 %
0000039a : 01400393;   % 107: 	li t2, 20 %
0000039b : f7c39ce3;   % 108: 	bne t2, t3, PERCORRE_TILES_ROCHA %
0000039c : 00000e13;   % 110: 	li t3, 0 %
0000039d : 001e8e93;   % 111: 	addi t4, t4, 1		#volta os tiles para a linha abaixo %
0000039e : 00f00393;   % 112: 	li t2, 15 %
0000039f : f7d394e3;   % 114: 	bne t2, t4, PERCORRE_TILES_ROCHA %
000003a0 : 1040006f;   % 117: 	j CALCULA_POSICAO_PERSONAGEM_ROCHA %
000003a1 : 00000293;   % 120: 	li t0, 0 %
000003a2 : 00000f13;   % 121: 	li t5, 0 %
000003a3 : 00f40413;   % 123: 	addi s0, s0, 15 %
000003a4 : 00000317;   % 124: 	call PRINT_TILE_INVERSO %
000003a5 : 9a0300e7;   % 124:  %
000003a6 : 00150513;   % 126: 	addi a0, a0, 1		 %
000003a7 : 001e0e13;   % 127: 	addi t3, t3, 1 %
000003a8 : 01400393;   % 129: 	li t2, 20 %
000003a9 : f5c390e3;   % 130: 	bne t2, t3, PERCORRE_TILES_ROCHA %
000003aa : 00000e13;   % 132: 	li t3, 0 %
000003ab : 001e8e93;   % 133: 	addi t4, t4, 1		#volta os tiles para a linha abaixo %
000003ac : 00f00393;   % 134: 	li t2, 15 %
000003ad : f3d398e3;   % 135: 	bne t2, t4, PERCORRE_TILES_ROCHA %
000003ae : 0cc0006f;   % 138: 	j CALCULA_POSICAO_PERSONAGEM_ROCHA %
000003af : 00000593;   % 141: 	li a1, 0x00000000 %
000003b0 : 00000293;   % 143: 	li t0, 0 %
000003b1 : 00000f13;   % 144: 	li t5, 0 %
000003b2 : 00b42023;   % 147: 	sw a1, 0(s0)		#frame %
000003b3 : 00428293;   % 149: 	addi t0, t0, 4 %
000003b4 : 00440413;   % 150: 	addi s0, s0, 4 %
000003b5 : 01000393;   % 152: 	li t2, 16 %
000003b6 : fe7298e3;   % 153: 	bne t0, t2, PRINT_BLACK_TILE_ROCHA %
000003b7 : 00000293;   % 155: 	li t0, 0 %
000003b8 : 001f0f13;   % 156: 	addi t5, t5, 1 %
000003b9 : 13040413;   % 157: 	addi s0, s0, 304	#320-16  %
000003ba : 01000393;   % 159: 	li t2, 16 %
000003bb : fc7f1ee3;   % 160: 	bne t5, t2, PRINT_BLACK_TILE_ROCHA %
000003bc : 00150513;   % 164: 	addi a0, a0, 1		 %
000003bd : 001e0e13;   % 165: 	addi t3, t3, 1 %
000003be : 01400393;   % 167: 	li t2, 20 %
000003bf : efc394e3;   % 168: 	bne t2, t3, PERCORRE_TILES_ROCHA %
000003c0 : 00000e13;   % 170: 	li t3, 0 %
000003c1 : 001e8e93;   % 171: 	addi t4, t4, 1		#volta os tiles para a linha abaixo %
000003c2 : 00f00393;   % 172: 	li t2, 15 %
000003c3 : edd39ce3;   % 174: 	bne t2, t4, PERCORRE_TILES_ROCHA %
000003c4 : 0740006f;   % 175: 	j CALCULA_POSICAO_PERSONAGEM_ROCHA %
000003c5 : 0fc12597;   % 178: 	la a1, lateral_big_rocha %
000003c6 : f8458593;   % 178:  %
000003c7 : 00858593;   % 179: 	addi a1, a1, 8 %
000003c8 : f31ff06f;   % 180: 	j PRE_PRINT_TILE_ROCHA %
000003c9 : 0fc12597;   % 183: 	la a1, lateral_big_rocha %
000003ca : f7458593;   % 183:  %
000003cb : 00858593;   % 184: 	addi a1, a1, 8 %
000003cc : f55ff06f;   % 185: 	j PRE_PRINT_TILE_INVERSO_ROCHA %
000003cd : 0fc12597;   % 188: 	la a1, chao_mapa2 %
000003ce : d5458593;   % 188:  %
000003cf : 00858593;   % 189: 	addi a1, a1, 8 %
000003d0 : f11ff06f;   % 190: 	j PRE_PRINT_TILE_ROCHA %
000003d1 : 0fc12597;   % 193: 	la a1, diagonal_big_rocha %
000003d2 : e4c58593;   % 193:  %
000003d3 : 00858593;   % 194: 	addi a1, a1, 8 %
000003d4 : f01ff06f;   % 195: 	j PRE_PRINT_TILE_ROCHA %
000003d5 : 0fc12597;   % 198: 	la a1, diagonal_big_rocha %
000003d6 : e3c58593;   % 198:  %
000003d7 : 00858593;   % 199: 	addi a1, a1, 8 %
000003d8 : f25ff06f;   % 200: 	j PRE_PRINT_TILE_INVERSO_ROCHA %
000003d9 : 0fc12597;   % 203: 	la a1, areia %
000003da : c1c58593;   % 203:  %
000003db : 00858593;   % 204: 	addi a1, a1, 8 %
000003dc : ee1ff06f;   % 205: 	j PRE_PRINT_TILE_ROCHA %
000003dd : 0fc12597;   % 208: 	la a1, pedra %
000003de : 02c58593;   % 208:  %
000003df : 00858593;   % 209: 	addi a1, a1, 8 %
000003e0 : ed1ff06f;   % 210: 	j PRE_PRINT_TILE_ROCHA %
000003e1 : 0fc13397;   % 213: 	la t2, posicao_inicial_personagem %
000003e2 : 15038393;   % 213:  %
000003e3 : 0003a283;   % 214: 	lw t0, 0(t2) %
000003e4 : 0043a303;   % 215: 	lw t1, 4(t2) %
000003e5 : 00001437;   % 217: 	li s0, 0xff0 %
000003e6 : ff040413;   % 217:  %
000003e7 : 01441413;   % 218: 	slli s0, s0, 20 %
000003e8 : 01000393;   % 220: 	li t2, 16 %
000003e9 : 02728f33;   % 221: 	mul t5, t0, t2 %
000003ea : 01e40433;   % 222: 	add s0, s0, t5 %
000003eb : 02730f33;   % 224: 	mul t5, t1, t2 %
000003ec : 14000393;   % 225: 	li t2, 320 %
000003ed : 027f0f33;   % 226: 	mul t5, t5, t2 %
000003ee : 01e40433;   % 227: 	add s0, s0, t5 %
000003ef : 00000293;   % 229: 	li t0, 0 %
000003f0 : 00000f13;   % 230: 	li t5, 0 %
000003f1 : 016005b3;   % 232: 	mv a1, s6			#s6 ficará salvo a sprite do ash %
000003f2 : 00858593;   % 233: 	addi a1, a1, 8 %
000003f3 : 000c1863;   % 235: 	bnez s8, CONTRARIO_ROCHA %
000003f4 : 00000317;   % 236: 	call PRINT_TILE %
000003f5 : 82c300e7;   % 236:  %
000003f6 : 00c0006f;   % 237: 	j KEY2_ROCHA %
000003f7 : 00000317;   % 239: 	call PRINT_TILE_INVERSO %
000003f8 : 854300e7;   % 239:  %
000003f9 : ff200337;   % 242: 	li t1,0xFF200000		# carrega o endereço de controle do KDMMIO %
000003fa : 00030313;   % 242:  %
000003fb : 00032283;   % 243: 	lw t0,0(t1)			# Le bit de Controle Teclado %
000003fc : 0012f293;   % 244: 	andi t0,t0,0x0001		# mascara o bit menos significativo %
000003fd : 00028863;   % 245:    	beq t0,zero,FIM_ROCHA   	   	# Se não há tecla pressionada então vai para FIM %
000003fe : 00432383;   % 246:   	lw t2,4(t1)  			# le o valor da tecla tecla %
000003ff : 00000317;   % 247: 	call MOVE_TELA_ROCHA %
00000400 : 00c300e7;   % 247:  %
00000401 : fe1ff06f;   % 249: 	j KEY2_ROCHA			# retorna %
00000402 : 06400293;   % 252: 	li t0, 'd' %
00000403 : 02728063;   % 253: 	beq t0, t2, MOVE_DIREITA_ROCHA %
00000404 : 06100293;   % 255: 	li t0, 'a' %
00000405 : 04728a63;   % 256: 	beq t0, t2, MOVE_ESQUERDA_ROCHA %
00000406 : 07700293;   % 258: 	li t0, 'w' %
00000407 : 08728463;   % 259: 	beq t0, t2, MOVE_CIMA_ROCHA %
00000408 : 07300293;   % 261: 	li t0, 's' %
00000409 : 0a728e63;   % 262: 	beq t0, t2, MOVE_BAIXO_ROCHA %
0000040a : 00008067;   % 264: 	ret %
0000040b : 00000c13;   % 268: 	li s8, 0 %
0000040c : 000b8a63;   % 269: 	beqz s7, DIR1_ROCHA %
0000040d : 0fc13b17;   % 270: 	la s6, ash_dir_dir %
0000040e : 8b4b0b13;   % 270:  %
0000040f : 00000b93;   % 271: 	li s7, 0 %
00000410 : 0100006f;   % 272: 	j DIR2_ROCHA %
00000411 : 0fc13b17;   % 275: 	la s6, ash_dir_esq %
00000412 : 9acb0b13;   % 275:  %
00000413 : 00100b93;   % 276: 	li s7, 1 %
00000414 : 0fc13517;   % 278: 	la a0, posicao_inicial_personagem %
00000415 : 08450513;   % 278:  %
00000416 : 00052283;   % 279: 	lw t0, 0(a0) %
00000417 : 00128293;   % 280: 	addi t0, t0, 1	 %
00000418 : 00552023;   % 281: 	sw t0, 0(a0) %
00000419 : d71ff06f;   % 282: 	j INICIO_ROCHA %
0000041a : 00000c13;   % 285: 	li s8, 0 %
0000041b : 000b8a63;   % 286: 	beqz s7, ESQ1_ROCHA %
0000041c : 0fc13b17;   % 287: 	la s6, ash_esq_dir %
0000041d : a88b0b13;   % 287:  %
0000041e : 00000b93;   % 288: 	li s7, 0 %
0000041f : 0100006f;   % 289: 	j ESQ2_ROCHA %
00000420 : 0fc13b17;   % 292: 	la s6, ash_esq_esq %
00000421 : b80b0b13;   % 292:  %
00000422 : 00100b93;   % 293: 	li s7, 1 %
00000423 : 0fc13517;   % 295: 	la a0, posicao_inicial_personagem %
00000424 : 04850513;   % 295:  %
00000425 : 00052283;   % 296: 	lw t0, 0(a0) %
00000426 : fff28293;   % 297: 	addi t0, t0, -1	 %
00000427 : 00552023;   % 298: 	sw t0, 0(a0) %
00000428 : d35ff06f;   % 299: 	j INICIO_ROCHA %
00000429 : 00000c13;   % 302: 	li s8, 0 %
0000042a : 000b8a63;   % 303: 	beqz s7, CIMA1_ROCHA %
0000042b : 0fc12b17;   % 304: 	la s6, ash_costas_dir %
0000042c : 524b0b13;   % 304:  %
0000042d : 00000b93;   % 305: 	li s7, 0 %
0000042e : 0100006f;   % 306: 	j CIMA2_ROCHA %
0000042f : 0fc12b17;   % 309: 	la s6, ash_costas_esq %
00000430 : 61cb0b13;   % 309:  %
00000431 : 00100b93;   % 310: 	li s7, 1 %
00000432 : 0fc13517;   % 312: 	la a0, posicao_inicial_personagem %
00000433 : 00c50513;   % 312:  %
00000434 : 00452283;   % 313: 	lw t0, 4(a0) %
00000435 : fff28293;   % 314: 	addi t0, t0, -1	 %
00000436 : 00552223;   % 316: 	sw t0, 4(a0) %
00000437 : cf9ff06f;   % 317: 	j INICIO_ROCHA %
00000438 : 00000c13;   % 320: 	li s8, 0 %
00000439 : 000b8a63;   % 321: 	beqz s7, BAIXO1_ROCHA %
0000043a : 0fc12b17;   % 322: 	la s6, ash_andando_dir %
0000043b : 1d0b0b13;   % 322:  %
0000043c : 00000b93;   % 323: 	li s7, 0 %
0000043d : 0100006f;   % 324: 	j BAIXO2_ROCHA %
0000043e : 0fc12b17;   % 327: 	la s6, ash_andando_esq %
0000043f : 2c8b0b13;   % 327:  %
00000440 : 00100b93;   % 328: 	li s7, 1 %
00000441 : 0fc13517;   % 330: 	la a0, posicao_inicial_personagem %
00000442 : fd050513;   % 330:  %
00000443 : 00052303;   % 331: 	lw t1, 0(a0) %
00000444 : 00452283;   % 332: 	lw t0, 4(a0) %
00000445 : 00128293;   % 333: 	addi t0, t0, 1	 %
00000446 : 00f00393;   % 335: 	li t2, 15 %
00000447 : 0072d663;   % 336: 	bge t0, t2, TALVEZ_SAI_ROCHA %
00000448 : 00552223;   % 338: 	sw t0, 4(a0) %
00000449 : cb1ff06f;   % 339: 	j INICIO_ROCHA %
0000044a : 00a00393;   % 342: 	li t2, 10 %
0000044b : 00730663;   % 343: 	beq t1, t2, SAI_ROCHA %
0000044c : 00552223;   % 345: 	sw t0, 4(a0) %
0000044d : ca1ff06f;   % 346: 	j INICIO_ROCHA %
0000044e : 990ff06f;   % 349: 	j PALLET_TOWN %
0000044f : 00000513;   % 5:     li a0, 0x00000000 %
00000450 : 00000293;   % 6:     li t0, 0        #limite de colunas %
00000451 : 00000313;   % 7:     li t1, 0        #limite de linhas %
00000452 : 00001437;   % 9:     li s0, 0xff0 %
00000453 : ff040413;   % 9:  %
00000454 : 01441413;   % 10:     slli s0, s0, 20 %
00000455 : 00000317;   % 12:     call DISPLAY_PRETO %
00000456 : 0d4300e7;   % 12:  %
00000457 : 0fc10517;   % 15:     la a0, professor %
00000458 : b3450513;   % 15:  %
00000459 : 04000593;   % 16:     li a1, 64 %
0000045a : 03000613;   % 17:     li a2, 48 %
0000045b : 00000693;   % 18:     li a3, 0 %
0000045c : 00000317;   % 19:     call PRINT_D %
0000045d : 0fc300e7;   % 19:  %
0000045e : 0fc13517;   % 21:     la a0, dialogo1 %
0000045f : f6450513;   % 21:  %
00000460 : 00000293;   % 22:     li t0, 0 %
00000461 : 05000313;   % 23:     li t1, 80 %
00000462 : 00000317;   % 24:     call PRINT_D_STR %
00000463 : 0c8300e7;   % 24:  %
00000464 : 0fc13517;   % 26:     la a0, dialogo2 %
00000465 : f6750513;   % 26:  %
00000466 : 00000293;   % 27:     li t0, 0 %
00000467 : 06000313;   % 28:     li t1, 96 %
00000468 : 00000317;   % 29:     call PRINT_D_STR %
00000469 : 0b0300e7;   % 29:  %
0000046a : 0fc13517;   % 31:     la a0, dialogo3 %
0000046b : f7550513;   % 31:  %
0000046c : 00000293;   % 32:     li t0, 0 %
0000046d : 07000313;   % 33:     li t1, 112 %
0000046e : 00000317;   % 34:     call PRINT_D_STR %
0000046f : 098300e7;   % 34:  %
00000470 : 0fc13517;   % 36:     la a0, dialogo4 %
00000471 : f7a50513;   % 36:  %
00000472 : 00000293;   % 37:     li t0, 0 %
00000473 : 08000313;   % 38:     li t1, 128 %
00000474 : 00000317;   % 39:     call PRINT_D_STR %
00000475 : 080300e7;   % 39:  %
00000476 : 0fc13517;   % 41:     la a0, dialogo5 %
00000477 : f7950513;   % 41:  %
00000478 : 00000293;   % 42:     li t0, 0 %
00000479 : 09000313;   % 43:     li t1, 144 %
0000047a : 00000317;   % 44:     call PRINT_D_STR %
0000047b : 068300e7;   % 44:  %
0000047c : 0fc13517;   % 46:     la a0, dialogo6 %
0000047d : f7750513;   % 46:  %
0000047e : 00000293;   % 47:     li t0, 0 %
0000047f : 0a000313;   % 48:     li t1, 160 %
00000480 : 00000317;   % 49:     call PRINT_D_STR %
00000481 : 050300e7;   % 49:  %
00000482 : 0fc13517;   % 51:     la a0, dialogo7 %
00000483 : f7450513;   % 51:  %
00000484 : 00000293;   % 52:     li t0, 0 %
00000485 : 0b000313;   % 53:     li t1, 176 %
00000486 : 00000317;   % 54:     call PRINT_D_STR %
00000487 : 038300e7;   % 54:  %
00000488 : 00000317;   % 56:     call KEY_DIALOGO %
00000489 : 0b0300e7;   % 56:  %
0000048a : 00a42023;   % 59:     sw a0, 0(s0) %
0000048b : 00440413;   % 61:     addi s0, s0, 4 %
0000048c : 00428293;   % 62:     addi t0, t0, 4 %
0000048d : 14000393;   % 64:     li t2, 320 %
0000048e : fe5398e3;   % 65:     bne t2, t0, DISPLAY_PRETO %
0000048f : 00000293;   % 67:     li t0, 0 %
00000490 : 00130313;   % 68:     addi t1, t1, 1 %
00000491 : 0f000393;   % 70:     li t2, 240 %
00000492 : fe6390e3;   % 71:     bne t2, t1, DISPLAY_PRETO  %
00000493 : 00008067;   % 72:     ret %
00000494 : 06800893;   % 80:     li a7, 104 %
00000495 : 005005b3;   % 81: 	mv a1, t0 %
00000496 : 00600633;   % 82: 	mv a2, t1 %
00000497 : 03600693;   % 83: 	li a3, 0x0036 %
00000498 : 00000713;   % 84: 	li a4, 0 %
00000499 : 00000073;   % 85: 	ecall %
0000049a : 00008067;   % 86: 	ret		 %
0000049b : 000012b7;   % 89:     li t0, 0xFF0 %
0000049c : ff028293;   % 89:  %
0000049d : 00d282b3;   % 90:     add t0, t0, a3 %
0000049e : 01429293;   % 91:     slli t0, t0, 20 %
0000049f : 00b282b3;   % 93:     add t0, t0, a1 %
000004a0 : 14000313;   % 95:     li t1, 320 %
000004a1 : 02c30333;   % 96:     mul t1, t1, a2 %
000004a2 : 006282b3;   % 97:     add t0, t0, t1 %
000004a3 : 00850313;   % 99:     addi t1, a0, 8  # a0 = endereco da imagem %
000004a4 : 000003b3;   % 101:     mv t2, zero %
000004a5 : 00000e33;   % 102:     mv t3, zero %
000004a6 : 00052e83;   % 104:     lw t4, 0(a0) %
000004a7 : 00452f03;   % 105:     lw t5, 4(a0) %
000004a8 : 00032f83;   % 108:     lw t6, 0(t1) %
000004a9 : 01f2a023;   % 109:     sw t6, 0(t0) %
000004aa : 00428293;   % 111:     addi t0, t0, 4 %
000004ab : 00430313;   % 112:     addi t1, t1, 4 %
000004ac : 004e0e13;   % 114:     addi t3, t3, 4 %
000004ad : ffde46e3;   % 116:     blt t3, t4, PRINT_D_LINHA %
000004ae : 14028293;   % 118:     addi t0, t0, 320 %
000004af : 41d282b3;   % 119:     sub t0, t0, t4 %
000004b0 : 00000e33;   % 121:     mv t3, zero %
000004b1 : 00138393;   % 122:     addi t2, t2, 1 %
000004b2 : fde3cce3;   % 124:     bgt t5, t2, PRINT_D_LINHA %
000004b3 : 00008067;   % 126:     ret %
000004b4 : ff200337;   % 130: 	li t1,0xFF200000		# carrega o endereço de controle do KDMMIO %
000004b5 : 00030313;   % 130:  %
000004b6 : 00032283;   % 131: 	lw t0,0(t1)			    # Le bit de Controle Teclado %
000004b7 : 0012f293;   % 132: 	andi t0,t0,0x0001		# mascara o bit menos significativo %
000004b8 : 02028a63;   % 133:    	beq t0,zero,FIM_DIALOGO # Se não há tecla pressionada então vai para FIM %
000004b9 : 00432383;   % 134:   	lw t2,4(t1)  			# le o valor da tecla tecla %
000004ba : 03100e13;   % 135:     li t3, '1'		        # carrega o valor da tecla 1 %
000004bb : 03200e93;   % 136:     li t4, '2'		        # carrega o valor da tecla 2 %
000004bc : 03300f13;   % 137:     li t5, '3'		        # carrega o valor da tecla 3 %
000004bd : 07300f93;   % 138:     li t6, 's'		        # carrega o valor da tecla s %
000004be : 06900d93;   % 139:     li s11, 'i'		        # carrega o valor da tecla i %
000004bf : 05c38463;   % 141:    	beq t2, t3, POKEMON_CHARMANDER %
000004c0 : 0dd38e63;   % 142:    	beq t2, t4, POKEMON_BULBASAUR %
000004c1 : 17e38863;   % 143:    	beq t2, t5, POKEMON_SQUIRTLE	    %
000004c2 : 3df38a63;   % 144:    	beq t2, t6, RETORNA_CASA	        %
000004c3 : 21b38c63;   % 145:    	beq t2, s11, ABRE_INVENTARIO	        %
000004c4 : 0040006f;   % 147:    	j FIM_DIALOGO			# se não for nenhuma opcao então volta para FIM_DIALOGO %
000004c5 : fbdff06f;   % 150:     j KEY_DIALOGO		# retorna %
000004c6 : ff200337;   % 154: 	li t1,0xFF200000		# carrega o endereço de controle do KDMMIO %
000004c7 : 00030313;   % 154:  %
000004c8 : 00032283;   % 155: 	lw t0,0(t1)			    # Le bit de Controle Teclado %
000004c9 : 0012f293;   % 156: 	andi t0,t0,0x0001		# mascara o bit menos significativo %
000004ca : 00028c63;   % 157:    	beq t0,zero,FIM_INVENTARIO # Se não há tecla pressionada então vai para FIM %
000004cb : 00432383;   % 158:   	lw t2,4(t1)  			# le o valor da tecla tecla %
000004cc : 07300e13;   % 160:     li t3, 's'		         %
000004cd : 3bc38463;   % 161:    	beq t2, t3, RETORNA_CASA %
000004ce : 31c39463;   % 163:    	bne t2, t3, USAR_ITEM	    %
000004cf : 0040006f;   % 165:    	j FIM_INVENTARIO			# se não for nenhuma opcao então volta para FIM_INVENTARIO %
000004d0 : fd9ff06f;   % 168:     j KEY_INVENTARIO		# retorna %
000004d1 : 00000513;   % 171:     li a0, 0x00000000 %
000004d2 : 00000293;   % 172:     li t0, 0        #limite de colunas %
000004d3 : 00000313;   % 173:     li t1, 0        #limite de linhas %
000004d4 : 00001437;   % 175:     li s0, 0xff0 %
000004d5 : ff040413;   % 175:  %
000004d6 : 01441413;   % 176:     slli s0, s0, 20 %
000004d7 : 00000317;   % 177:     call DISPLAY_PRETO %
000004d8 : ecc300e7;   % 177:  %
000004d9 : 0fc13517;   % 180:     la a0, pokemon_jogador %
000004da : f2850513;   % 180:  %
000004db : 00750023;   % 181:     sb t2, 0(a0) %
000004dc : 0fc13517;   % 183:     la a0, charmander %
000004dd : 45050513;   % 183:  %
000004de : 09000593;   % 184:     li a1, 144 %
000004df : 06000613;   % 185:     li a2, 96 %
000004e0 : 00000693;   % 186:     li a3, 0 %
000004e1 : 00000317;   % 187:     call PRINT_D %
000004e2 : ee8300e7;   % 187:  %
000004e3 : 0fc13517;   % 189:     la a0, dialogo8 %
000004e4 : e1250513;   % 189:  %
000004e5 : 00000293;   % 190:     li t0, 0 %
000004e6 : 08000313;   % 191:     li t1, 128 %
000004e7 : 00000317;   % 192:     call PRINT_D_STR %
000004e8 : eb4300e7;   % 192:  %
000004e9 : 0fc13517;   % 194:     la a0, dialogo11 %
000004ea : e5a50513;   % 194:  %
000004eb : 00000293;   % 195:     li t0, 0 %
000004ec : 0a000313;   % 196:     li t1, 160 %
000004ed : 00000317;   % 197:     call PRINT_D_STR %
000004ee : e9c300e7;   % 197:  %
000004ef : 0fc13517;   % 199:     la a0, dialogo12 %
000004f0 : e6350513;   % 199:  %
000004f1 : 00000293;   % 200:     li t0, 0 %
000004f2 : 0b000313;   % 201:     li t1, 176 %
000004f3 : 00000317;   % 202:     call PRINT_D_STR %
000004f4 : e84300e7;   % 202:  %
000004f5 : 00000317;   % 204:     call KEY_DIALOGO %
000004f6 : efc300e7;   % 204:  %
000004f7 : 00000513;   % 207:     li a0, 0x00000000 %
000004f8 : 00000293;   % 208:     li t0, 0        #limite de colunas %
000004f9 : 00000313;   % 209:     li t1, 0        #limite de linhas %
000004fa : 00001437;   % 211:     li s0, 0xff0 %
000004fb : ff040413;   % 211:  %
000004fc : 01441413;   % 212:     slli s0, s0, 20 %
000004fd : 00000317;   % 213:     call DISPLAY_PRETO %
000004fe : e34300e7;   % 213:  %
000004ff : 0fc13517;   % 216:     la a0, pokemon_jogador %
00000500 : e9050513;   % 216:  %
00000501 : 00750023;   % 217:     sb t2, 0(a0) %
00000502 : 0fc13517;   % 219:     la a0, bulbasaur %
00000503 : 4c050513;   % 219:  %
00000504 : 09000593;   % 220:     li a1, 144 %
00000505 : 06000613;   % 221:     li a2, 96 %
00000506 : 00000693;   % 222:     li a3, 0 %
00000507 : 00000317;   % 223:     call PRINT_D %
00000508 : e50300e7;   % 223:  %
00000509 : 0fc13517;   % 225:     la a0, dialogo9 %
0000050a : d9b50513;   % 225:  %
0000050b : 00000293;   % 226:     li t0, 0 %
0000050c : 08000313;   % 227:     li t1, 128 %
0000050d : 00000317;   % 228:     call PRINT_D_STR %
0000050e : e1c300e7;   % 228:  %
0000050f : 0fc13517;   % 230:     la a0, dialogo11 %
00000510 : dc250513;   % 230:  %
00000511 : 00000293;   % 231:     li t0, 0 %
00000512 : 0a000313;   % 232:     li t1, 160 %
00000513 : 00000317;   % 233:     call PRINT_D_STR %
00000514 : e04300e7;   % 233:  %
00000515 : 0fc13517;   % 235:     la a0, dialogo12 %
00000516 : dcb50513;   % 235:  %
00000517 : 00000293;   % 236:     li t0, 0 %
00000518 : 0b000313;   % 237:     li t1, 176 %
00000519 : 00000317;   % 238:     call PRINT_D_STR %
0000051a : dec300e7;   % 238:  %
0000051b : 00000317;   % 240:     call KEY_DIALOGO %
0000051c : e64300e7;   % 240:  %
0000051d : 00000513;   % 243:     li a0, 0x00000000 %
0000051e : 00000293;   % 244:     li t0, 0        #limite de colunas %
0000051f : 00000313;   % 245:     li t1, 0        #limite de linhas %
00000520 : 00001437;   % 247:     li s0, 0xff0 %
00000521 : ff040413;   % 247:  %
00000522 : 01441413;   % 248:     slli s0, s0, 20 %
00000523 : 00000317;   % 249:     call DISPLAY_PRETO %
00000524 : d9c300e7;   % 249:  %
00000525 : 0fc13517;   % 252:     la a0, pokemon_jogador %
00000526 : df850513;   % 252:  %
00000527 : 00750023;   % 253:     sb t2, 0(a0) %
00000528 : 0fc13517;   % 256:     la a0, squirtle %
00000529 : 53050513;   % 256:  %
0000052a : 09000593;   % 257:     li a1, 144 %
0000052b : 06000613;   % 258:     li a2, 96 %
0000052c : 00000693;   % 259:     li a3, 0 %
0000052d : 00000317;   % 260:     call PRINT_D %
0000052e : db8300e7;   % 260:  %
0000052f : 0fc13517;   % 262:     la a0, dialogo8 %
00000530 : ce250513;   % 262:  %
00000531 : 00000293;   % 263:     li t0, 0 %
00000532 : 08000313;   % 264:     li t1, 128 %
00000533 : 00000317;   % 265:     call PRINT_D_STR %
00000534 : d84300e7;   % 265:  %
00000535 : 0fc13517;   % 267:     la a0, dialogo11 %
00000536 : d2a50513;   % 267:  %
00000537 : 00000293;   % 268:     li t0, 0 %
00000538 : 0a000313;   % 269:     li t1, 160 %
00000539 : 00000317;   % 270:     call PRINT_D_STR %
0000053a : d6c300e7;   % 270:  %
0000053b : 0fc13517;   % 272:     la a0, dialogo10 %
0000053c : cf350513;   % 272:  %
0000053d : 00000293;   % 273:     li t0, 0 %
0000053e : 0b000313;   % 274:     li t1, 176 %
0000053f : 00000317;   % 275:     call PRINT_D_STR %
00000540 : d54300e7;   % 275:  %
00000541 : 0fc13517;   % 277:     la a0, dialogo12 %
00000542 : d1b50513;   % 277:  %
00000543 : 00000293;   % 278:     li t0, 0 %
00000544 : 0b000313;   % 279:     li t1, 176 %
00000545 : 00000317;   % 280:     call PRINT_D_STR %
00000546 : d3c300e7;   % 280:  %
00000547 : 00000317;   % 282:     call KEY_DIALOGO %
00000548 : db4300e7;   % 282:  %
00000549 : 00000513;   % 286:     li a0, 0x00000000 %
0000054a : 00000293;   % 287:     li t0, 0        #limite de colunas %
0000054b : 00000313;   % 288:     li t1, 0        #limite de linhas %
0000054c : 00001437;   % 290:     li s0, 0xff0 %
0000054d : ff040413;   % 290:  %
0000054e : 01441413;   % 291:     slli s0, s0, 20 %
0000054f : 00000317;   % 292:     call DISPLAY_PRETO %
00000550 : cec300e7;   % 292:  %
00000551 : 0fc13817;   % 294:     la a6, inventario_jogador %
00000552 : d4980813;   % 294:  %
00000553 : 0fc13517;   % 296:     la a0, dialogo13 %
00000554 : cf750513;   % 296:  %
00000555 : 05000293;   % 297:     li t0, 80 %
00000556 : 04000313;   % 298:     li t1, 64 %
00000557 : 00000317;   % 299:     call PRINT_D_STR %
00000558 : cf4300e7;   % 299:  %
00000559 : 0fc13517;   % 301:     la a0, dialogo14 %
0000055a : cee50513;   % 301:  %
0000055b : 03000293;   % 302:     li t0, 48 %
0000055c : 0a000313;   % 303:     li t1, 160 %
0000055d : 00000317;   % 304:     call PRINT_D_STR %
0000055e : cdc300e7;   % 304:  %
0000055f : 00000d33;   % 306:     mv s10, zero %
00000560 : 00000317;   % 307:     call LOOP_INVENTARIO %
00000561 : 010300e7;   % 307:  %
00000562 : 00000317;   % 310:     call KEY_INVENTARIO %
00000563 : d90300e7;   % 310:  %
00000564 : 00900293;   % 316:     li t0, 9 %
00000565 : fe5d0ae3;   % 317:     beq s10, t0, SAIR_LOOP %
00000566 : 00080283;   % 319:     lb t0, 0(a6) %
00000567 : 00100e93;   % 321:     li t4, 1 %
00000568 : 025e8063;   % 322:     beq t4, t0, PRINT_POCAO %
00000569 : 00200e93;   % 324:     li t4, 2 %
0000056a : 025e8c63;   % 325:     beq t4, t0, PRINT_POKEBOLA %
0000056b : 00300e93;   % 327:     li t4, 3 %
0000056c : 045e8863;   % 328:     beq t4, t0, PRINT_CHAVE %
0000056d : 001d0d13;   % 331:     addi s10, s10, 1 %
0000056e : 00180813;   % 332:     addi a6, a6, 1 %
0000056f : fd5ff06f;   % 333:     j LOOP_INVENTARIO %
00000570 : 0fc12517;   % 336:     la a0, pocao %
00000571 : bf050513;   % 336:  %
00000572 : 08000593;   % 337:     li a1, 128 %
00000573 : 06000613;   % 338:     li a2, 96 %
00000574 : 00000693;   % 339:     li a3, 0 %
00000575 : 00000317;   % 340:     call PRINT_D %
00000576 : c98300e7;   % 340:  %
00000577 : fd9ff06f;   % 342:     j RETORNA %
00000578 : 0fc13517;   % 345:     la a0, pokebola %
00000579 : 4f850513;   % 345:  %
0000057a : 09000593;   % 346:     li a1, 144 %
0000057b : 06000613;   % 347:     li a2, 96 %
0000057c : 00000693;   % 348:     li a3, 0 %
0000057d : 00000317;   % 349:     call PRINT_D %
0000057e : c78300e7;   % 349:  %
0000057f : fb9ff06f;   % 351:     j RETORNA %
00000580 : 0fc12517;   % 354:     la a0, chave %
00000581 : aa850513;   % 354:  %
00000582 : 0a000593;   % 355:     li a1, 160 %
00000583 : 06000613;   % 356:     li a2, 96 %
00000584 : 00000693;   % 357:     li a3, 0 %
00000585 : 00000317;   % 358:     call PRINT_D %
00000586 : c58300e7;   % 358:  %
00000587 : f99ff06f;   % 360:     j RETORNA %
00000588 : 00000513;   % 363:     li a0, 0x00000000 %
00000589 : 00000293;   % 364:     li t0, 0        #limite de colunas %
0000058a : 00000313;   % 365:     li t1, 0        #limite de linhas %
0000058b : 00001437;   % 367:     li s0, 0xff0 %
0000058c : ff040413;   % 367:  %
0000058d : 01441413;   % 368:     slli s0, s0, 20 %
0000058e : 00000317;   % 369:     call DISPLAY_PRETO %
0000058f : bf0300e7;   % 369:  %
00000590 : 0fc13517;   % 374:     la a0, inventario_jogador %
00000591 : c4d50513;   % 374:  %
00000592 : 00000293;   % 375:     li t0, 0 %
00000593 : 03100e13;   % 377:     li t3, '1'	 %
00000594 : 01c39663;   % 378:     bne t2, t3, TESTA2 %
00000595 : 00550023;   % 379:     sb t0, 0(a0) %
00000596 : ecdff06f;   % 381:     j ABRE_INVENTARIO %
00000597 : 03200e13;   % 384:     li t3, '2'	 %
00000598 : 01c39663;   % 385:     bne t2, t3, TESTA3 %
00000599 : 005500a3;   % 386:     sb t0, 1(a0) %
0000059a : ebdff06f;   % 388:     j ABRE_INVENTARIO %
0000059b : 03300e13;   % 391:     li t3, '3'	 %
0000059c : 01c39663;   % 392:     bne t2, t3, TESTA4 %
0000059d : 00550123;   % 393:     sb t0, 2(a0) %
0000059e : eadff06f;   % 395:     j ABRE_INVENTARIO %
0000059f : 03400e13;   % 398:     li t3, '4'	 %
000005a0 : 01c39663;   % 399:     bne t2, t3, TESTA5 %
000005a1 : 005501a3;   % 400:     sb t0, 3(a0) %
000005a2 : e9dff06f;   % 402:     j ABRE_INVENTARIO %
000005a3 : 03500e13;   % 405:     li t3, '5'	 %
000005a4 : 01c39663;   % 406:     bne t2, t3, TESTA6 %
000005a5 : 00550223;   % 407:     sb t0, 4(a0) %
000005a6 : e8dff06f;   % 409:     j ABRE_INVENTARIO %
000005a7 : 03600e13;   % 412:     li t3, '6'	 %
000005a8 : 01c39663;   % 413:     bne t2, t3, TESTA7 %
000005a9 : 005502a3;   % 414:     sb t0, 5(a0) %
000005aa : e7dff06f;   % 416:     j ABRE_INVENTARIO %
000005ab : 03700e13;   % 419:     li t3, '7'	 %
000005ac : 01c39663;   % 420:     bne t2, t3, TESTA8 %
000005ad : 00550323;   % 421:     sb t0, 6(a0) %
000005ae : e6dff06f;   % 423:     j ABRE_INVENTARIO %
000005af : 03800e13;   % 426:     li t3, '8'	 %
000005b0 : 01c39663;   % 427:     bne t2, t3, TESTA9 %
000005b1 : 005503a3;   % 428:     sb t0, 7(a0) %
000005b2 : e5dff06f;   % 430:     j ABRE_INVENTARIO %
000005b3 : 03900e13;   % 433:     li t3, '9'	 %
000005b4 : c5c394e3;   % 434:     bne t2, t3, KEY_INVENTARIO %
000005b5 : 00550423;   % 435:     sb t0, 8(a0) %
000005b6 : c41ff06f;   % 437: j KEY_INVENTARIO %
000005b7 : b4cff06f;   % 441:     j CASA %
000005b8 : 0420d073;   % 107: 	csrwi ucause,1		# caso ocorra dropdown vai gerar exce��o de instru��o inv�lida %
000005b9 : ff810113;   % 109: ExceptionHandling:	addi 	sp, sp, -8 	# salva 2 registradores utilizados para comparar ucause %
000005ba : 00512023;   % 110: 	sw 	t0, 0(sp) %
000005bb : 01a12223;   % 111: 	sw 	s10, 4(sp) %
000005bc : 04202d73;   % 113: 	csrr	s10,ucause     # le o ucause e salva em s10 %
000005bd : 00800293;   % 115: 	li 	t0, 8 %
000005be : 01a29a63;   % 116: 	bne 	t0, s10, errorExceptions  	# N�o � ecall - nem precisa arrumar a pilha! %
000005bf : 00012283;   % 118: 	lw 	t0, 0(sp)			# � ecall %
000005c0 : 00412d03;   % 119:     	lw 	s10, 4(sp)  			# recupera registradores usados %
000005c1 : 00810113;   % 120:     	addi 	sp, sp, 8			 %
000005c2 : 1e00006f;   % 121: 	j 	ecallException %
000005c3 : 04302df3;   % 127: errorExceptions: csrr 	s11, utval      # le o utval da exce��o e salva em s11	 %
000005c4 : 0c000513;   % 128: 	addi 	a0, zero, 0xc0 		## printa tela de azul %
000005c5 : 00000593;   % 129: 	addi 	a1, zero, 0 %
000005c6 : 09400893;   % 130: 	addi 	a7, zero, 148 %
000005c7 : 2d8010ef;   % 131: 	jal 	clsCLS %
000005c8 : 00000293;   % 134: End_Cause0:	li 	t0, 0 %
000005c9 : 03a29263;   % 135: 		bne 	t0, s10, End_Cause1 %
000005ca : 0fc14517;   % 136: 		la 	a0, Cause0 %
000005cb : b2450513;   % 136:  %
000005cc : 00000593;   % 137: 		li 	a1, 0 %
000005cd : 00100613;   % 138: 		li 	a2, 1 %
000005ce : 0000c6b7;   % 139: 		li 	a3, 0x0000c0ff %
000005cf : 0ff68693;   % 139:  %
000005d0 : 109000ef;   % 140: 		jal	printString %
000005d1 : 16c0006f;   % 141: 		j	End_uepc %
000005d2 : 00100293;   % 144: End_Cause1:	li 	t0, 1 %
000005d3 : 03a29263;   % 145: 		bne 	t0, s10, End_Cause2 %
000005d4 : 0fc14517;   % 146: 		la 	a0, Cause1 %
000005d5 : b2550513;   % 146:  %
000005d6 : 00000593;   % 147: 		li 	a1, 0 %
000005d7 : 00100613;   % 148: 		li 	a2, 1 %
000005d8 : 0000c6b7;   % 149: 		li 	a3, 0x0000c0ff %
000005d9 : 0ff68693;   % 149:  %
000005da : 0e1000ef;   % 150: 		jal 	printString	 %
000005db : 1440006f;   % 151: 		j	End_uepc %
000005dc : 00200293;   % 154: End_Cause2:	li 	t0, 2 %
000005dd : 03a29663;   % 155: 		bne 	t0, s10, End_Cause4 %
000005de : 0fc14517;   % 156: 		la 	a0, Cause2 %
000005df : b2050513;   % 156:  %
000005e0 : 00000593;   % 157: 		li 	a1, 0 %
000005e1 : 00100613;   % 158: 		li 	a2, 1 %
000005e2 : 0000c6b7;   % 159: 		li 	a3, 0x0000c0ff %
000005e3 : 0ff68693;   % 159:  %
000005e4 : 0b9000ef;   % 160: 		jal 	printString %
000005e5 : 0fc14517;   % 162: 		la 	a0, Instr %
000005e6 : bca50513;   % 162:  %
000005e7 : 0e80006f;   % 163: 		j	End_utval %
000005e8 : 00400293;   % 166: End_Cause4:	addi 	t0, zero, 4 %
000005e9 : 03a29663;   % 167: 		bne	t0, s10, End_Cause5 %
000005ea : 0fc14517;   % 168: 		la 	a0, Cause4 %
000005eb : b0d50513;   % 168:  %
000005ec : 00000593;   % 169: 		li 	a1, 0 %
000005ed : 00100613;   % 170: 		li 	a2, 1 %
000005ee : 0000c6b7;   % 171: 		li 	a3, 0x0000c0ff %
000005ef : 0ff68693;   % 171:  %
000005f0 : 089000ef;   % 172: 		jal	printString %
000005f1 : 0fc14517;   % 174: 		la 	a0, Addrs %
000005f2 : b9250513;   % 174:  %
000005f3 : 0b80006f;   % 175: 		j	End_utval %
000005f4 : 00500293;   % 178: End_Cause5:	li 	t0, 5 %
000005f5 : 03a29663;   % 179: 		bne 	t0, s10, End_Cause6 %
000005f6 : 0fc14517;   % 180: 		la 	a0, Cause5 %
000005f7 : aff50513;   % 180:  %
000005f8 : 00000593;   % 181: 		li 	a1, 0 %
000005f9 : 00100613;   % 182: 		li 	a2, 1 %
000005fa : 0000c6b7;   % 183: 		li 	a3, 0x0000c0ff %
000005fb : 0ff68693;   % 183:  %
000005fc : 059000ef;   % 184: 		jal 	printString	 %
000005fd : 0fc14517;   % 186: 		la 	a0, Addrs %
000005fe : b6250513;   % 186:  %
000005ff : 0880006f;   % 187: 		j	End_utval %
00000600 : 00600293;   % 190: End_Cause6:	li 	t0, 6 %
00000601 : 03a29663;   % 191: 		bne 	t0, s10, End_Cause7 %
00000602 : 0fc14517;   % 192: 		la 	a0, Cause6 %
00000603 : aeb50513;   % 192:  %
00000604 : 00000593;   % 193: 		li 	a1, 0 %
00000605 : 00100613;   % 194: 		li 	a2, 1 %
00000606 : 0000c6b7;   % 195: 		li 	a3, 0x0000c0ff %
00000607 : 0ff68693;   % 195:  %
00000608 : 029000ef;   % 196: 		jal 	printString %
00000609 : 0fc14517;   % 198: 		la 	a0, Addrs %
0000060a : b3250513;   % 198:  %
0000060b : 0580006f;   % 199: 		j	End_utval %
0000060c : 00700293;   % 202: End_Cause7:	li 	t0, 7 %
0000060d : 03a29663;   % 203: 		bne 	t0, s10, End_CauseD %
0000060e : 0fc14517;   % 204: 		la 	a0, Cause7 %
0000060f : ade50513;   % 204:  %
00000610 : 00000593;   % 205: 		li 	a1, 0 %
00000611 : 00100613;   % 206: 		li 	a2, 1 %
00000612 : 0000c6b7;   % 207: 		li 	a3, 0x0000c0ff %
00000613 : 0ff68693;   % 207:  %
00000614 : 7f8000ef;   % 208: 		jal 	printString %
00000615 : 0fc14517;   % 210: 		la 	a0, Addrs %
00000616 : b0250513;   % 210:  %
00000617 : 0280006f;   % 211: 		j	End_utval %
00000618 : 0fc14517;   % 214: End_CauseD: 	la 	a0, CauseD %
00000619 : ad350513;   % 214:  %
0000061a : 00000593;   % 215: 		li 	a1, 0 %
0000061b : 00100613;   % 216: 		li 	a2, 1 %
0000061c : 0000c6b7;   % 217: 		li 	a3, 0x0000c0ff %
0000061d : 0ff68693;   % 217:  %
0000061e : 7d0000ef;   % 218: 		jal 	printString %
0000061f : 0fc14517;   % 220: 		la 	a0, Addrs %
00000620 : ada50513;   % 220:  %
00000621 : 00000593;   % 223: End_utval:	li 	a1, 0 %
00000622 : 01800613;   % 224: 		li 	a2, 24 %
00000623 : 0000c6b7;   % 225: 		li 	a3, 0x000c0ff %
00000624 : 0ff68693;   % 225:  %
00000625 : 7b4000ef;   % 226: 		jal	printString %
00000626 : 01b00533;   % 228: 		mv 	a0, s11 %
00000627 : 03800593;   % 229: 		li 	a1, 56 %
00000628 : 01800613;   % 230: 		li 	a2, 24 %
00000629 : 0000c6b7;   % 231: 		li 	a3, 0x0000c0ff %
0000062a : 0ff68693;   % 231:  %
0000062b : 728000ef;   % 232: 		jal 	printHex %
0000062c : 0fc14517;   % 235: End_uepc: 	la 	a0, PC 		# Imprime o pc em que a exce��o ocorreu %
0000062d : aa150513;   % 235:  %
0000062e : 00000593;   % 236: 		li 	a1, 0 %
0000062f : 00c00613;   % 237: 		li 	a2, 12 %
00000630 : 0000c6b7;   % 238: 		li 	a3, 0x000c0ff %
00000631 : 0ff68693;   % 238:  %
00000632 : 780000ef;   % 239: 		jal 	printString %
00000633 : 04102573;   % 241: 		csrr 	a0, uepc	# Le uepc	 %
00000634 : 01c00593;   % 242: 		li	a1, 28 %
00000635 : 00c00613;   % 243: 		li 	a2, 12 %
00000636 : 0000c6b7;   % 244: 		li 	a3, 0x0000c0ff %
00000637 : 0ff68693;   % 244:  %
00000638 : 6f4000ef;   % 245: 		jal 	printHex	 %
00000639 : 24c0006f;   % 247: 		j goToExit 		# encerra execu��o %
0000063a : ef810113;   % 254: ecallException:   addi    sp, sp, -264              # Salva todos os registradores na pilha %
0000063b : 00112023;   % 255:     sw     x1,    0(sp) %
0000063c : 00212223;   % 256:     sw     x2,    4(sp) %
0000063d : 00312423;   % 257:     sw     x3,    8(sp) %
0000063e : 00412623;   % 258:     sw     x4,   12(sp) %
0000063f : 00512823;   % 259:     sw     x5,   16(sp) %
00000640 : 00612a23;   % 260:     sw     x6,   20(sp) %
00000641 : 00712c23;   % 261:     sw     x7,   24(sp) %
00000642 : 00812e23;   % 262:     sw     x8,   28(sp) %
00000643 : 02912023;   % 263:     sw     x9,   32(sp) %
00000644 : 02a12223;   % 264:     sw     x10,  36(sp) %
00000645 : 02b12423;   % 265:     sw     x11,  40(sp) %
00000646 : 02c12623;   % 266:     sw     x12,  44(sp) %
00000647 : 02d12823;   % 267:     sw     x13,  48(sp) %
00000648 : 02e12a23;   % 268:     sw     x14,  52(sp) %
00000649 : 02f12c23;   % 269:     sw     x15,  56(sp) %
0000064a : 03012e23;   % 270:     sw     x16,  60(sp) %
0000064b : 05112023;   % 271:     sw     x17,  64(sp) %
0000064c : 05212223;   % 272:     sw     x18,  68(sp) %
0000064d : 05312423;   % 273:     sw     x19,  72(sp) %
0000064e : 05412623;   % 274:     sw     x20,  76(sp) %
0000064f : 05512823;   % 275:     sw     x21,  80(sp) %
00000650 : 05612a23;   % 276:     sw     x22,  84(sp) %
00000651 : 05712c23;   % 277:     sw     x23,  88(sp) %
00000652 : 05812e23;   % 278:     sw     x24,  92(sp) %
00000653 : 07912023;   % 279:     sw     x25,  96(sp) %
00000654 : 07a12223;   % 280:     sw     x26, 100(sp) %
00000655 : 07b12423;   % 281:     sw     x27, 104(sp) %
00000656 : 07c12623;   % 282:     sw     x28, 108(sp) %
00000657 : 07d12823;   % 283:     sw     x29, 112(sp) %
00000658 : 07e12a23;   % 284:     sw     x30, 116(sp) %
00000659 : 07f12c23;   % 285:     sw     x31, 120(sp) %
0000065a : 30102c73;   % 286: <22> csrr s8, misa %
0000065b : 020c7c13;   % 286: <23> andi s8, s8, 0x020 %
0000065c : 080c0263;   % 286: <24> beqz s8, ecallException.pula %
0000065d : 06012e27;   % 287:     fsw    f0,  124(sp) %
0000065e : 08112027;   % 288:     fsw    f1,  128(sp) %
0000065f : 08212227;   % 289:     fsw    f2,  132(sp) %
00000660 : 08312427;   % 290:     fsw    f3,  136(sp) %
00000661 : 08412627;   % 291:     fsw    f4,  140(sp) %
00000662 : 08512827;   % 292:     fsw    f5,  144(sp) %
00000663 : 08612a27;   % 293:     fsw    f6,  148(sp) %
00000664 : 08712c27;   % 294:     fsw    f7,  152(sp) %
00000665 : 08812e27;   % 295:     fsw    f8,  156(sp) %
00000666 : 0a912027;   % 296:     fsw    f9,  160(sp) %
00000667 : 0aa12227;   % 297:     fsw    f10, 164(sp) %
00000668 : 0ab12427;   % 298:     fsw    f11, 168(sp) %
00000669 : 0ac12627;   % 299:     fsw    f12, 172(sp) %
0000066a : 0ad12827;   % 300:     fsw    f13, 176(sp) %
0000066b : 0ae12a27;   % 301:     fsw    f14, 180(sp) %
0000066c : 0af12c27;   % 302:     fsw    f15, 184(sp) %
0000066d : 0b012e27;   % 303:     fsw    f16, 188(sp) %
0000066e : 0d112027;   % 304:     fsw    f17, 192(sp) %
0000066f : 0d212227;   % 305:     fsw    f18, 196(sp) %
00000670 : 0d312427;   % 306:     fsw    f19, 200(sp) %
00000671 : 0d412627;   % 307:     fsw    f20, 204(sp) %
00000672 : 0d512827;   % 308:     fsw    f21, 208(sp) %
00000673 : 0d612a27;   % 309:     fsw    f22, 212(sp) %
00000674 : 0d712c27;   % 310:     fsw    f23, 216(sp) %
00000675 : 0d812e27;   % 311:     fsw    f24, 220(sp) %
00000676 : 0f912027;   % 312:     fsw    f25, 224(sp) %
00000677 : 0fa12227;   % 313:     fsw    f26, 228(sp) %
00000678 : 0fb12427;   % 314:     fsw    f27, 232(sp) %
00000679 : 0fc12627;   % 315:     fsw    f28, 236(sp) %
0000067a : 0fd12827;   % 316:     fsw    f29, 240(sp) %
0000067b : 0fe12a27;   % 317:     fsw    f30, 244(sp) %
0000067c : 0ff12c27;   % 318:     fsw    f31, 248(sp) %
0000067d : 000002b3;   % 321:     add     t0, zero, zero %
0000067e : 00000333;   % 322:     add     t1, zero, zero %
0000067f : 000003b3;   % 323:     add     t2, zero, zero %
00000680 : 00000e33;   % 324:     add     t3, zero, zero %
00000681 : 00000eb3;   % 325:     add     t4, zero, zero %
00000682 : 00000f33;   % 326:     add     t5, zero, zero %
00000683 : 00000fb3;   % 327:     add     t6, zero, zero %
00000684 : 00a00293;   % 332:     addi    t0, zero, 10 %
00000685 : 11128e63;   % 333:     beq     t0, a7, goToExit          # ecall exit %
00000686 : 06e00293;   % 334:     addi    t0, zero, 110 %
00000687 : 11128a63;   % 335:     beq     t0, a7, goToExit          # ecall exit %
00000688 : 00100293;   % 337:     addi    t0, zero, 1               # ecall 1 = print int %
00000689 : 13128263;   % 338:     beq     t0, a7, goToPrintInt %
0000068a : 06500293;   % 339:     addi    t0, zero, 101             # ecall 1 = print int %
0000068b : 11128e63;   % 340:     beq     t0, a7, goToPrintInt %
0000068c : 00200293;   % 342:     addi    t0, zero, 2               # ecall 2 = print float %
0000068d : 13128663;   % 343:     beq     t0, a7, goToPrintFloat %
0000068e : 06600293;   % 344:     addi    t0, zero, 102             # ecall 2 = print float %
0000068f : 13128263;   % 345:     beq     t0, a7, goToPrintFloat %
00000690 : 00400293;   % 347:     addi    t0, zero, 4               # ecall 4 = print string %
00000691 : 11128663;   % 348:     beq     t0, a7, goToPrintString %
00000692 : 06800293;   % 349:     addi    t0, zero, 104             # ecall 4 = print string %
00000693 : 11128263;   % 350:     beq     t0, a7, goToPrintString %
00000694 : 00500293;   % 352:     addi    t0, zero, 5               # ecall 5 = read int %
00000695 : 13128463;   % 353:     beq     t0, a7, goToReadInt %
00000696 : 06900293;   % 354:     addi    t0, zero, 105             # ecall 5 = read int %
00000697 : 13128063;   % 355:     beq     t0, a7, goToReadInt %
00000698 : 00600293;   % 357:     addi    t0, zero, 6               # ecall 6 = read float %
00000699 : 13128463;   % 358:     beq     t0, a7, goToReadFloat %
0000069a : 06a00293;   % 359:     addi    t0, zero, 106             # ecall 6 = read float %
0000069b : 13128063;   % 360:     beq     t0, a7, goToReadFloat %
0000069c : 00800293;   % 362:     addi    t0, zero, 8               # ecall 8 = read string %
0000069d : 11128863;   % 363:     beq     t0, a7, goToReadString %
0000069e : 06c00293;   % 364:     addi    t0, zero, 108             # ecall 8 = read string %
0000069f : 11128463;   % 365:     beq     t0, a7, goToReadString %
000006a0 : 00b00293;   % 367:     addi    t0, zero, 11              # ecall 11 = print char %
000006a1 : 0d128a63;   % 368:     beq     t0, a7, goToPrintChar %
000006a2 : 06f00293;   % 369:     addi    t0, zero, 111             # ecall 11 = print char %
000006a3 : 0d128663;   % 370:     beq     t0, a7, goToPrintChar %
000006a4 : 00c00293;   % 372:     addi    t0, zero, 12              # ecall 12 = read char %
000006a5 : 0f128063;   % 373:     beq     t0, a7, goToReadChar %
000006a6 : 07000293;   % 374:     addi    t0, zero, 112             # ecall 12 = read char %
000006a7 : 0d128c63;   % 375:     beq     t0, a7, goToReadChar %
000006a8 : 01e00293;   % 377:     addi    t0, zero, 30              # ecall 30 = time %
000006a9 : 11128e63;   % 378:     beq     t0, a7, goToTime %
000006aa : 08200293;   % 379:     addi    t0, zero, 130             # ecall 30 = time %
000006ab : 11128a63;   % 380:     beq     t0, a7, goToTime %
000006ac : 02000293;   % 382:     addi    t0, zero, 32              # ecall 32 = sleep %
000006ad : 11128a63;   % 383:     beq     t0, a7, goToSleep %
000006ae : 08400293;   % 384:     addi    t0, zero, 132             # ecall 32 = sleep %
000006af : 11128663;   % 385:     beq     t0, a7, goToSleep %
000006b0 : 02900293;   % 387:     addi    t0, zero, 41              # ecall 41 = random %
000006b1 : 11128663;   % 388:     beq     t0, a7, goToRandom %
000006b2 : 08d00293;   % 389:     addi    t0, zero, 141             # ecall 41 = random %
000006b3 : 11128263;   % 390:     beq     t0, a7, goToRandom %
000006b4 : 02200293;   % 392:     addi    t0, zero, 34       		# ecall 34 = print hex %
000006b5 : 0d128663;   % 393:     beq     t0, a7, goToPrintHex %
000006b6 : 08600293;   % 394:     addi    t0, zero, 134		# ecall 34 = print hex %
000006b7 : 0d128263;   % 395:     beq     t0, a7, goToPrintHex %
000006b8 : 01f00293;   % 397:     addi    t0, zero, 31              # ecall 31 = MIDI out %
000006b9 : 0d128663;   % 398:     beq     t0, a7, goToMidiOut       # Generate tone and return immediately %
000006ba : 08300293;   % 399:     addi    t0, zero, 131             # ecall 31 = MIDI out %
000006bb : 0d128263;   % 400:     beq     t0, a7, goToMidiOut %
000006bc : 02100293;   % 402:     addi    t0, zero, 33              # ecall 33 = MIDI out synchronous %
000006bd : 0d128263;   % 403:     beq     t0, a7, goToMidiOutSync   # Generate tone and return upon tone completion %
000006be : 08500293;   % 404:     addi    t0, zero, 133             # ecall 33 = MIDI out synchronous %
000006bf : 0b128e63;   % 405:     beq     t0, a7, goToMidiOutSync %
000006c0 : 03000293;   % 407:     addi    t0, zero, 48              # ecall 48 = CLS %
000006c1 : 0d128a63;   % 408:     beq     t0, a7, goToCLS %
000006c2 : 09400293;   % 409:     addi    t0, zero, 148              # ecall 48 = CLS %
000006c3 : 0d128663;   % 410:     beq     t0, a7, goToCLS %
000006c4 : 02f00293;   % 412:     addi    t0, zero, 47              # ecall 47 = DrawLine %
000006c5 : 0d128663;   % 413:     beq     t0, a7, goToBRES %
000006c6 : 09300293;   % 414:     addi    t0, zero, 147              # ecall 47 = DrawLine %
000006c7 : 0d128263;   % 415:     beq     t0, a7, goToBRES     %
000006c8 : 02400293;   % 418:     addi    t0, zero, 36              # ecall 36 = PrintIntUnsigned %
000006c9 : 09128263;   % 419:     beq     t0, a7, goToPrintIntUnsigned %
000006ca : 08800293;   % 420:     addi    t0, zero, 136             # ecall 36 = PrintIntUnsigned %
000006cb : 07128e63;   % 421:     beq     t0, a7, goToPrintIntUnsigned %
000006cc : 10008c37;   % 425: <9> li s8, 0x10008000	# carrega tp %
000006cd : 000c0c13;   % 425:  %
000006ce : 01819663;   % 425: <10> bne gp, s8, goToExitDE2	# Na DE1 gp = 0 ! N�o tem segmento .extern %
000006cf : 00a00893;   % 426: 			li 	a7, 10			# chama o ecall normal do Rars %
000006d0 : 00000073;   % 427: 			ecall				# exit ecall	 %
000006d1 : 0000006f;   % 428: 	goToExitDE2:	j 	goToExitDE2		# trava o processador : N�o tem sistema operacional! %
000006d2 : 210000ef;   % 430: 	goToPrintInt:	jal     printInt               	# chama printInt %
000006d3 : 09c0006f;   % 431: 			j       endEcall %
000006d4 : 4f8000ef;   % 433: 	goToPrintString: jal     printString           	# chama printString %
000006d5 : 0940006f;   % 434: 			 j       endEcall %
000006d6 : 538000ef;   % 436: 	goToPrintChar:	jal     printChar		# chama printChar %
000006d7 : 08c0006f;   % 437: 			j       endEcall %
000006d8 : 30102c73;   % 439: <22> csrr s8, misa %
000006d9 : 020c7c13;   % 439: <23> andi s8, s8, 0x020 %
000006da : 180c0663;   % 439: <24> beqz s8, NaoExisteEcall %
000006db : 1a9000ef;   % 440: 			jal     printFloat		# chama printFloat %
000006dc : 0780006f;   % 441: 			j       endEcall %
000006dd : 658000ef;   % 443: 	goToReadChar:	jal     readChar              	# chama readChar %
000006de : 0700006f;   % 444: 			j       endEcall %
000006df : 780000ef;   % 446: 	goToReadInt:   	jal     readInt                 # chama readInt %
000006e0 : 0680006f;   % 447: 			j       endEcall %
000006e1 : 6e8000ef;   % 449: 	goToReadString:	jal     readString              # chama readString %
000006e2 : 0600006f;   % 450: 			j       endEcall %
000006e3 : 30102c73;   % 452: <22> csrr s8, misa %
000006e4 : 020c7c13;   % 452: <23> andi s8, s8, 0x020 %
000006e5 : 160c0063;   % 452: <24> beqz s8, NaoExisteEcall %
000006e6 : 381000ef;   % 453: 			jal     readFloat               # chama readFloat %
000006e7 : 04c0006f;   % 454: 			j       endEcall %
000006e8 : 434000ef;   % 456: 	goToPrintHex:	jal     printHex                # chama printHex %
000006e9 : 0440006f;   % 457: 			j       endEcall %
000006ea : 064010ef;   % 459: 	goToPrintIntUnsigned: 	jal	printIntUnsigned	# chama Print Unsigned Int %
000006eb : 03c0006f;   % 460: 				j	endEcall   %
000006ec : 05d000ef;   % 462: 	goToMidiOut:	jal     midiOut                 # chama MIDIout %
000006ed : 0340006f;   % 463: 			j       endEcall %
000006ee : 0cd000ef;   % 465: 	goToMidiOutSync: jal     midiOutSync   		# chama MIDIoutSync %
000006ef : 02c0006f;   % 466: 			 j       endEcall %
000006f0 : 5bd000ef;   % 468: 	goToTime:	jal     Time                    # chama time %
000006f1 : 0240006f;   % 469: 			j       endEcall %
000006f2 : 5d9000ef;   % 471: 	goToSleep:	jal     Sleep                  	# chama sleep %
000006f3 : 01c0006f;   % 472: 			j       endEcall %
000006f4 : 5fd000ef;   % 474: 	goToRandom:	jal     Random                 	# chama random %
000006f5 : 0140006f;   % 475: 			j       endEcall %
000006f6 : 61d000ef;   % 477: 	goToCLS:	jal     clsCLS                 	# chama CLS %
000006f7 : 00c0006f;   % 478: 			j       endEcall %
000006f8 : 671000ef;   % 480: 	goToBRES:	jal     BRESENHAM               # chama BRESENHAM %
000006f9 : 0040006f;   % 481: 			j       endEcall    	 %
000006fa : 00012083;   % 485: endEcall:  	lw	x1,   0(sp)  # recupera QUASE todos os registradores na pilha %
000006fb : 00412103;   % 486: 		lw	x2,   4(sp)	 %
000006fc : 00812183;   % 487: 		lw	x3,   8(sp)	 %
000006fd : 00c12203;   % 488: 		lw	x4,  12(sp)      	 %
000006fe : 01012283;   % 489: 		lw	x5,  16(sp)      	 %
000006ff : 01412303;   % 490: 		lw	x6,  20(sp)	 %
00000700 : 01812383;   % 491: 		lw	x7,  24(sp) %
00000701 : 01c12403;   % 492: 		lw	x8,  28(sp) %
00000702 : 02012483;   % 493: 		lw	x9,  32(sp) %
00000703 : 02c12603;   % 496: 		lw     x12, 44(sp) %
00000704 : 03012683;   % 497: 		lw     x13, 48(sp) %
00000705 : 03412703;   % 498: 		lw     x14, 52(sp) %
00000706 : 03812783;   % 499: 		lw     x15, 56(sp) %
00000707 : 03c12803;   % 500: 		lw     x16, 60(sp) %
00000708 : 04012883;   % 501: 		lw     x17, 64(sp) %
00000709 : 04412903;   % 502: 		lw     x18, 68(sp) %
0000070a : 04812983;   % 503: 		lw     x19, 72(sp) %
0000070b : 04c12a03;   % 504: 		lw     x20, 76(sp) %
0000070c : 05012a83;   % 505: 		lw     x21, 80(sp) %
0000070d : 05412b03;   % 506: 		lw     x22, 84(sp) %
0000070e : 05812b83;   % 507: 		lw     x23, 88(sp) %
0000070f : 05c12c03;   % 508: 		lw     x24, 92(sp) %
00000710 : 06012c83;   % 509: 		lw     x25, 96(sp) %
00000711 : 06412d03;   % 510: 		lw     x26, 100(sp) %
00000712 : 06812d83;   % 511: 		lw     x27, 104(sp) %
00000713 : 06c12e03;   % 512: 		lw     x28, 108(sp) %
00000714 : 07012e83;   % 513: 		lw     x29, 112(sp) %
00000715 : 07412f03;   % 514: 		lw     x30, 116(sp) %
00000716 : 07812f83;   % 515: 		lw     x31, 120(sp) %
00000717 : 30102c73;   % 516: <22> csrr s8, misa %
00000718 : 020c7c13;   % 516: <23> andi s8, s8, 0x020 %
00000719 : 060c0e63;   % 516: <24> beqz s8, endEcall.pula %
0000071a : 07c12007;   % 517: 		flw    f0,  124(sp) %
0000071b : 08012087;   % 518: 		flw    f1,  128(sp) %
0000071c : 08412107;   % 519: 		flw    f2,  132(sp) %
0000071d : 08812187;   % 520: 		flw    f3,  136(sp) %
0000071e : 08c12207;   % 521: 		flw    f4,  140(sp) %
0000071f : 09012287;   % 522: 		flw    f5,  144(sp) %
00000720 : 09412307;   % 523: 		flw    f6,  148(sp) %
00000721 : 09812387;   % 524: 		flw    f7,  152(sp) %
00000722 : 09c12407;   % 525: 		flw    f8,  156(sp) %
00000723 : 0a012487;   % 526: 		flw    f9,  160(sp) %
00000724 : 0ac12607;   % 529: 		flw    f12, 172(sp) %
00000725 : 0b012687;   % 530: 		flw    f13, 176(sp) %
00000726 : 0b412707;   % 531: 		flw    f14, 180(sp) %
00000727 : 0b812787;   % 532: 		flw    f15, 184(sp) %
00000728 : 0bc12807;   % 533: 		flw    f16, 188(sp) %
00000729 : 0c012887;   % 534: 		flw    f17, 192(sp) %
0000072a : 0c412907;   % 535: 		flw    f18, 196(sp) %
0000072b : 0c812987;   % 536: 		flw    f19, 200(sp) %
0000072c : 0cc12a07;   % 537: 		flw    f20, 204(sp) %
0000072d : 0d012a87;   % 538: 		flw    f21, 208(sp) %
0000072e : 0d412b07;   % 539: 		flw    f22, 212(sp) %
0000072f : 0d812b87;   % 540: 		flw    f23, 216(sp) %
00000730 : 0dc12c07;   % 541: 		flw    f24, 220(sp) %
00000731 : 0e012c87;   % 542: 		flw    f25, 224(sp) %
00000732 : 0e412d07;   % 543: 		flw    f26, 228(sp) %
00000733 : 0e812d87;   % 544: 		flw    f27, 232(sp) %
00000734 : 0ec12e07;   % 545: 		flw    f28, 236(sp) %
00000735 : 0f012e87;   % 546: 		flw    f29, 240(sp) %
00000736 : 0f412f07;   % 547: 		flw    f30, 244(sp) %
00000737 : 0f812f87;   % 548: 		flw    f31, 248(sp) %
00000738 : 10810113;   % 550: endEcall.pula:	addi    sp, sp, 264 %
00000739 : 04102273;   % 552: 		csrr 	tp, uepc 	# le o valor de EPC salvo no registrador uepc (reg 65) %
0000073a : 00420213;   % 553: 		addi 	tp, tp, 4	# soma 4 para obter a instrucao seguinte ao ecall %
0000073b : 04121073;   % 554: 		csrw 	tp, uepc	# coloca no registrador uepc %
0000073c : 00200073;   % 555: 		uret			# retorna PC=uepc %
0000073d : 0c000513;   % 563: NaoExisteEcall: addi 	a0, zero, 0xc0 		## printa tela de azul %
0000073e : 00000593;   % 564: 		addi 	a1, zero, 0 %
0000073f : 01100833;   % 565: 		mv 	a6, a7 %
00000740 : 09400893;   % 566: 		addi 	a7, zero, 148 %
00000741 : 4f1000ef;   % 567: 		jal 	clsCLS %
00000742 : 0fc13517;   % 568:   		la 	a0, CauseE %
00000743 : 63b50513;   % 568:  %
00000744 : 00000593;   % 569: 		li 	a1, 0 %
00000745 : 00100613;   % 570: 		li 	a2, 1 %
00000746 : 0000c6b7;   % 571: 		li 	a3, 0x0000c0ff %
00000747 : 0ff68693;   % 571:  %
00000748 : 328000ef;   % 572: 		jal 	printString %
00000749 : 01000533;   % 573: 		mv 	a0, a6 %
0000074a : 06800593;   % 574: 		li 	a1, 104 %
0000074b : 00100613;   % 575: 		li 	a2, 1 %
0000074c : 0000c6b7;   % 576: 		li 	a3, 0x0000c0ff %
0000074d : 0ff68693;   % 576:  %
0000074e : 020000ef;   % 577: 		jal 	printInt %
0000074f : 04102573;   % 578: 		csrr	a0,uepc %
00000750 : 08800593;   % 579: 		li 	a1, 136 %
00000751 : 00100613;   % 580: 		li 	a2, 1 %
00000752 : 0000c6b7;   % 581: 		li 	a3, 0x0000c0ff %
00000753 : 0ff68693;   % 581:  %
00000754 : 284000ef;   % 582: 		jal 	printHex		 %
00000755 : dddff06f;   % 583: 		j 	goToExit %
00000756 : ffc10113;   % 595: printInt:	addi 	sp, sp, -4			# Aloca espaco %
00000757 : 00112023;   % 596: 		sw 	ra, 0(sp)			# salva ra %
00000758 : 0fc13297;   % 597: 		la 	t0, TempBuffer			# carrega o Endereco do Buffer da String %
00000759 : 2a428293;   % 597:  %
0000075a : 00055a63;   % 599: 		bge 	a0, zero, ehposprintInt		# Se eh positvo %
0000075b : 02d00313;   % 600: 		li 	t1, '-'				# carrega o sinal - %
0000075c : 00628023;   % 601: 		sb 	t1, 0(t0)			# coloca no buffer %
0000075d : 00128293;   % 602: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
0000075e : 40a00533;   % 603: 		sub 	a0, zero, a0			# torna o numero positivo %
0000075f : 00a00393;   % 605: ehposprintInt:  li 	t2, 10				# carrega numero 10 %
00000760 : 00000313;   % 606: 		li 	t1, 0				# carrega numero de digitos com 0 %
00000761 : 30102c73;   % 608: <29> csrr s8, misa %
00000762 : 00cc5c13;   % 608: <30> srli s8, s8, 12 %
00000763 : 001c7c13;   % 608: <31> andi s8, s8, 0x001 %
00000764 : 1e0c1863;   % 608: <32> bnez s8, printInt.pula1 %
00000765 : ff410113;   % 609: <99> addi 	sp,sp,-12 %
00000766 : 00a12023;   % 609: <100> sw	a0,0(sp) %
00000767 : 00b12223;   % 609: <101> sw	a1,4(sp) %
00000768 : 00c12423;   % 609: <102> sw	a2,8(sp) %
00000769 : 00a00633;   % 609: <103> mv 	a2,a0 %
0000076a : 41f65593;   % 609: <104> srai 	a1,a2,31 %
0000076b : 00c00533;   % 609: <105> mv 	a0,a2 %
0000076c : 00058463;   % 609: <106> beqz 	a1,div10.pula1_M6 %
0000076d : 40c00533;   % 609: <107> neg 	a0,a2 %
0000076e : ff010113;   % 609: <65> addi 	sp, sp, -16 %
0000076f : 00a12023;   % 609: <66> sw	a0, 0(sp) %
00000770 : 00e12223;   % 609: <67> sw	a4, 4(sp) %
00000771 : 00f12423;   % 609: <68> sw	a5, 8(sp) %
00000772 : 00112623;   % 609: <69> sw	ra, 12(sp) %
00000773 : 00a00533;   % 609: <70> mv 	a0, a0 %
00000774 : 00155713;   % 609: <71> srli    a4,a0,1 %
00000775 : 00255793;   % 609: <72> srli    a5,a0,2 %
00000776 : 00f707b3;   % 609: <73> add     a5,a4,a5 %
00000777 : 0047d713;   % 609: <74> srli    a4,a5,4 %
00000778 : 00f70733;   % 609: <75> add     a4,a4,a5 %
00000779 : 00875793;   % 609: <76> srli    a5,a4,8 %
0000077a : 00e78733;   % 609: <77> add     a4,a5,a4 %
0000077b : 01075793;   % 609: <78> srli    a5,a4,16 %
0000077c : 00e787b3;   % 609: <79> add     a5,a5,a4 %
0000077d : 0037d793;   % 609: <80> srli    a5,a5,3 %
0000077e : 00279713;   % 609: <81> slli    a4,a5,2 %
0000077f : 00f70733;   % 609: <82> add     a4,a4,a5 %
00000780 : 00171713;   % 609: <83> slli    a4,a4,1 %
00000781 : 40e50533;   % 609: <84> sub     a0,a0,a4 %
00000782 : 00a53513;   % 609: <85> sltiu   a0,a0,10 %
00000783 : 00154513;   % 609: <86> xori    a0,a0,1 %
00000784 : 00f50533;   % 609: <87> add     a0,a0,a5 %
00000785 : 04051073;   % 609: <88> csrw	a0,uscratch %
00000786 : 00012503;   % 609: <89> lw	a0, 0(sp) %
00000787 : 00412703;   % 609: <90> lw	a4, 4(sp) %
00000788 : 00812783;   % 609: <91> lw	a5, 8(sp) %
00000789 : 00c12083;   % 609: <92> lw	ra, 12(sp) %
0000078a : 01010113;   % 609: <93> addi 	sp, sp, 16 %
0000078b : 04002ef3;   % 609: <94> csrr	t4,uscratch %
0000078c : 00058463;   % 609: <109> beqz 	a1,div10.pula2_M6 %
0000078d : 41d00eb3;   % 609: <110> neg 	t4,t4 %
0000078e : 040e9073;   % 609: <111> div10.pula2_M6:	csrw	t4,uscratch %
0000078f : 00012503;   % 609: <112> lw	a0,0(sp) %
00000790 : 00412583;   % 609: <113> lw 	a1,4(sp) %
00000791 : 00812603;   % 609: <114> lw	a2,8(sp) %
00000792 : 00c10113;   % 609: <115> addi 	sp,sp,12 %
00000793 : 04002ef3;   % 609: <116> csrr	t4,uscratch %
00000794 : ff010113;   % 610: <145> addi 	sp,sp,-16 %
00000795 : 00a12023;   % 610: <146> sw	a0,0(sp) %
00000796 : 00b12223;   % 610: <147> sw	a1,4(sp) %
00000797 : 00c12423;   % 610: <148> sw	a2,8(sp) %
00000798 : 00d12623;   % 610: <149> sw	a3,12(sp) %
00000799 : 00a006b3;   % 610: <151> mv 	a3,a0 %
0000079a : 00a00613;   % 610: <152> li 	a2,10 %
0000079b : ff410113;   % 610: <99> addi 	sp,sp,-12 %
0000079c : 00a12023;   % 610: <100> sw	a0,0(sp) %
0000079d : 00b12223;   % 610: <101> sw	a1,4(sp) %
0000079e : 00c12423;   % 610: <102> sw	a2,8(sp) %
0000079f : 00d00633;   % 610: <103> mv 	a2,a3 %
000007a0 : 41f65593;   % 610: <104> srai 	a1,a2,31 %
000007a1 : 00c00533;   % 610: <105> mv 	a0,a2 %
000007a2 : 00058463;   % 610: <106> beqz 	a1,div10.pula1_M9 %
000007a3 : 40c00533;   % 610: <107> neg 	a0,a2 %
000007a4 : ff010113;   % 610: <65> addi 	sp, sp, -16 %
000007a5 : 00a12023;   % 610: <66> sw	a0, 0(sp) %
000007a6 : 00e12223;   % 610: <67> sw	a4, 4(sp) %
000007a7 : 00f12423;   % 610: <68> sw	a5, 8(sp) %
000007a8 : 00112623;   % 610: <69> sw	ra, 12(sp) %
000007a9 : 00a00533;   % 610: <70> mv 	a0, a0 %
000007aa : 00155713;   % 610: <71> srli    a4,a0,1 %
000007ab : 00255793;   % 610: <72> srli    a5,a0,2 %
000007ac : 00f707b3;   % 610: <73> add     a5,a4,a5 %
000007ad : 0047d713;   % 610: <74> srli    a4,a5,4 %
000007ae : 00f70733;   % 610: <75> add     a4,a4,a5 %
000007af : 00875793;   % 610: <76> srli    a5,a4,8 %
000007b0 : 00e78733;   % 610: <77> add     a4,a5,a4 %
000007b1 : 01075793;   % 610: <78> srli    a5,a4,16 %
000007b2 : 00e787b3;   % 610: <79> add     a5,a5,a4 %
000007b3 : 0037d793;   % 610: <80> srli    a5,a5,3 %
000007b4 : 00279713;   % 610: <81> slli    a4,a5,2 %
000007b5 : 00f70733;   % 610: <82> add     a4,a4,a5 %
000007b6 : 00171713;   % 610: <83> slli    a4,a4,1 %
000007b7 : 40e50533;   % 610: <84> sub     a0,a0,a4 %
000007b8 : 00a53513;   % 610: <85> sltiu   a0,a0,10 %
000007b9 : 00154513;   % 610: <86> xori    a0,a0,1 %
000007ba : 00f50533;   % 610: <87> add     a0,a0,a5 %
000007bb : 04051073;   % 610: <88> csrw	a0,uscratch %
000007bc : 00012503;   % 610: <89> lw	a0, 0(sp) %
000007bd : 00412703;   % 610: <90> lw	a4, 4(sp) %
000007be : 00812783;   % 610: <91> lw	a5, 8(sp) %
000007bf : 00c12083;   % 610: <92> lw	ra, 12(sp) %
000007c0 : 01010113;   % 610: <93> addi 	sp, sp, 16 %
000007c1 : 04002573;   % 610: <94> csrr	a0,uscratch %
000007c2 : 00058463;   % 610: <109> beqz 	a1,div10.pula2_M9 %
000007c3 : 40a00533;   % 610: <110> neg 	a0,a0 %
000007c4 : 04051073;   % 610: <111> div10.pula2_M9:	csrw	a0,uscratch %
000007c5 : 00012503;   % 610: <112> lw	a0,0(sp) %
000007c6 : 00412583;   % 610: <113> lw 	a1,4(sp) %
000007c7 : 00812603;   % 610: <114> lw	a2,8(sp) %
000007c8 : 00c10113;   % 610: <115> addi 	sp,sp,12 %
000007c9 : 04002573;   % 610: <116> csrr	a0,uscratch %
000007ca : ff410113;   % 610: <45> addi 	sp, sp, -12 %
000007cb : 00a12023;   % 610: <46> sw	a0, 0(sp) %
000007cc : 00b12223;   % 610: <47> sw	a1, 4(sp) %
000007cd : 00112423;   % 610: <48> sw	ra, 8(sp) %
000007ce : 00a00533;   % 610: <50> mv 	a0, a0 %
000007cf : 00c005b3;   % 610: <51> mv 	a1, a2 %
000007d0 : 6ad000ef;   % 610: <52> jal 	__mulsi3 %
000007d1 : 04051073;   % 610: <53> csrw	a0,uscratch %
000007d2 : 00012503;   % 610: <55> lw	a0, 0(sp) %
000007d3 : 00412583;   % 610: <56> lw	a1, 4(sp) %
000007d4 : 00812083;   % 610: <57> lw	ra, 8(sp) %
000007d5 : 00c10113;   % 610: <58> addi 	sp, sp, 12 %
000007d6 : 040025f3;   % 610: <59> csrr	a1,uscratch %
000007d7 : 40b68e33;   % 610: <155> sub 	t3,a3,a1 %
000007d8 : 040e1073;   % 610: <157> csrw	t3,uscratch %
000007d9 : 00012503;   % 610: <158> lw	a0,0(sp) %
000007da : 00412583;   % 610: <159> lw 	a1,4(sp) %
000007db : 00812603;   % 610: <160> lw	a2,8(sp) %
000007dc : 00c12683;   % 610: <161> lw 	a3,12(sp) %
000007dd : 01010113;   % 610: <162> addi 	sp,sp,16 %
000007de : 04002e73;   % 610: <163> csrr	t3,uscratch %
000007df : 00c0006f;   % 611: 		j 	printInt.pula1d %
000007e0 : 02754eb3;   % 612: printInt.pula1:	div 	t4, a0, t2			# divide por 10 (quociente) %
000007e1 : 02756e33;   % 613: 		rem 	t3, a0, t2			# resto %
000007e2 : ffc10113;   % 614: printInt.pula1d:addi 	sp, sp, -4			# aloca espaco na pilha %
000007e3 : 01c12023;   % 615: 		sw 	t3, 0(sp)			# coloca resto na pilha %
000007e4 : 01d00533;   % 616: 		mv 	a0, t4				# atualiza o numero com o quociente %
000007e5 : 00130313;   % 617: 		addi 	t1, t1, 1			# incrementa o contador de digitos %
000007e6 : de0516e3;   % 618: 		bne 	a0, zero, loop1printInt		# verifica se o numero eh zero %
000007e7 : 00012383;   % 620: loop2printInt:	lw 	t2, 0(sp)			# le digito da pilha %
000007e8 : 00410113;   % 621: 		addi 	sp, sp, 4			# libera espaco %
000007e9 : 03038393;   % 622: 		addi 	t2, t2, 48			# converte o digito para ascii %
000007ea : 00728023;   % 623: 		sb 	t2, 0(t0)			# coloca caractere no buffer %
000007eb : 00128293;   % 624: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
000007ec : fff30313;   % 625: 		addi 	t1, t1, -1			# decrementa contador de digitos %
000007ed : fe0314e3;   % 626: 		bne 	t1, zero, loop2printInt		# eh o ultimo? %
000007ee : 00028023;   % 627: 		sb 	zero, 0(t0)			# insere \NULL na string %
000007ef : 0fc13517;   % 629: 		la 	a0, TempBuffer			# Endereco do buffer da srting %
000007f0 : 04850513;   % 629:  %
000007f1 : 084000ef;   % 630: 		jal 	printString			# chama o print string %
000007f2 : 00012083;   % 632: 		lw 	ra, 0(sp)			# recupera a %
000007f3 : 00410113;   % 633: 		addi 	sp, sp, 4			# libera espaco %
000007f4 : 00008067;   % 634: fimprintInt:	ret					# retorna %
000007f5 : ffc10113;   % 646: printHex:	addi    sp, sp, -4    		# aloca espaco %
000007f6 : 00112023;   % 647:     		sw      ra, 0(sp)		# salva ra %
000007f7 : 00a002b3;   % 648: 		mv 	t0, a0			# Inteiro de 32 bits a ser impresso em Hexa %
000007f8 : 0fc13317;   % 649: 		la 	t1, TabelaHexASCII	# endereco da tabela HEX->ASCII %
000007f9 : 22430313;   % 649:  %
000007fa : 0fc13397;   % 650: 		la 	t2, TempBuffer		# onde a string sera montada %
000007fb : 01c38393;   % 650:  %
000007fc : 03000e13;   % 652: 		li 	t3,'0'			# Caractere '0' %
000007fd : 01c38023;   % 653: 		sb 	t3,0(t2)		# Escreve '0' no Buffer da String %
000007fe : 07800e13;   % 654: 		li 	t3,'x'			# Caractere 'x' %
000007ff : 01c380a3;   % 655: 		sb 	t3,1(t2)		# Escreve 'x' no Buffer da String %
00000800 : 00238393;   % 656: 		addi 	t2,t2,2			# novo endereco inicial da string %
00000801 : 01c00e13;   % 658: 		li 	t3, 28			# contador de nibble   inicio = 28 %
00000802 : 020e4263;   % 659: loopprintHex:	blt 	t3, zero, fimloopprintHex	# terminou? t3<0? %
00000803 : 01c2deb3;   % 660: 		srl 	t4, t0, t3		# desloca o nibble para direita %
00000804 : 00fefe93;   % 661: 		andi 	t4, t4, 0x000F		# mascara o nibble	 %
00000805 : 01d30eb3;   % 662: 		add 	t4, t1, t4		# endereco do ascii do nibble %
00000806 : 000e8e83;   % 663: 		lb 	t4, 0(t4)		# le ascii do nibble %
00000807 : 01d38023;   % 664: 		sb 	t4, 0(t2)		# armazena o ascii do nibble no buffer da string %
00000808 : 00138393;   % 665: 		addi 	t2, t2, 1		# incrementa o endereco do buffer %
00000809 : ffce0e13;   % 666: 		addi 	t3, t3, -4		# decrementa o numero do nibble %
0000080a : fe1ff06f;   % 667: 		j 	loopprintHex %
0000080b : 00038023;   % 669: fimloopprintHex: sb 	zero,0(t2)		# grava \null na string %
0000080c : 0fc13517;   % 670: 		la 	a0, TempBuffer		# Argumento do print String %
0000080d : fd450513;   % 670:  %
0000080e : 010000ef;   % 671:     		jal	printString		# Chama o print string %
0000080f : 00012083;   % 673: 		lw 	ra, 0(sp)		# recupera ra %
00000810 : 00410113;   % 674: 		addi 	sp, sp, 4		# libera espaco %
00000811 : 00008067;   % 675: fimprintHex:	ret				# retorna %
00000812 : ff810113;   % 686: printString:	addi	sp, sp, -8			# aloca espaco %
00000813 : 00112023;   % 687:     		sw	ra, 0(sp)			# salva ra %
00000814 : 00812223;   % 688:     		sw	s0, 4(sp)			# salva s0 %
00000815 : 00a00433;   % 689:     		mv	s0, a0              		# s0 = endereco do caractere na string %
00000816 : 00040503;   % 691: loopprintString:lb	a0, 0(s0)                 	# le em a0 o caracter a ser impresso %
00000817 : 02050263;   % 693:     		beq     a0, zero, fimloopprintString	# string ASCIIZ termina com NULL %
00000818 : 030000ef;   % 695:     		jal     printChar       		# imprime char %
00000819 : 00858593;   % 697: 		addi    a1, a1, 8                 	# incrementa a coluna %
0000081a : 13900f93;   % 698: 		li 	t6, 313		 %
0000081b : 01f5c663;   % 699: 		blt	a1, t6, NaoPulaLinha	    	# se ainda tiver lugar na linha %
0000081c : 00860613;   % 700:     		addi    a2, a2, 8                 	# incrementa a linha %
0000081d : 000005b3;   % 701:     		mv    	a1, zero			# volta a coluna zero %
0000081e : 00140413;   % 703: NaoPulaLinha:	addi    s0, s0, 1			# proximo caractere %
0000081f : fddff06f;   % 704:     		j       loopprintString       		# volta ao loop %
00000820 : 00012083;   % 706: fimloopprintString:	lw      ra, 0(sp)    		# recupera ra %
00000821 : 00012403;   % 707: 			lw 	s0, 0(sp)		# recupera s0 original %
00000822 : 00810113;   % 708:     			addi    sp, sp, 8		# libera espaco %
00000823 : 00008067;   % 709: fimprintString:	ret      	    			# retorna %
00000824 : 0ff00e93;   % 731: printChar:	li 	t4, 0xFF	# t4 temporario %
00000825 : 008e9e93;   % 732: 		slli 	t4, t4, 8	# t4 = 0x0000FF00 (no RARS, nao podemos fazer diretamente "andi rd, rs1, 0xFF00") %
00000826 : 01d6ff33;   % 733: 		and    	t5, a3, t4   	# t5 obtem cor de fundo %
00000827 : 008f5f13;   % 734:     		srli	t5, t5, 8	# numero da cor de fundo %
00000828 : 0ff6ff93;   % 735: 		andi   	t6, a3, 0xFF    # t6 obtem cor de frente %
00000829 : 02000213;   % 737: 		li 	tp, ' ' %
0000082a : 00454863;   % 738: 		blt 	a0, tp, printChar.NAOIMPRIMIVEL	# ascii menor que 32 nao eh imprimivel %
0000082b : 07e00213;   % 739: 		li 	tp, '~' %
0000082c : 00a24463;   % 740: 		bgt	a0, tp, printChar.NAOIMPRIMIVEL	# ascii Maior que 126  nao eh imprimivel %
0000082d : 0080006f;   % 741:     		j       printChar.IMPRIMIVEL %
0000082e : 02000513;   % 743: printChar.NAOIMPRIMIVEL: li      a0, 32		# Imprime espaco %
0000082f : 14000213;   % 745: printChar.IMPRIMIVEL:	li	tp, 320		# Num colunas 320 %
00000830 : 30102c73;   % 746: <29> csrr s8, misa %
00000831 : 00cc5c13;   % 746: <30> srli s8, s8, 12 %
00000832 : 001c7c13;   % 746: <31> andi s8, s8, 0x001 %
00000833 : 020c1e63;   % 746: <32> bnez s8, printChar.mul1 %
00000834 : ff410113;   % 747: <45> addi 	sp, sp, -12 %
00000835 : 00a12023;   % 747: <46> sw	a0, 0(sp) %
00000836 : 00b12223;   % 747: <47> sw	a1, 4(sp) %
00000837 : 00112423;   % 747: <48> sw	ra, 8(sp) %
00000838 : 00400533;   % 747: <50> mv 	a0, tp %
00000839 : 00c005b3;   % 747: <51> mv 	a1, a2 %
0000083a : 505000ef;   % 747: <52> jal 	__mulsi3 %
0000083b : 04051073;   % 747: <53> csrw	a0,uscratch %
0000083c : 00012503;   % 747: <55> lw	a0, 0(sp) %
0000083d : 00412583;   % 747: <56> lw	a1, 4(sp) %
0000083e : 00812083;   % 747: <57> lw	ra, 8(sp) %
0000083f : 00c10113;   % 747: <58> addi 	sp, sp, 12 %
00000840 : 04002ef3;   % 747: <59> csrr	t4,uscratch %
00000841 : 0080006f;   % 748: 			j printChar.mul1d %
00000842 : 02c20eb3;   % 749: printChar.mul1:		mul     t4, tp, a2			# multiplica a2x320  t4 = coordenada y %
00000843 : 00be8eb3;   % 750: printChar.mul1d:	add     t4, t4, a1               	# t4 = 320*y + x %
00000844 : 007e8e93;   % 751: 			addi    t4, t4, 7                 	# t4 = 320*y + (x+7) %
00000845 : ff000237;   % 752: 			li      tp, 0xFF000000          	# Endereco de inicio da memoria VGA0 %
00000846 : 00020213;   % 752:  %
00000847 : 00070663;   % 753: 			beq 	a4, zero, printChar.PULAFRAME		# Verifica qual o frame a ser usado em a4 %
00000848 : ff100237;   % 754: 			li      tp, 0xFF100000          	# Endereco de inicio da memoria VGA1 %
00000849 : 00020213;   % 754:  %
0000084a : 004e8eb3;   % 755: printChar.PULAFRAME:	add     t4, t4, tp               	# t4 = endereco de impressao do ultimo pixel da primeira linha do char %
0000084b : fe050393;   % 756: 			addi    t2, a0, -32               	# indice do char na memoria %
0000084c : 00339393;   % 757: 			slli    t2, t2, 3                 	# offset em bytes em relacao ao endereco inicial %
0000084d : 0fc13e17;   % 758: 			la      t3, LabelTabChar		# endereco dos caracteres na memoria %
0000084e : aace0e13;   % 758:  %
0000084f : 01c383b3;   % 759: 			add     t2, t2, t3               	# endereco do caractere na memoria %
00000850 : 0003ae03;   % 760: 			lw      t3, 0(t2)                 	# carrega a primeira word do char %
00000851 : 00400293;   % 761: 			li 	t0, 4				# i=4 %
00000852 : 02028e63;   % 763: printChar.forChar1I:	beq     t0, zero, printChar.endForChar1I # if(i == 0) end for i %
00000853 : 00800313;   % 764:     			addi    t1, zero, 8               	# j = 8 %
00000854 : 02030463;   % 766: printChar.forChar1J:	beq     t1, zero, printChar.endForChar1J # if(j == 0) end for j %
00000855 : 001e7c93;   % 767:         		andi    s9, t3, 0x001			# primeiro bit do caracter %
00000856 : 001e5e13;   % 768:         		srli    t3, t3, 1             		# retira o primeiro bit %
00000857 : 000c8663;   % 769:         		beq     s9, zero, printChar.printCharPixelbg1	# pixel eh fundo? %
00000858 : 01fe8023;   % 770:         		sb      t6, 0(t4)             		# imprime pixel com cor de frente %
00000859 : 0080006f;   % 771:         		j       printChar.endCharPixel1 %
0000085a : 01ee8023;   % 772: printChar.printCharPixelbg1:	sb      t5, 0(t4)                # imprime pixel com cor de fundo %
0000085b : fff30313;   % 773: printChar.endCharPixel1: addi    t1, t1, -1                	# j-- %
0000085c : fffe8e93;   % 774:     			addi    t4, t4, -1                	# t4 aponta um pixel para a esquerda %
0000085d : fddff06f;   % 775:     			j       printChar.forChar1J		# vollta novo pixel %
0000085e : fff28293;   % 777: printChar.endForChar1J: addi    t0, t0, -1 		# i-- %
0000085f : 148e8e93;   % 778:     			addi    t4, t4, 328           	# 2**12 + 8 %
00000860 : fc9ff06f;   % 779:     			j       printChar.forChar1I	# volta ao loop %
00000861 : 0043ae03;   % 781: printChar.endForChar1I:	lw      t3, 4(t2)           	# carrega a segunda word do char %
00000862 : 00400293;   % 782: 			li 	t0, 4			# i = 4 %
00000863 : 02028e63;   % 783: printChar.forChar2I:    beq     t0, zero, printChar.endForChar2I  # if(i == 0) end for i %
00000864 : 00800313;   % 784:     			addi    t1, zero, 8             # j = 8 %
00000865 : 02030463;   % 786: printChar.forChar2J:	beq	t1, zero, printChar.endForChar2J # if(j == 0) end for j %
00000866 : 001e7c93;   % 787:         		andi    s9, t3, 0x001	    		# pixel a ser impresso %
00000867 : 001e5e13;   % 788:         		srli    t3, t3, 1                 	# desloca para o proximo %
00000868 : 000c8663;   % 789:         		beq     s9, zero, printChar.printCharPixelbg2 # pixel eh fundo? %
00000869 : 01fe8023;   % 790:         		sb      t6, 0(t4)			# imprime cor frente %
0000086a : 0080006f;   % 791:         		j       printChar.endCharPixel2		# volta ao loop %
0000086b : 01ee8023;   % 793: printChar.printCharPixelbg2:	sb      t5, 0(t4)		# imprime cor de fundo %
0000086c : fff30313;   % 795: printChar.endCharPixel2:	addi    t1, t1, -1		# j-- %
0000086d : fffe8e93;   % 796:     				addi    t4, t4, -1              # t4 aponta um pixel para a esquerda %
0000086e : fddff06f;   % 797:     				j       printChar.forChar2J %
0000086f : fff28293;   % 799: printChar.endForChar2J:	addi	t0, t0, -1 		# i-- %
00000870 : 148e8e93;   % 800:     			addi    t4, t4, 328		# %
00000871 : fc9ff06f;   % 801:     			j       printChar.forChar2I	# volta ao loop %
00000872 : 00008067;   % 803: printChar.endForChar2I:	ret				# retorna %
00000873 : 00000013;   % 812: readChar: 		nop %
00000874 : ff2002b7;   % 816: readCharKDMMIO:		li 	t0, 0xFF200000			# Execucao com Polling do KD MMIO %
00000875 : 00028293;   % 816:  %
00000876 : 0002a503;   % 818: loopReadCharKDMMIO:  	lw     	a0, 0(t0)   			# le o bit de flag do teclado %
00000877 : 00157513;   % 819: 			andi 	a0, a0, 0x0001			# mascara bit 0 %
00000878 : fe050ce3;   % 820: 			beqz    a0, loopReadCharKDMMIO  	# testa se uma tecla foi pressionada %
00000879 : 0042a503;   % 821:    			lw 	a0, 4(t0)			# le o ascii da tecla pressionada %
0000087a : 0800006f;   % 822: 			j fimreadChar				# fim Read Char %
0000087b : ff2002b7;   % 829: readCharDE2:  	li      t0, 0xFF200100 			# Endereco buffer0 %
0000087c : 10028293;   % 829:  %
0000087d : 0002a303;   % 830:     		lw     	t1, 0(t0)				# conteudo inicial do buffer %
0000087e : 0002a383;   % 832: loopReadChar:  	lw     	t2, 0(t0)   				# le buffer teclado %
0000087f : 00639663;   % 833: 		bne     t2, t1, buffermodificadoChar    	# testa se o buffer foi modificado %
00000880 : 00700333;   % 835: atualizaBufferChar:  mv t1, t2			# atualiza o buffer com o novo valor %
00000881 : ff5ff06f;   % 836:     		j       loopReadChar		# loop de principal de leitura  %
00000882 : 0ff00f13;   % 838: buffermodificadoChar:	li t5, 0xFF %
00000883 : 008f1f13;   % 839: 	slli 	t5, t5, 8			# t5 = 0x0000FF00 %
00000884 : 01e3fe33;   % 840: 	and    	t3, t2, t5 			# mascara o 2o scancode %
00000885 : 0000f237;   % 841: 	li 	tp, 0x0000F000 %
00000886 : 00020213;   % 841:  %
00000887 : 024e0063;   % 842: 	beq     t3, tp, teclasoltaChar		# eh 0xF0 no 2o scancode? tecla foi solta %
00000888 : 0ff00213;   % 843: 	li	tp, 0x000000FF %
00000889 : 0043fe33;   % 844: 	and	t3, t2, tp			# mascara 1o scancode	(essa podemos fazer diretamente) %
0000088a : 01200213;   % 845: 	li	tp, 0x00000012 %
0000088b : fc4e1ae3;   % 846:     	bne 	t3, tp, atualizaBufferChar	# nao eh o SHIFT que esta pressionado ? volta a ler  %
0000088c : 0fc13417;   % 847: 	la      s0, LabelScanCodeShift		# se for SHIFT que esta pressionado atualiza o endereco da tabel %
0000088d : d4e40413;   % 847:  %
0000088e : fc9ff06f;   % 848:     	j       atualizaBufferChar		# volta a ler %
0000088f : 0ff3fe13;   % 850: teclasoltaChar:		andi t3, t2, 0x00FF		# mascara o 1o scancode %
00000890 : 08000213;   % 851: 	li	tp, 0x00000080 %
00000891 : fbc24ee3;   % 852:   	bgt	t3, tp, atualizaBufferChar		# se o scancode for > 0x80 entao nao eh imprimivel! %
00000892 : 01200213;   % 853:   	li	tp, 0x00000012 %
00000893 : 004e1863;   % 854: 	bne 	t3, tp, naoehshiftChar			# nao foi o shift que foi solto? entao processa %
00000894 : 0fc13417;   % 855: 	la 	s0, LabelScanCode			# shift foi solto atualiza o endereco da tabela %
00000895 : ca840413;   % 855:  %
00000896 : fa9ff06f;   % 856: 	j 	atualizaBufferChar			# volta a ler %
00000897 : 01c40e33;   % 858: naoehshiftChar:	   	add     t3, s0, t3              # endereco na tabela de scancode da tecla com ou sem shift %
00000898 : 000e0503;   % 859:     	lb      a0, 0(t3)				# le o ascii do caracter para a0 %
00000899 : f8050ee3;   % 860:     	beq     a0, zero, atualizaBufferChar		# se for caractere nao imprimivel volta a ler %
0000089a : 00008067;   % 862: fimreadChar: 	ret			# retorna %
0000089b : ff810113;   % 874: readString: 	addi 	sp, sp, -8			# reserva espaco na pilha %
0000089c : 00812223;   % 875: 		sw 	s0, 4(sp)			# salva s0 %
0000089d : 00112023;   % 876: 		sw 	ra, 0(sp)			# salva ra %
0000089e : 00000693;   % 877: 		li 	a3, 0				# zera o contador de caracteres digitados %
0000089f : 00a00933;   % 878: 		mv 	s2, a0				# salva o endereco inicial %
000008a0 : 0fc13417;   % 879:     		la      s0, LabelScanCode      		# Endereco da tabela de scancode inicial para readChar %
000008a1 : c7840413;   % 879:  %
000008a2 : 04d58c63;   % 881: loopreadString: beq 	a1, a3, fimreadString   	# buffer cheio fim %
000008a3 : ff810113;   % 883: 		addi 	sp, sp, -8 %
000008a4 : 00112023;   % 884: 		sw 	ra, 0(sp)			# salva ra %
000008a5 : 00a12223;   % 885: 		sw 	a0, 4(sp)			# salva a0 pois ele sera reescrito em readChar %
000008a6 : f35ff0ef;   % 886: 		jal 	readChar			# le um caracter do teclado (retorno em a0) %
000008a7 : 00a00fb3;   % 887: 		mv 	t6, a0				# t6 eh a letra lida em readChar %
000008a8 : 00012083;   % 888: 		lw 	ra, 0(sp) %
000008a9 : 00412503;   % 889: 		lw 	a0, 4(sp) %
000008aa : 00810113;   % 890: 		addi 	sp, sp, 8 %
000008ab : 00800213;   % 892: 		li 	tp, 0x08			 %
000008ac : 004f9c63;   % 893: 		bne	t6, tp, PulaBackSpace		# Se nao for BACKSPACE %
000008ad : fcd00ae3;   % 894: 		beq	zero, a3, loopreadString	# Se n�o tem nenhum caractere no buffer apenas volta a ler %
000008ae : fff68693;   % 895: 		addi	a3, a3, -1			# diminui contador %
000008af : fff50513;   % 896: 		addi 	a0, a0, -1			# diminui endereco do buffer %
000008b0 : 00050023;   % 897: 		sb 	zero, 0(a0)			# coloca zero no caractere anterior %
000008b1 : fc5ff06f;   % 898: 		j loopreadString %
000008b2 : 00a00213;   % 900: PulaBackSpace:	li	tp, 0x0A %
000008b3 : 004f8a63;   % 901: 		beq 	t6, tp, fimreadString		# se for tecla ENTER fim %
000008b4 : 01f50023;   % 902: 		sb 	t6, 0(a0)			# grava no buffer %
000008b5 : 00168693;   % 903: 		addi 	a3, a3, 1			# incrementa contador %
000008b6 : 00150513;   % 904: 		addi 	a0, a0, 1			# incrementa endereco no buffer %
000008b7 : fadff06f;   % 905: 		j loopreadString			# volta a ler outro caractere %
000008b8 : 00050023;   % 907: fimreadString: 	sb 	zero, 0(a0)			# grava NULL no buffer %
000008b9 : fff50613;   % 908: 		addi 	a2, a0, -1			# Para que a2 tenha o endereco do ultimo caractere digitado %
000008ba : 01200533;   % 909: 		mv	a0, s2				# a0 volta a ter o endereco inicial da string %
000008bb : 00012083;   % 910: 		lw 	ra, 0(sp)			# recupera ra %
000008bc : 00412403;   % 911: 		lw	s0, 4(sp)			# recupera s0 %
000008bd : 00810113;   % 912: 		addi 	sp, sp, 8			# libera espaco %
000008be : 00008067;   % 913: 		ret					# retorna %
000008bf : ffc10113;   % 922: readInt: 	addi 	sp,sp,-4		# reserva espaco na pilha %
000008c0 : 00112023;   % 923: 	sw 	ra, 0(sp)			# salva ra %
000008c1 : 0fc13517;   % 924: 	la 	a0, TempBuffer			# Endereco do buffer de string %
000008c2 : d0050513;   % 924:  %
000008c3 : 00a00593;   % 925: 	li 	a1, 10				# numero maximo de digitos %
000008c4 : f5dff0ef;   % 926: 	jal 	readString			# le uma string de ate 10 digitos, a3 numero de digitos %
000008c5 : 00c002b3;   % 927: 	mv 	t0, a2				# copia endereco do ultimo digito %
000008c6 : 00a00393;   % 928: 	li 	t2, 10				# dez %
000008c7 : 00100e13;   % 929: 	li 	t3, 1				# dezenas, centenas, etc %
000008c8 : 00000533;   % 930: 	mv 	a0, zero			# zera o numero %
000008c9 : 0c068e63;   % 932: loopReadInt: 	beq	a3,zero, fimReadInt	# Leu todos os digitos %
000008ca : 00028303;   % 933: 	lb 	t1, (t0)			# le um digito %
000008cb : 02d00213;   % 934: 	li	tp, 0x0000002D %
000008cc : 0c430663;   % 935: 	beq 	t1, tp, ehnegReadInt		# = '-' %
000008cd : 02b00213;   % 936: 	li	tp, 0x0000002B %
000008ce : 0c430463;   % 937: 	beq 	t1, tp, ehposReadInt		# = '+' %
000008cf : 03000213;   % 938: 	li	tp, 0x00000030 %
000008d0 : 0a434c63;   % 939: 	blt 	t1, tp, naoehReadInt		# <'0' %
000008d1 : 03900213;   % 940: 	li	tp, 0x00000039 %
000008d2 : 0a624863;   % 941: 	bgt 	t1, tp, naoehReadInt		# >'9' %
000008d3 : fd030313;   % 942: 	addi 	t1, t1, -48			# transforma ascii em numero %
000008d4 : 30102c73;   % 943: <29> csrr s8, misa %
000008d5 : 00cc5c13;   % 943: <30> srli s8, s8, 12 %
000008d6 : 001c7c13;   % 943: <31> andi s8, s8, 0x001 %
000008d7 : 020c1e63;   % 943: <32> bnez s8, readInt.mul1 %
000008d8 : ff410113;   % 944: <45> addi 	sp, sp, -12 %
000008d9 : 00a12023;   % 944: <46> sw	a0, 0(sp) %
000008da : 00b12223;   % 944: <47> sw	a1, 4(sp) %
000008db : 00112423;   % 944: <48> sw	ra, 8(sp) %
000008dc : 00600533;   % 944: <50> mv 	a0, t1 %
000008dd : 01c005b3;   % 944: <51> mv 	a1, t3 %
000008de : 275000ef;   % 944: <52> jal 	__mulsi3 %
000008df : 04051073;   % 944: <53> csrw	a0,uscratch %
000008e0 : 00012503;   % 944: <55> lw	a0, 0(sp) %
000008e1 : 00412583;   % 944: <56> lw	a1, 4(sp) %
000008e2 : 00812083;   % 944: <57> lw	ra, 8(sp) %
000008e3 : 00c10113;   % 944: <58> addi 	sp, sp, 12 %
000008e4 : 04002373;   % 944: <59> csrr	t1,uscratch %
000008e5 : 0080006f;   % 945: 	j readInt.mul1d %
000008e6 : 03c30333;   % 946: readInt.mul1: 	mul 	t1, t1, t3			# multiplica por dezenas/centenas %
000008e7 : 00650533;   % 947: readInt.mul1d:	add 	a0, a0, t1			# soma no numero %
000008e8 : 30102c73;   % 948: <29> csrr s8, misa %
000008e9 : 00cc5c13;   % 948: <30> srli s8, s8, 12 %
000008ea : 001c7c13;   % 948: <31> andi s8, s8, 0x001 %
000008eb : 020c1e63;   % 948: <32> bnez s8, readInt.mul2 %
000008ec : ff410113;   % 949: <45> addi 	sp, sp, -12 %
000008ed : 00a12023;   % 949: <46> sw	a0, 0(sp) %
000008ee : 00b12223;   % 949: <47> sw	a1, 4(sp) %
000008ef : 00112423;   % 949: <48> sw	ra, 8(sp) %
000008f0 : 01c00533;   % 949: <50> mv 	a0, t3 %
000008f1 : 007005b3;   % 949: <51> mv 	a1, t2 %
000008f2 : 225000ef;   % 949: <52> jal 	__mulsi3 %
000008f3 : 04051073;   % 949: <53> csrw	a0,uscratch %
000008f4 : 00012503;   % 949: <55> lw	a0, 0(sp) %
000008f5 : 00412583;   % 949: <56> lw	a1, 4(sp) %
000008f6 : 00812083;   % 949: <57> lw	ra, 8(sp) %
000008f7 : 00c10113;   % 949: <58> addi 	sp, sp, 12 %
000008f8 : 04002e73;   % 949: <59> csrr	t3,uscratch %
000008f9 : 0080006f;   % 950: 	j readInt.mul2d %
000008fa : 027e0e33;   % 951: readInt.mul2: 	mul 	t3, t3, t2			# proxima dezena/centena %
000008fb : fff28293;   % 952: readInt.mul2d:	addi 	t0, t0, -1			# busca o digito anterior %
000008fc : fff68693;   % 953: 	addi	a3, a3, -1			# reduz o contador de digitos  %
000008fd : f31ff06f;   % 954: 	j 	loopReadInt			# volta para buscar proximo digito %
000008fe : 0080006f;   % 957: 		j fimReadInt			# como nao esta implmentado apenas retorna %
000008ff : 40a00533;   % 959: ehnegReadInt:	sub a0,zero,a0			# se for negativo %
00000900 : 00012083;   % 963: fimReadInt:	lw 	ra, 0(sp)		# recupera ra %
00000901 : 00410113;   % 964: 		addi 	sp, sp, 4		# libera espaco %
00000902 : 00008067;   % 965: 		ret				# fim ReadInt %
00000903 : 10008c37;   % 985: <9> li s8, 0x10008000	# carrega tp %
00000904 : 000c0c13;   % 985:  %
00000905 : 01819863;   % 985: <10> bne gp, s8, midiOutDE2	# Na DE1 gp = 0 ! N�o tem segmento .extern %
00000906 : 01f00893;   % 987: 	li a7,31		# Chama o ecall normal %
00000907 : 00000073;   % 988: 	ecall %
00000908 : 0600006f;   % 989: 	j fimmidiOut %
00000909 : ff2002b7;   % 991: midiOutDE2:	li      t0, 0xFF200178 %
0000090a : 17828293;   % 991:  %
0000090b : 00000333;   % 992:     		add     t1, zero, zero %
0000090c : 00f67393;   % 997:    	 	andi    t2, a2, 0x0000000F %
0000090d : 01b39393;   % 998:     		slli    t2, t2, 27 %
0000090e : 00736333;   % 999:     		or      t1, t1, t2 %
0000090f : 07f6f393;   % 1002:     		andi    t2, a3, 0x0000007F %
00000910 : 01439393;   % 1003:     		slli    t2, t2, 20 %
00000911 : 00736333;   % 1004:     		or      t1, t1, t2 %
00000912 : 07f57393;   % 1007:     		andi    t2, a0, 0x0000007F %
00000913 : 00d39393;   % 1008:     		slli    t2, t2, 13 %
00000914 : 00736333;   % 1009:     		or      t1, t1, t2 %
00000915 : 1ff00e93;   % 1012: 		li 	t4, 0x1FF %
00000916 : 004e9e93;   % 1013: 		slli 	t4, t4, 4 %
00000917 : 00fe8e93;   % 1014: 		addi 	t4, t4, 0x00F			# t4 = 0x00001FFF %
00000918 : 01d5f3b3;   % 1015:     		and    	t2, a1, t4 %
00000919 : 00736333;   % 1016:     		or      t1, t1, t2 %
0000091a : 0040006f;   % 1019:     		j       SintMidOut %
0000091b : 0062a023;   % 1021: SintMidOut:	sw	t1, 0(t0) %
0000091c : ff2003b7;   % 1024: 	    		li      t2, 0xFF20017C %
0000091d : 17c38393;   % 1024:  %
0000091e : 0003ae03;   % 1025: Check_AUD_DACLRCK:     	lw      t3, 0(t2) %
0000091f : fe0e0ee3;   % 1026:     			beq     t3, zero, Check_AUD_DACLRCK %
00000920 : 00008067;   % 1028: fimmidiOut:    		ret %
00000921 : 10008c37;   % 1046: <9> li s8, 0x10008000	# carrega tp %
00000922 : 000c0c13;   % 1046:  %
00000923 : 01819863;   % 1046: <10> bne gp, s8, midiOutSyncDE2	# Na DE1 gp = 0 ! N�o tem segmento .extern %
00000924 : 02100893;   % 1048: 	li a7,33		# Chama o ecall normal %
00000925 : 00000073;   % 1049: 	ecall %
00000926 : 0780006f;   % 1050: 	j fimmidiOutSync %
00000927 : ff2002b7;   % 1052: midiOutSyncDE2:	li      t0, 0xFF200178 %
00000928 : 17828293;   % 1052:  %
00000929 : 00000333;   % 1053:     		add     t1, zero, zero %
0000092a : 08000337;   % 1056:     		lui    	t1, 0x08000 %
0000092b : 00431313;   % 1057: 		slli	t1,t1,4 %
0000092c : 00f67393;   % 1060:     		andi    t2, a2, 0x00F %
0000092d : 01b39393;   % 1061:     		slli    t2, t2, 27 %
0000092e : 00736333;   % 1062:     		or      t1, t1, t2 %
0000092f : 07f6f393;   % 1065:     		andi    t2, a3, 0x07F %
00000930 : 01439393;   % 1066:     		slli    t2, t2, 20 %
00000931 : 00736333;   % 1067:     		or      t1, t1, t2 %
00000932 : 07f57393;   % 1070:     		andi    t2, a0, 0x07F %
00000933 : 00d39393;   % 1071:     		slli    t2, t2, 13 %
00000934 : 00736333;   % 1072:     		or      t1, t1, t2 %
00000935 : 1ff00e93;   % 1075: 		li 	t4, 0x1FF %
00000936 : 004e9e93;   % 1076: 		slli 	t4, t4, 4 %
00000937 : 00fe8e93;   % 1077: 		addi 	t4, t4, 0x00F			# t4 = 0x00001FFF %
00000938 : 01d5f3b3;   % 1078:     		and    	t2, a1, t4 %
00000939 : 00736333;   % 1079:     		or      t1, t1, t2 %
0000093a : 0040006f;   % 1082:     		j       SintMidOutSync %
0000093b : 0062a023;   % 1084: SintMidOutSync:	sw	t1, 0(t0) %
0000093c : ff2003b7;   % 1087:     		li      t2, 0xFF20017C %
0000093d : 17c38393;   % 1087:  %
0000093e : ff200eb7;   % 1088:     		li      t4, 0xFF200180 %
0000093f : 180e8e93;   % 1088:  %
00000940 : 0003ae03;   % 1090: Check_AUD_DACLRCKSync:	lw      t3, 0(t2) %
00000941 : fe0e0ee3;   % 1091:     			beq     t3, zero, Check_AUD_DACLRCKSync %
00000942 : 000eaf03;   % 1093: Melody:     	lw      t5, 0(t4) %
00000943 : fe0f1ee3;   % 1094:     		bne     t5, zero, Melody %
00000944 : 00008067;   % 1096: fimmidiOutSync:	ret %
00000945 : ffc10113;   % 1106: printFloat:	addi 	sp, sp, -4 %
00000946 : 00112023;   % 1107: 		sw 	ra, 0(sp)				# salva ra %
00000947 : 0fc13417;   % 1108: 		la 	s0, TempBuffer %
00000948 : ae840413;   % 1108:  %
00000949 : 02b00293;   % 1111: 		li 	t0, '+'			# define sinal '+' %
0000094a : e00504d3;   % 1112: 		fmv.x.s s1, fa0			# recupera o numero float sem conversao %
0000094b : 01f4d493;   % 1113: 		srli	s1, s1, 31		# bit 31(sinal) em bit 0, numero eh negativo s1=1 %
0000094c : 00048463;   % 1114: 		beq 	s1, zero, ehposprintFloat	# eh positivo s1=0 %
0000094d : 02d00293;   % 1115: 		li 	t0, '-'				# define sinal '-' %
0000094e : 00540023;   % 1116: ehposprintFloat: sb 	t0, 0(s0)			# coloca sinal no buffer %
0000094f : 00140413;   % 1117: 		addi 	s0, s0, 1			# incrementa o endereco do buffer %
00000950 : e00502d3;   % 1120: 		 fmv.x.s t0, fa0			# recupera o numero float sem conversao %
00000951 : 7f800337;   % 1121: 		 lui	t1, 0x7F800 %
00000952 : 0062f2b3;   % 1122: 		 and 	t0, t0, t1   			# mascara com 0111 1111 1000 0000 0000 0000... %
00000953 : 00129293;   % 1123: 		 slli 	t0, t0, 1			# tira o sinal do numero %
00000954 : 0182d293;   % 1124: 		 srli 	t0, t0, 24			# recupera o expoente %
00000955 : e0050353;   % 1127: 		fmv.x.s t1, fa0				# recupera o numero float sem conversao %
00000956 : 008003b7;   % 1128: 		li 	t2, 0x007FFFFF			# t2 = 0x007FFFFF %
00000957 : fff38393;   % 1128:  %
00000958 : 00737333;   % 1129: 		and 	t1, t1, t2			# mascara com 0000 0000 0111 1111 1111... 		  %
00000959 : 14028c63;   % 1131: 		beq 	t0, zero, ehExp0printFloat	# Expoente = 0 %
0000095a : 0ff00213;   % 1132: 		li	tp, 0x000000FF			# TP = 255 %
0000095b : 16428c63;   % 1133: 		beq 	t0, tp, ehExp255printFloat	# Expoente = 255 %
0000095c : 20a52053;   % 1137: 		fabs.s 		ft0, fa0		# ft0 recebe o modulo  de x %
0000095d : 00100213;   % 1138: 		li		tp, 1 %
0000095e : d00270d3;   % 1139: 		fcvt.s.w 	ft1, tp			# ft1 recebe o numero 1.0 %
0000095f : 00a00213;   % 1140: 		li		tp, 10 %
00000960 : d0027353;   % 1141: 		fcvt.s.w 	ft6, tp			# ft6 recebe o numero 10.0 %
00000961 : 00200213;   % 1142: 		li		tp, 2 %
00000962 : d0027e53;   % 1143: 		fcvt.s.w 	ft8, tp %
00000963 : 19c0f3d3;   % 1144: 		fdiv.s		ft7, ft1, ft8		# ft7 recebe o numero 0.5 %
00000964 : a0101ed3;   % 1146: 		flt.s 	t4, ft0, ft1		# ft0 < 1.0 ? Se sim, E deve ser negativo %
00000965 : 000e9663;   % 1147: 		bnez	t4, menor1printFloat	# se a comparacao deu true (1), pula %
00000966 : 20630153;   % 1148: 		fmv.s 	ft2, ft6		# ft2  fator de multiplicacao = 10 %
00000967 : 02c0006f;   % 1149: 		j 	cont2printFloat		# vai para expoente positivo %
00000968 : 1860f153;   % 1150: menor1printFloat: fdiv.s ft2,ft1,ft6		# ft2 fator multiplicativo = 0.1 %
00000969 : 20000253;   % 1153: cont1printFloat: 	fmv.s 	ft4, ft0			# inicia com o numero x  %
0000096a : 201081d3;   % 1154: 		 	fmv.s 	ft3, ft1			# contador comeca em 1 %
0000096b : 18227253;   % 1155: loop1printFloat: 	fdiv.s 	ft4, ft4, ft2			# divide o numero pelo fator multiplicativo %
0000096c : a0120e53;   % 1156: 		 	fle.s 	t3, ft4, ft1			# o numero eh > que 1? entao fim %
0000096d : 000e0663;   % 1157: 		 	beq 	t3,zero, fimloop1printFloat %
0000096e : 0011f1d3;   % 1158: 		 	fadd.s 	ft3, ft3, ft1			# incrementa o contador %
0000096f : ff1ff06f;   % 1159: 		 	j 	loop1printFloat			# volta ao loop %
00000970 : 18227253;   % 1161: fimloop1printFloat: 	fdiv.s 	ft4, ft4, ft2			# ajusta o numero %
00000971 : 0200006f;   % 1162: 		 	j 	intprintFloat			# vai para imprimir a parte inteira %
00000972 : 20000253;   % 1165: cont2printFloat:	fmv.s 	 ft4, ft0			# inicia com o numero x  %
00000973 : d00071d3;   % 1166: 		 	fcvt.s.w ft3, zero			# contador comeca em 0 %
00000974 : a0621e53;   % 1167: loop2printFloat:  	flt.s 	 t3, ft4, ft6			# resultado eh < que 10? entao fim %
00000975 : 18227253;   % 1168: 			fdiv.s 	 ft4, ft4, ft2			# divide o numero pelo fator multiplicativo %
00000976 : 000e1663;   % 1169: 			bne 	 t3, zero, intprintFloat %
00000977 : 0011f1d3;   % 1170: 		 	fadd.s 	 ft3, ft3, ft1			# incrementa o contador %
00000978 : ff1ff06f;   % 1171: 		 	j 	 loop2printFloat %
00000979 : 10227253;   % 1177: intprintFloat:		fmul.s 		ft4, ft4, ft2		# ajusta o numero %
0000097a : 08727253;   % 1178: 			fsub.s		ft4, ft4, ft7		# tira 0.5, dessa forma sempre ao converter estaremos fazendo floor %
0000097b : c00272d3;   % 1179: 		  	fcvt.w.s	t0, ft4			# coloca floor de ft4 em t0 %
0000097c : 00727253;   % 1180: 			fadd.s		ft4, ft4, ft7		# readiciona 0.5 %
0000097d : 00029463;   % 1181: 			bnez		t0, pulaeh1print	# para corrigir multiplos inteiros de 10! %
0000097e : 00100293;   % 1182: 			li 		t0, 1 %
0000097f : 03028293;   % 1183: pulaeh1print:		addi 		t0, t0, 48		# converte para ascii			 %
00000980 : 00540023;   % 1184: 			sb 		t0, 0(s0)		# coloca no buffer %
00000981 : 00140413;   % 1185: 		  	addi 		s0, s0, 1		# incrementta o buffer %
00000982 : 02e00293;   % 1188: 		  	li 	t0, '.'				# carrega o '.' %
00000983 : 00540023;   % 1189: 		  	sb 	t0, 0(s0)			# coloca no buffer %
00000984 : 00140413;   % 1190: 		  	addi 	s0, s0, 1			# incrementa o buffer %
00000985 : 00800313;   % 1193: 		  	li 		t1, 8				# contador de digitos  -  8 casas decimais %
00000986 : 04030a63;   % 1194: loopfracprintFloat:  	beq 		t1, zero, fimfracprintFloat	# fim dos digitos? %
00000987 : 08727253;   % 1195: 			fsub.s		ft4, ft4, ft7			# tira 0.5 %
00000988 : c0027f53;   % 1196: 			fcvt.w.s 	t5, ft4				# floor de ft4 %
00000989 : 00727253;   % 1197: 			fadd.s		ft4, ft4, ft7			# readiciona 0.5 %
0000098a : d00f72d3;   % 1198: 			fcvt.s.w	ft5, t5				# reconverte em float so com a parte inteira %
0000098b : 085272d3;   % 1199: 		  	fsub.s 		ft5, ft4, ft5			# parte fracionaria %
0000098c : 1062f2d3;   % 1200: 		  	fmul.s 		ft5, ft5, ft6			# mult x 10 %
0000098d : 0872f2d3;   % 1201: 			fsub.s		ft5, ft5, ft7			# tira 0.5 %
0000098e : c002f2d3;   % 1202: 			fcvt.w.s	t0, ft5				# coloca floor de ft5 em 10 %
0000098f : 03028293;   % 1203: 		  	addi 		t0, t0, 48			# converte para ascii %
00000990 : 03000213;   % 1205: 			li 		tp, 48 %
00000991 : 0042c663;   % 1206: 			blt		t0, tp, pulaprtFloat1	# testa se eh menor que '0' %
00000992 : 03900213;   % 1207: 			li		tp, 57 %
00000993 : 00525463;   % 1208: 			ble		t0, tp, pulaprtFloat2	# testa se eh menor ou igual que '9' %
00000994 : 03000293;   % 1209: pulaprtFloat1:		li		t0, 48			# define como '0'		  			  	 %
00000995 : 00540023;   % 1211: pulaprtFloat2:	  	sb 		t0, 0(s0)			# coloca no buffer %
00000996 : 00140413;   % 1212: 		  	addi 		s0, s0, 1			# incrementa endereco %
00000997 : fff30313;   % 1213: 		  	addi 		t1, t1, -1			# decrementa contador %
00000998 : 0072f2d3;   % 1214: 			fadd.s		ft5, ft5, ft7			# reincrementa 0.5 %
00000999 : 20528253;   % 1215: 		  	fmv.s 		ft4, ft5			# coloca o numero em ft4 %
0000099a : fb1ff06f;   % 1216: 		  	j 		loopfracprintFloat		# volta ao loop %
0000099b : 04500293;   % 1219: fimfracprintFloat: 	li 	t0,'E'			# carrega 'E' %
0000099c : 00540023;   % 1220: 			sb 	t0, 0(s0)		# coloca no buffer %
0000099d : 00140413;   % 1221: 			addi 	s0, s0, 1		# incrementa endereco %
0000099e : 02b00293;   % 1224: 		  	li 	t0, '+'				# carrega '+' %
0000099f : 000e8463;   % 1225: 		  	beqz 	t4, expposprintFloat		# nao eh negativo? %
000009a0 : 02d00293;   % 1226: 		  	li 	t0, '-'				# carrega '-' %
000009a1 : 00540023;   % 1227: expposprintFloat: 	sb 	t0, 0(s0)			# coloca no buffer %
000009a2 : 00140413;   % 1228: 		  	addi 	s0, s0, 1			#incrementa endereco %
000009a3 : 00a00313;   % 1231: 			li 	t1, 10				# carrega 10	 %
000009a4 : c001f253;   % 1232: 			fcvt.w.s  tp, ft3			# passa ft3 para t0 %
000009a5 : 026242b3;   % 1233: 			div 	t0, tp, t1			# divide por 10 (dezena) %
000009a6 : 026263b3;   % 1234: 			rem	t2, tp, t1			# t0 = quociente, t2 = resto %
000009a7 : 03028293;   % 1235: 			addi 	t0, t0, 48			# converte para ascii %
000009a8 : 00540023;   % 1236: 			sb 	t0, 0(s0)			# coloca no buffer %
000009a9 : 03038393;   % 1237: 			addi 	t2, t2, 48			# converte para ascii %
000009aa : 007400a3;   % 1238: 			sb 	t2, 1(s0)			# coloca no buffer %
000009ab : 00040123;   % 1239: 			sb 	zero, 2(s0)			# insere \NULL da string %
000009ac : 0fc13517;   % 1240: 			la 	a0, TempBuffer			# endereco do Buffer										 %
000009ad : 95450513;   % 1240:  %
000009ae : 0500006f;   % 1241: 	  		j 	fimprintFloat			# imprime a string %
000009af : 00030e63;   % 1243: ehExp0printFloat: 	beq 	t1, zero, eh0printFloat		# Verifica se eh zero %
000009b0 : 0fc13517;   % 1245: ehDesnormprintFloat: 	la 	a0, NumDesnormP			# string numero desnormalizado positivo %
000009b1 : b5750513;   % 1245:  %
000009b2 : 04048063;   % 1246: 			beq 	s1, zero, fimprintFloat		# o sinal eh 1? entao eh negativo %
000009b3 : 0fc13517;   % 1247: 		 	la 	a0, NumDesnormN			# string numero desnormalizado negativo %
000009b4 : b5450513;   % 1247:  %
000009b5 : 0340006f;   % 1248: 			j 	fimprintFloat			# imprime a string %
000009b6 : 0fc13517;   % 1250: eh0printFloat:		la 	a0, NumZero			# string do zero %
000009b7 : b5150513;   % 1250:  %
000009b8 : 0280006f;   % 1251: 			j 	fimprintFloat 	 		# imprime a string %
000009b9 : 00030863;   % 1253: ehExp255printFloat: 	beq 	t1, zero, ehInfprintFloat	# se mantissa eh zero entao eh Infinito %
000009ba : 0fc13517;   % 1255: ehNaNprintfFloat:	la 	a0, NumNaN			# string do NaN %
000009bb : b6050513;   % 1255:  %
000009bc : 0180006f;   % 1256: 			j 	fimprintFloat			# imprime string %
000009bd : 0fc13517;   % 1258: ehInfprintFloat:	la 	a0, NumInfP			# string do infinito positivo %
000009be : b4050513;   % 1258:  %
000009bf : 00048663;   % 1259: 			beq 	s1, zero, fimprintFloat		# o sinal eh 1? entao eh negativo %
000009c0 : 0fc13517;   % 1260: 			la 	a0, NumInfN			# string do infinito negativo %
000009c1 : b3e50513;   % 1260:  %
000009c2 : 941ff0ef;   % 1263: fimprintFloat:		jal 	printString			# imprime a string em a0 %
000009c3 : 00012083;   % 1264: 			lw 	ra, 0(sp)			# recupera ra %
000009c4 : 00410113;   % 1265: 			addi 	sp, sp, 4			# libera espaco %
000009c5 : 00008067;   % 1266: 			ret					# retorna %
000009c6 : ffc10113;   % 1275: readFloat: addi sp, sp, -4			# aloca espaco %
000009c7 : 00112023;   % 1276: 	sw 	ra, 0(sp)			# salva ra %
000009c8 : 0fc13517;   % 1277: 	la 	a0, TempBuffer			# endereco do FloatBuffer %
000009c9 : 8e450513;   % 1277:  %
000009ca : 02000593;   % 1278: 	li 	a1, 32				# numero maximo de caracteres %
000009cb : b41ff0ef;   % 1279: 	jal	readString			# le string, retorna a2 ultimo endereco e a3 numero de caracteres %
000009cc : 00c00433;   % 1280: 	mv 	s0, a2				# ultimo endereco da string (antes do \0) %
000009cd : 00d004b3;   % 1281: 	mv 	s1, a3				# numero de caracteres digitados %
000009ce : 0fc13b97;   % 1282: 	la	s7, TempBuffer			# Endereco do primeiro caractere %
000009cf : 8ccb8b93;   % 1282:  %
000009d0 : 017002b3;   % 1284: lePrimeiroreadFloat:	mv 	t0, s7		# Endereco de Inicio %
000009d1 : 00028303;   % 1285: 	lb 	t1, 0(t0)				# le primeiro caractere %
000009d2 : 06500213;   % 1286: 	li	tp, 'e'					# TP = 101 = 'e' %
000009d3 : 02430863;   % 1287: 	beq 	t1, tp, insere0AreadFloat		# insere '0' antes %
000009d4 : 04500213;   % 1288: 	li 	tp, 'E'					# TP = 69 = 'E' %
000009d5 : 02430463;   % 1289: 	beq 	t1, tp, insere0AreadFloat		# insere '0' antes %
000009d6 : 02e00213;   % 1290: 	li	tp, '.'					# TP = 46 = '.' %
000009d7 : 02430063;   % 1291: 	beq 	t1, tp, insere0AreadFloat		#  insere '0' antes %
000009d8 : 02b00213;   % 1292: 	li	tp, '+'					# TP = 43 = '+' %
000009d9 : 00430863;   % 1293: 	beq 	t1, tp, pulaPrimreadChar		# pula o primeiro caractere %
000009da : 02d00213;   % 1294: 	li	tp, '-'					# TP = 45 = '-' %
000009db : 00430463;   % 1295: 	beq 	t1, tp, pulaPrimreadChar %
000009dc : 03c0006f;   % 1296: 	j leUltimoreadFloat %
000009dd : 001b8b93;   % 1298: pulaPrimreadChar: addi s7,s7,1			# incrementa o endereco inicial %
000009de : fc9ff06f;   % 1299: 		  j lePrimeiroreadFloat		# volta a testar o novo primeiro caractere %
000009df : 008002b3;   % 1301: insere0AreadFloat: mv t0, s0			# endereco do ultimo caractere %
000009e0 : 00140413;   % 1302: 		   addi s0, s0, 1		# desloca o ultimo endereco para o proximo %
000009e1 : 00148493;   % 1303: 	   	   addi s1, s1, 1		# incrementa o num. caracteres %
000009e2 : 000400a3;   % 1304: 	   	   sb 	zero, 1(s0)		# \NULL do final de string %
000009e3 : 01700f33;   % 1305: 	   	   mv t5, s7			# primeiro caractere %
000009e4 : 01e28a63;   % 1306: insere0Aloop:	   beq 	t0, t5, saiinsere0AreadFloat	# chegou no inicio entao fim %
000009e5 : 00028303;   % 1307: 		   lb 	t1, 0(t0)		# le caractere %
000009e6 : 006280a3;   % 1308: 		   sb 	t1, 1(t0)		# escreve no proximo %
000009e7 : fff28293;   % 1309: 		   addi t0, t0, -1		# decrementa endereco %
000009e8 : ff1ff06f;   % 1310: 		   j insere0Aloop		# volta ao loop %
000009e9 : 03000313;   % 1311: saiinsere0AreadFloat: li t1, '0'		# ascii '0' %
000009ea : 00628023;   % 1312: 		   sb t1, 0(t0)			# escreve '0' no primeiro caractere %
000009eb : 00040303;   % 1314: leUltimoreadFloat: lb  	t1, 0(s0)			# le ultimo caractere %
000009ec : 06500213;   % 1315: 		li	tp, 'e'				# TP = 101 = 'e' %
000009ed : 00430c63;   % 1316: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
000009ee : 04500213;   % 1317: 		li 	tp, 'E'				# TP = 69 = 'E' %
000009ef : 00430863;   % 1318: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
000009f0 : 02e00213;   % 1319: 		li	tp, '.'				# TP = 46 = '.' %
000009f1 : 00430463;   % 1320: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
000009f2 : 0180006f;   % 1321: 		j 	inicioreadFloat %
000009f3 : 00140413;   % 1323: insere0PreadFloat: addi	s0, s0, 1		# desloca o ultimo endereco para o proximo %
000009f4 : 00148493;   % 1324: 	   	   addi	s1, s1, 1		# incrementa o num. caracteres %
000009f5 : 03000313;   % 1325: 		   li 	t1,'0'			# ascii '0' %
000009f6 : 00640023;   % 1326: 		   sb 	t1,0(s0)		# escreve '0' no ultimo %
000009f7 : 000400a3;   % 1327: 		   sb 	zero,1(s0)		# \null do final de string %
000009f8 : d0007553;   % 1329: inicioreadFloat:  fcvt.s.w 	fa0, zero	# fa0 Resultado inicialmente zero %
000009f9 : 00a00293;   % 1330: 		li 	t0, 10			# inteiro 10	 %
000009fa : d002f353;   % 1331: 		fcvt.s.w 	ft6, t0		# ft6 contem sempre o numero cte 10.0000 %
000009fb : 00100293;   % 1332: 		li 	t0, 1			# inteiro 1 %
000009fc : d002f0d3;   % 1333: 		fcvt.s.w 	ft1, t0		# ft1 contem sempre o numero cte 1.0000	 %
000009fd : 00140993;   % 1336: procuraEreadFloat:	addi 	s3, s0, 1			# inicialmente nao tem 'e' ou 'E' na string (fora da string) %
000009fe : 017002b3;   % 1337: 			mv 	t0, s7				# endereco inicial %
000009ff : 02828263;   % 1338: loopEreadFloat: 	beq 	t0, s0, naotemEreadFloat	# sai se nao encontrou 'e' %
00000a00 : 00028303;   % 1339: 			lb 	t1, 0(t0)			# le o caractere %
00000a01 : 06500213;   % 1340: 			li	tp, 'e'				# TP = 101 = 'e' %
00000a02 : 00430a63;   % 1341: 			beq 	t1, tp, ehEreadFloat		# tem 'e' %
00000a03 : 04500213;   % 1342: 			li 	tp, 'E'				# TP = 69 = 'E' %
00000a04 : 00430663;   % 1343: 			beq	t1, tp, ehEreadFloat		# tem 'E' %
00000a05 : 00128293;   % 1344: 			addi 	t0, t0, 1			# incrementa endereco %
00000a06 : fe5ff06f;   % 1345: 			j 	loopEreadFloat			# volta ao loop %
00000a07 : 005009b3;   % 1346: ehEreadFloat: 		mv 	s3, t0				# endereco do 'e' ou 'E' na string %
00000a08 : 01300933;   % 1350: procuraPontoreadFloat:	mv 	s2, s3				# local inicial do ponto na string (='e' se existir) ou fora da string	 %
00000a09 : 017002b3;   % 1351: 			mv 	t0, s7				# endereco inicial %
00000a0a : 00828e63;   % 1352: loopPontoreadFloat: 	beq 	t0, s0, naotemPontoreadFloat	# sai se nao encontrou '.' %
00000a0b : 00028303;   % 1353: 			lb 	t1, 0(t0)			# le o caractere %
00000a0c : 02e00213;   % 1354: 			li	tp, '.'				# TP = 46 = '.' %
00000a0d : 00430663;   % 1355: 			beq 	t1, tp, ehPontoreadFloat	# tem '.' %
00000a0e : 00128293;   % 1356: 			addi 	t0, t0, 1			# incrementa endereco %
00000a0f : fedff06f;   % 1357: 			j 	loopPontoreadFloat		# volta ao loop %
00000a10 : 00500933;   % 1358: ehPontoreadFloat: 	mv 	s2, t0				# endereco do '.' na string %
00000a11 : d0007153;   % 1362: intreadFloat:		fcvt.s.w 	ft2, zero		# zera parte inteira %
00000a12 : fff90293;   % 1363: 			addi 	t0, s2, -1			# endereco do caractere antes do ponto %
00000a13 : 201081d3;   % 1364: 			fmv.s 	ft3, ft1			# ft3 contem unidade/dezenas/centenas		 %
00000a14 : 01700f33;   % 1365: 			mv 	t5, s7				# Primeiro Endereco %
00000a15 : 03e2ca63;   % 1366: loopintreadFloat: 	blt 	t0, t5, fimintreadFloat		# sai se o endereco for < inicio da string %
00000a16 : 00028303;   % 1367: 			lb 	t1, 0(t0)			# le o caracter %
00000a17 : 03000213;   % 1368: 			li	tp, '0'				# TP = 48 = '0' %
00000a18 : 10434863;   % 1369: 			blt 	t1, tp, erroreadFloat		# nao eh caractere valido para numero %
00000a19 : 03900213;   % 1370: 			li	tp, '9'				# TP = 57 = '9' %
00000a1a : 10624463;   % 1371: 			bgt 	t1, tp, erroreadFloat		# nao eh caractere valido para numero %
00000a1b : fd030313;   % 1372: 			addi 	t1, t1, -48			# converte ascii para decimal %
00000a1c : d0037153;   % 1373: 			fcvt.s.w  ft2, t1			# digito lido em float %
00000a1d : 10317153;   % 1375: 			fmul.s 	ft2,ft2,ft3			# multiplica por un/dezena/centena %
00000a1e : 00257553;   % 1376: 			fadd.s 	fa0,fa0,ft2			# soma no resultado %
00000a1f : 1061f1d3;   % 1377: 			fmul.s 	ft3,ft3,ft6			# proxima dezena/centena %
00000a20 : fff28293;   % 1379: 			addi 	t0,t0,-1			# endereco anterior %
00000a21 : fd1ff06f;   % 1380: 			j 	loopintreadFloat		# volta ao loop %
00000a22 : d0007153;   % 1384: fracreadFloat:		fcvt.s.w 	ft2, zero		# zera parte fracionaria %
00000a23 : 00190293;   % 1385: 			addi 	t0, s2, 1			# endereco depois do ponto %
00000a24 : 1860f1d3;   % 1386: 			fdiv.s 	ft3, ft1, ft6			# ft3 inicial 0.1 %
00000a25 : 0332da63;   % 1388: loopfracreadFloat: 	bge 	t0, s3, fimfracreadFloat	# endereco eh 'e' 'E' ou >ultimo %
00000a26 : 00028303;   % 1389: 			lb 	t1, 0(t0)			# le o caracter %
00000a27 : 03000213;   % 1390: 			li	tp, '0'				# TP = 48 = '0' %
00000a28 : 0c434863;   % 1391: 			blt 	t1, tp, erroreadFloat		# nao eh valido %
00000a29 : 03900213;   % 1392: 			li	tp, '9'				# TP = 57 = '9' %
00000a2a : 0c624463;   % 1393: 			bgt 	t1, tp, erroreadFloat		# nao eh valido %
00000a2b : fd030313;   % 1394: 			addi 	t1, t1, -48			# converte ascii para decimal %
00000a2c : d0037153;   % 1395: 			fcvt.s.w 	ft2, t1			# digito lido em float		 %
00000a2d : 10317153;   % 1397: 			fmul.s 	ft2, ft2, ft3			# multiplica por ezena/centena %
00000a2e : 00257553;   % 1398: 			fadd.s 	fa0, fa0, ft2			# soma no resultado %
00000a2f : 1861f1d3;   % 1399: 			fdiv.s 	ft3, ft3, ft6			# proxima frac un/dezena/centena %
00000a30 : 00128293;   % 1401: 			addi 	t0, t0, 1			# proximo endereco %
00000a31 : fd1ff06f;   % 1402: 			j 	loopfracreadFloat		# volta ao loop		 %
00000a32 : d0007153;   % 1407: potreadFloat:		fcvt.s.w 	ft2, zero		# zera potencia %
00000a33 : 00198293;   % 1408: 			addi 	t0, s3, 1			# endereco seguinte ao 'e' %
00000a34 : 00000a13;   % 1409: 			li 	s4, 0				# sinal do expoente positivo %
00000a35 : 00028303;   % 1410: 			lb 	t1, 0(t0)			# le o caractere seguinte ao 'e' %
00000a36 : 02d00213;   % 1411: 			li	tp, '-'				# TP = 45 = '-' %
00000a37 : 00430863;   % 1412: 			beq	t1, tp, potsinalnegreadFloat	# sinal do expoente esta escrito e eh positivo %
00000a38 : 02b00213;   % 1413: 			li	tp, '+'				# TP = 43 = '+' %
00000a39 : 00430663;   % 1414: 			beq 	t1, tp, potsinalposreadFloat	# sinal do expoente eh negativo %
00000a3a : 00c0006f;   % 1415: 			j 	pulapotsinalreadFloat		# nao esta escrito o sinal do expoente %
00000a3b : 00100a13;   % 1416: potsinalnegreadFloat:	li 	s4, 1				# s4=1 expoente negativo %
00000a3c : 00128293;   % 1417: potsinalposreadFloat:	addi 	t0, t0, 1			# se tiver '-' ou '+' avanca para o proximo endereco %
00000a3d : 00500ab3;   % 1418: pulapotsinalreadFloat:	mv 	s5, t0 				# Neste ponto s5 contem o endereco do primeiro digito da pot e s4 o sinal do expoente		 %
00000a3e : 201081d3;   % 1420: 			fmv.s 	ft3, ft1			# ft3 un/dez/cen = 1 %
00000a3f : 00000393;   % 1423: expreadFloat:		li 	t2, 0				# zera expoente %
00000a40 : 008002b3;   % 1424: 			mv 	t0, s0				# endereco do ultimo caractere da string %
00000a41 : 00a00e13;   % 1425: 			li 	t3, 10				# numero dez %
00000a42 : 00100e93;   % 1426: 			li 	t4, 1				# und/dez/cent %
00000a43 : 0352c063;   % 1428: loopexpreadFloat:	blt 	t0, s5, fimexpreadFloat		# ainda nao eh o endereco do primeiro digito? %
00000a44 : 00028303;   % 1429: 			lb 	t1, 0(t0)			# le o caracter %
00000a45 : fd030313;   % 1430: 			addi 	t1, t1, -48			# converte ascii para decimal %
00000a46 : 03d30333;   % 1431: 			mul 	t1, t1, t4			# mul digito %
00000a47 : 006383b3;   % 1432: 			add 	t2, t2, t1			# soma ao exp %
00000a48 : 03ce8eb3;   % 1433: 			mul 	t4, t4, t3			# proxima casa decimal %
00000a49 : fff28293;   % 1434: 			addi 	t0, t0, -1			# endereco anterior %
00000a4a : fe5ff06f;   % 1435: 			j loopexpreadFloat			# volta ao loop %
00000a4b : 20108153;   % 1439: 			fmv.s 	ft2, ft1			# numero 10^exp  inicial=1 %
00000a4c : 206301d3;   % 1440: 			fmv.s 	ft3, ft6			# se o sinal for + ft3 eh 10 %
00000a4d : 00000213;   % 1441: 			li	tp, 0x00000000			# TP = ZERO %
00000a4e : 004a0463;   % 1442: 			beq 	s4, tp, sinalexpPosreadFloat	# se sinal exp positivo %
00000a4f : 1860f1d3;   % 1443: 			fdiv.s 	ft3, ft1, ft6			# se o final for - ft3 eh 0.1 %
00000a50 : 00000293;   % 1444: sinalexpPosreadFloat:	li 	t0, 0				# contador  %
00000a51 : 00728863;   % 1445: sinalexpreadFloat: 	beq 	t0, t2, fimsinalexpreadFloat	# se chegou ao fim %
00000a52 : 10317153;   % 1446: 			fmul.s 	ft2, ft2, ft3			# multiplica pelo fator 10 ou 0.1 %
00000a53 : 00128293;   % 1447: 			addi 	t0, t0, 1			# incrementa o contador %
00000a54 : ff5ff06f;   % 1448: 			j 	sinalexpreadFloat %
00000a55 : 10257553;   % 1451: 		fmul.s 	fa0, fa0, ft2		# multiplicacao final! %
00000a56 : 0fc12297;   % 1453: 		la 	t0, TempBuffer		# ajuste final do sinal do numero %
00000a57 : 6ac28293;   % 1453:  %
00000a58 : 00028303;   % 1454: 		lb 	t1, 0(t0)		# le primeiro caractere %
00000a59 : 02d00213;   % 1455: 		li	tp, '-'			# TP = 45 = '-' %
00000a5a : 00431463;   % 1456: 		bne 	t1, tp, fimreadFloat	# nao eh '-' entao fim %
00000a5b : 20a51553;   % 1457: 		fneg.s 	fa0, fa0		# nega o numero float %
00000a5c : 00012083;   % 1460: fimreadFloat: 	lw 	ra, 0(sp)		# recupera ra %
00000a5d : 00410113;   % 1461: 		addi 	sp, sp, 4		# libera espaco %
00000a5e : 00008067;   % 1462: 		ret				# retorna %
00000a5f : 10008c37;   % 1470: <9> li s8, 0x10008000	# carrega tp %
00000a60 : 000c0c13;   % 1470:  %
00000a61 : 01819863;   % 1470: <10> bne gp, s8, Time.DE1	# Na DE1 gp = 0 ! N�o tem segmento .extern %
00000a62 : 01e00893;   % 1471: 	li 	a7, 30				# Chama o ecall do Rars %
00000a63 : 00000073;   % 1472: 	ecall %
00000a64 : 00008067;   % 1473: 	ret					# saida %
00000a65 : c0102573;   % 1475: Time.DE1:	csrr a0, time			#  Le time LOW %
00000a66 : c81025f3;   % 1476: 		csrr a1, timeh 			#  Le time HIGH %
00000a67 : 00008067;   % 1477: 		ret %
00000a68 : 10008c37;   % 1490: <9> li s8, 0x10008000	# carrega tp %
00000a69 : 000c0c13;   % 1490:  %
00000a6a : 01819863;   % 1490: <10> bne gp, s8, Sleep.DE1	# Na DE1 gp = 0 ! N�o tem segmento .extern %
00000a6b : 02000893;   % 1491: 	li 	a7, 32				# Chama o ecall do Rars %
00000a6c : 00000073;   % 1492: 	ecall %
00000a6d : 00008067;   % 1493: 	ret					#Saida %
00000a6e : c01022f3;   % 1495: Sleep.DE1:	csrr 	t0, time		# Le o tempo do sistema %
00000a6f : 00a28333;   % 1496: 		add 	t1, t0, a0		# soma com o tempo solicitado %
00000a70 : c01022f3;   % 1497: Sleep.Loop:	csrr	t0, time		# Le o tempo do sistema %
00000a71 : fe62cee3;   % 1498: 		blt	t0, t1, Sleep.Loop	# t0<t1 ? %
00000a72 : 00008067;   % 1499: 		ret %
00000a73 : 10008c37;   % 1517: <9> li s8, 0x10008000	# carrega tp %
00000a74 : 000c0c13;   % 1517:  %
00000a75 : 01819863;   % 1517: <10> bne gp, s8, Random.DE1	# Na DE1 gp = 0 ! N�o tem segmento .extern %
00000a76 : 02900893;   % 1518: 	li 	a7,41			# Chama o ecall do Rars %
00000a77 : 00000073;   % 1519: 	ecall	 %
00000a78 : 00008067;   % 1520: 	ret				# saida %
00000a79 : ff2002b7;   % 1522: Random.DE1: 	li 	t0, 0xFF200514	# carrega endereco do LFSR %
00000a7a : 51428293;   % 1522:  %
00000a7b : 0002a503;   % 1523: 		lw 	a0, 0(t0)	# le a word em a0 %
00000a7c : 00008067;   % 1524: 		ret			# retorna %
00000a7d : 00058c63;   % 1534: clsCLS:	beq 	a1, zero, CLS.frame0 %
00000a7e : ff100337;   % 1535: 	li      t1, 0xFF100000              # Memoria VGA 1 %
00000a7f : 00030313;   % 1535:  %
00000a80 : ff1133b7;   % 1536:    	li      t2, 0xFF112C00 %
00000a81 : c0038393;   % 1536:  %
00000a82 : 0140006f;   % 1537:    	j 	CLS.pula %
00000a83 : ff000337;   % 1538: CLS.frame0: 	li      t1, 0xFF000000           # Memoria VGA 0 %
00000a84 : 00030313;   % 1538:  %
00000a85 : ff0133b7;   % 1539:    	    	li      t2, 0xFF012C00   	 %
00000a86 : c0038393;   % 1539:  %
00000a87 : 0ff57513;   % 1540: CLS.pula:	andi    a0, a0, 0x00FF %
00000a88 : 00a002b3;   % 1543:  		mv 	t0, a0 %
00000a89 : 00851513;   % 1544:  		slli 	a0, a0, 8 %
00000a8a : 00a2e2b3;   % 1545:  		or 	t0, t0, a0 %
00000a8b : 00851513;   % 1546:  		slli 	a0, a0, 8 %
00000a8c : 00a2e2b3;   % 1547:  		or 	t0, t0, a0 %
00000a8d : 00851513;   % 1548:  		slli 	a0, a0, 8 %
00000a8e : 00a2e2b3;   % 1549:  		or 	t0, t0, a0 %
00000a8f : 00730863;   % 1551: CLS.for:	beq     t1, t2, CLS.fim %
00000a90 : 00532023;   % 1552: 		sw      t0, 0(t1) %
00000a91 : 00430313;   % 1553:     		addi    t1, t1, 4 %
00000a92 : ff5ff06f;   % 1554:     		j       CLS.for %
00000a93 : 00008067;   % 1555: CLS.fim:	ret %
00000a94 : ff000837;   % 1564: BRESENHAM: 	li	a6, 0xFF000000           	# Memoria VGA 0 %
00000a95 : 00080813;   % 1564:  %
00000a96 : 00078663;   % 1565: 	   	beq	a5, zero, pulaBRES %
00000a97 : ff100837;   % 1566: 	   	li 	a6, 0xFF100000              # Memoria VGA 1 %
00000a98 : 00080813;   % 1566:  %
00000a99 : 14000893;   % 1568: pulaBRES: 	li 	a7, 320 %
00000a9a : 40b682b3;   % 1569: 	  	sub 	t0, a3, a1 %
00000a9b : 0002d463;   % 1570: 	  	bge 	t0, zero, PULAABRES %
00000a9c : 405002b3;   % 1571: 	  	sub 	t0, zero, t0 %
00000a9d : 40a60333;   % 1572: PULAABRES:	sub 	t1, a2, a0 %
00000a9e : 00035463;   % 1573: 	   	bge  	t1, zero, PULABBRES %
00000a9f : 40600333;   % 1574: 	   	sub  	t1, zero, t1	 %
00000aa0 : 0262d263;   % 1575: PULABBRES: 	bge  	t0, t1, PULACBRES %
00000aa1 : 00a65e63;   % 1576: 	   	ble  	a0, a2, PULAC1BRES %
00000aa2 : 00a007b3;   % 1577: 	   	mv 	a5, a0 %
00000aa3 : 00c00533;   % 1578: 	   	mv 	a0, a2 %
00000aa4 : 00f00633;   % 1579: 	   	mv 	a2, a5 %
00000aa5 : 00b007b3;   % 1580: 	   	mv	a5, a1 %
00000aa6 : 00d005b3;   % 1581: 	   	mv 	a1, a3 %
00000aa7 : 00f006b3;   % 1582: 	   	mv 	a3, a5 %
00000aa8 : 0240006f;   % 1583: PULAC1BRES:	j PLOTLOWBRES %
00000aa9 : 00b6de63;   % 1585: PULACBRES: 	ble  	a1, a3, PULAC2BRES %
00000aaa : 00a007b3;   % 1586: 	   	mv 	a5, a0 %
00000aab : 00c00533;   % 1587: 	   	mv 	a0, a2 %
00000aac : 00f00633;   % 1588: 	   	mv 	a2, a5 %
00000aad : 00b007b3;   % 1589: 	   	mv 	a5, a1 %
00000aae : 00d005b3;   % 1590: 	   	mv 	a1, a3 %
00000aaf : 00f006b3;   % 1591: 	   	mv 	a3, a5 %
00000ab0 : 0a80006f;   % 1592: PULAC2BRES:	j PLOTHIGHBRES %
00000ab1 : 40a602b3;   % 1594: PLOTLOWBRES:	sub 	t0, a2, a0		# dx=x1-x0 %
00000ab2 : 40b68333;   % 1595: 	 	sub 	t1, a3, a1		# dy y1-y0 %
00000ab3 : 00100393;   % 1596: 	 	li  	t2, 1			# yi=1 %
00000ab4 : 00035663;   % 1597: 	 	bge 	t1, zero, PULA1BRES	# dy>=0 PULA %
00000ab5 : fff00393;   % 1598: 	 	li  	t2, -1			# yi=-1 %
00000ab6 : 40600333;   % 1599: 	 	sub 	t1, zero, t1		# dy=-dy %
00000ab7 : 00131e13;   % 1600: PULA1BRES:	slli 	t3, t1, 1		# 2*dy %
00000ab8 : 405e0e33;   % 1601: 		sub 	t3, t3, t0		# D=2*dy-dx %
00000ab9 : 00b00eb3;   % 1602: 		mv 	t4, a1			# y=y0 %
00000aba : 00a00f33;   % 1603: 		mv 	t5, a0			# x=x0 %
00000abb : 30102c73;   % 1605: <29> csrr s8, misa %
00000abc : 00cc5c13;   % 1605: <30> srli s8, s8, 12 %
00000abd : 001c7c13;   % 1605: <31> andi s8, s8, 0x001 %
00000abe : 020c1e63;   % 1605: <32> bnez s8, BRESENHAM.mul1 %
00000abf : ff410113;   % 1606: <45> addi 	sp, sp, -12 %
00000ac0 : 00a12023;   % 1606: <46> sw	a0, 0(sp) %
00000ac1 : 00b12223;   % 1606: <47> sw	a1, 4(sp) %
00000ac2 : 00112423;   % 1606: <48> sw	ra, 8(sp) %
00000ac3 : 01d00533;   % 1606: <50> mv 	a0, t4 %
00000ac4 : 011005b3;   % 1606: <51> mv 	a1, a7 %
00000ac5 : 2d8000ef;   % 1606: <52> jal 	__mulsi3 %
00000ac6 : 04051073;   % 1606: <53> csrw	a0,uscratch %
00000ac7 : 00012503;   % 1606: <55> lw	a0, 0(sp) %
00000ac8 : 00412583;   % 1606: <56> lw	a1, 4(sp) %
00000ac9 : 00812083;   % 1606: <57> lw	ra, 8(sp) %
00000aca : 00c10113;   % 1606: <58> addi 	sp, sp, 12 %
00000acb : 04002ff3;   % 1606: <59> csrr	t6,uscratch %
00000acc : 0080006f;   % 1607: 		j BRESENHAM.mul1d %
00000acd : 031e8fb3;   % 1608: BRESENHAM.mul1:	mul 	t6, t4, a7		# y*320 %
00000ace : 01ef8fb3;   % 1609: BRESENHAM.mul1d:add 	t6, t6, t5		# y*320+x %
00000acf : 010f8fb3;   % 1610: 		add 	t6, t6, a6		# 0xFF000000+y*320+x %
00000ad0 : 00ef8023;   % 1611: 		sb 	a4, 0(t6)		# plot com cor a4 %
00000ad1 : 01c05863;   % 1613: 		ble 	t3, zero, PULA2BRES	# D<=0 %
00000ad2 : 007e8eb3;   % 1614: 		add 	t4, t4, t2		# y=y+yi %
00000ad3 : 00129f93;   % 1615: 		slli 	t6, t0, 1		# 2*dx %
00000ad4 : 41fe0e33;   % 1616: 		sub 	t3, t3, t6		# D=D-2dx %
00000ad5 : 00131f93;   % 1617: PULA2BRES:	slli 	t6, t1, 1		# 2*dy %
00000ad6 : 01fe0e33;   % 1618: 		add 	t3, t3, t6		# D=D+2dx %
00000ad7 : 001f0f13;   % 1619: 		addi	t5, t5, 1 %
00000ad8 : f8cf16e3;   % 1620: 		bne 	t5, a2, LOOPx1BRES %
00000ad9 : 00008067;   % 1621: 		ret %
00000ada : 40a602b3;   % 1623: PLOTHIGHBRES: 	sub 	t0, a2, a0		# dx=x1-x0 %
00000adb : 40b68333;   % 1624: 	 	sub 	t1, a3, a1		# dy y1-y0 %
00000adc : 00100393;   % 1625: 	 	li 	t2, 1			# xi=1 %
00000add : 0002d663;   % 1626: 	 	bge 	t0, zero, PULA3BRES	# dy>=0 PULA %
00000ade : fff00393;   % 1627: 	 	li 	t2, -1			# xi=-1 %
00000adf : 405002b3;   % 1628: 	 	sub 	t0, zero, t0		# dx=-dx %
00000ae0 : 00129e13;   % 1629: PULA3BRES:	slli 	t3, t0, 1		# 2*dx %
00000ae1 : 406e0e33;   % 1630: 		sub 	t3, t3, t1		# D=2*dx-d1 %
00000ae2 : 00a00eb3;   % 1631: 		mv 	t4, a0			# x=x0 %
00000ae3 : 00b00f33;   % 1632: 		mv 	t5, a1			# y=y0 %
00000ae4 : 30102c73;   % 1634: <29> csrr s8, misa %
00000ae5 : 00cc5c13;   % 1634: <30> srli s8, s8, 12 %
00000ae6 : 001c7c13;   % 1634: <31> andi s8, s8, 0x001 %
00000ae7 : 020c1e63;   % 1634: <32> bnez s8, BRESENHAM.mul2 %
00000ae8 : ff410113;   % 1635: <45> addi 	sp, sp, -12 %
00000ae9 : 00a12023;   % 1635: <46> sw	a0, 0(sp) %
00000aea : 00b12223;   % 1635: <47> sw	a1, 4(sp) %
00000aeb : 00112423;   % 1635: <48> sw	ra, 8(sp) %
00000aec : 01e00533;   % 1635: <50> mv 	a0, t5 %
00000aed : 011005b3;   % 1635: <51> mv 	a1, a7 %
00000aee : 234000ef;   % 1635: <52> jal 	__mulsi3 %
00000aef : 04051073;   % 1635: <53> csrw	a0,uscratch %
00000af0 : 00012503;   % 1635: <55> lw	a0, 0(sp) %
00000af1 : 00412583;   % 1635: <56> lw	a1, 4(sp) %
00000af2 : 00812083;   % 1635: <57> lw	ra, 8(sp) %
00000af3 : 00c10113;   % 1635: <58> addi 	sp, sp, 12 %
00000af4 : 04002ff3;   % 1635: <59> csrr	t6,uscratch %
00000af5 : 0080006f;   % 1636: 		j BRESENHAM.mul2d %
00000af6 : 031f0fb3;   % 1637: BRESENHAM.mul2:	mul 	t6, t5, a7		# y*320 %
00000af7 : 01df8fb3;   % 1638: BRESENHAM.mul2d:add 	t6, t6, t4		# y*320+x %
00000af8 : 010f8fb3;   % 1639: 		add 	t6, t6, a6		# 0xFF000000+y*320+x %
00000af9 : 00ef8023;   % 1640: 		sb 	a4, 0(t6)		# plot com cor a4 %
00000afa : 01c05863;   % 1642: 		ble 	t3, zero, PULA4BRES	# D<=0 %
00000afb : 007e8eb3;   % 1643: 		add 	t4, t4, t2		# x=x+xi %
00000afc : 00131f93;   % 1644: 		slli 	t6, t1, 1		# 2*dy %
00000afd : 41fe0e33;   % 1645: 		sub 	t3, t3, t6		# D=D-2dy %
00000afe : 00129f93;   % 1646: PULA4BRES: 	slli 	t6, t0, 1		# 2*dy %
00000aff : 01fe0e33;   % 1647: 		add 	t3, t3, t6		# D=D+2dx %
00000b00 : 001f0f13;   % 1648: 		addi 	t5, t5, 1 %
00000b01 : f8df16e3;   % 1649: 		bne 	t5, a3, LOOPx2BRES %
00000b02 : 00008067;   % 1650: 		ret		 %
00000b03 : ffc10113;   % 1665: printIntUnsigned:	addi 	sp, sp, -4		# Aloca espaco %
00000b04 : 00112023;   % 1666: 		sw 	ra, 0(sp)			# salva ra %
00000b05 : 0fc12297;   % 1667: 		la 	t0, TempBuffer			# carrega o Endereco do Buffer da String %
00000b06 : 3f028293;   % 1667:  %
00000b07 : 00a00393;   % 1669: 		li 	t2, 10				# carrega numero 10 %
00000b08 : 00000313;   % 1670: 		li 	t1, 0				# carrega numero de digitos com 0 %
00000b09 : 30102c73;   % 1672: <29> csrr s8, misa %
00000b0a : 00cc5c13;   % 1672: <30> srli s8, s8, 12 %
00000b0b : 001c7c13;   % 1672: <31> andi s8, s8, 0x001 %
00000b0c : 160c1463;   % 1672: <32> bnez s8, printIntUnsigned.pula1 %
00000b0d : ff010113;   % 1673: <65> addi 	sp, sp, -16 %
00000b0e : 00a12023;   % 1673: <66> sw	a0, 0(sp) %
00000b0f : 00e12223;   % 1673: <67> sw	a4, 4(sp) %
00000b10 : 00f12423;   % 1673: <68> sw	a5, 8(sp) %
00000b11 : 00112623;   % 1673: <69> sw	ra, 12(sp) %
00000b12 : 00a00533;   % 1673: <70> mv 	a0, a0 %
00000b13 : 00155713;   % 1673: <71> srli    a4,a0,1 %
00000b14 : 00255793;   % 1673: <72> srli    a5,a0,2 %
00000b15 : 00f707b3;   % 1673: <73> add     a5,a4,a5 %
00000b16 : 0047d713;   % 1673: <74> srli    a4,a5,4 %
00000b17 : 00f70733;   % 1673: <75> add     a4,a4,a5 %
00000b18 : 00875793;   % 1673: <76> srli    a5,a4,8 %
00000b19 : 00e78733;   % 1673: <77> add     a4,a5,a4 %
00000b1a : 01075793;   % 1673: <78> srli    a5,a4,16 %
00000b1b : 00e787b3;   % 1673: <79> add     a5,a5,a4 %
00000b1c : 0037d793;   % 1673: <80> srli    a5,a5,3 %
00000b1d : 00279713;   % 1673: <81> slli    a4,a5,2 %
00000b1e : 00f70733;   % 1673: <82> add     a4,a4,a5 %
00000b1f : 00171713;   % 1673: <83> slli    a4,a4,1 %
00000b20 : 40e50533;   % 1673: <84> sub     a0,a0,a4 %
00000b21 : 00a53513;   % 1673: <85> sltiu   a0,a0,10 %
00000b22 : 00154513;   % 1673: <86> xori    a0,a0,1 %
00000b23 : 00f50533;   % 1673: <87> add     a0,a0,a5 %
00000b24 : 04051073;   % 1673: <88> csrw	a0,uscratch %
00000b25 : 00012503;   % 1673: <89> lw	a0, 0(sp) %
00000b26 : 00412703;   % 1673: <90> lw	a4, 4(sp) %
00000b27 : 00812783;   % 1673: <91> lw	a5, 8(sp) %
00000b28 : 00c12083;   % 1673: <92> lw	ra, 12(sp) %
00000b29 : 01010113;   % 1673: <93> addi 	sp, sp, 16 %
00000b2a : 04002ef3;   % 1673: <94> csrr	t4,uscratch %
00000b2b : ff010113;   % 1674: <122> addi 	sp,sp,-16 %
00000b2c : 00a12023;   % 1674: <123> sw	a0,0(sp) %
00000b2d : 00b12223;   % 1674: <124> sw	a1,4(sp) %
00000b2e : 00c12423;   % 1674: <125> sw	a2,8(sp) %
00000b2f : 00d12623;   % 1674: <126> sw	a3,12(sp) %
00000b30 : 00a006b3;   % 1674: <128> mv 	a3,a0 %
00000b31 : 00a00613;   % 1674: <129> li 	a2,10 %
00000b32 : ff010113;   % 1674: <65> addi 	sp, sp, -16 %
00000b33 : 00a12023;   % 1674: <66> sw	a0, 0(sp) %
00000b34 : 00e12223;   % 1674: <67> sw	a4, 4(sp) %
00000b35 : 00f12423;   % 1674: <68> sw	a5, 8(sp) %
00000b36 : 00112623;   % 1674: <69> sw	ra, 12(sp) %
00000b37 : 00d00533;   % 1674: <70> mv 	a0, a3 %
00000b38 : 00155713;   % 1674: <71> srli    a4,a0,1 %
00000b39 : 00255793;   % 1674: <72> srli    a5,a0,2 %
00000b3a : 00f707b3;   % 1674: <73> add     a5,a4,a5 %
00000b3b : 0047d713;   % 1674: <74> srli    a4,a5,4 %
00000b3c : 00f70733;   % 1674: <75> add     a4,a4,a5 %
00000b3d : 00875793;   % 1674: <76> srli    a5,a4,8 %
00000b3e : 00e78733;   % 1674: <77> add     a4,a5,a4 %
00000b3f : 01075793;   % 1674: <78> srli    a5,a4,16 %
00000b40 : 00e787b3;   % 1674: <79> add     a5,a5,a4 %
00000b41 : 0037d793;   % 1674: <80> srli    a5,a5,3 %
00000b42 : 00279713;   % 1674: <81> slli    a4,a5,2 %
00000b43 : 00f70733;   % 1674: <82> add     a4,a4,a5 %
00000b44 : 00171713;   % 1674: <83> slli    a4,a4,1 %
00000b45 : 40e50533;   % 1674: <84> sub     a0,a0,a4 %
00000b46 : 00a53513;   % 1674: <85> sltiu   a0,a0,10 %
00000b47 : 00154513;   % 1674: <86> xori    a0,a0,1 %
00000b48 : 00f50533;   % 1674: <87> add     a0,a0,a5 %
00000b49 : 04051073;   % 1674: <88> csrw	a0,uscratch %
00000b4a : 00012503;   % 1674: <89> lw	a0, 0(sp) %
00000b4b : 00412703;   % 1674: <90> lw	a4, 4(sp) %
00000b4c : 00812783;   % 1674: <91> lw	a5, 8(sp) %
00000b4d : 00c12083;   % 1674: <92> lw	ra, 12(sp) %
00000b4e : 01010113;   % 1674: <93> addi 	sp, sp, 16 %
00000b4f : 04002573;   % 1674: <94> csrr	a0,uscratch %
00000b50 : ff410113;   % 1674: <45> addi 	sp, sp, -12 %
00000b51 : 00a12023;   % 1674: <46> sw	a0, 0(sp) %
00000b52 : 00b12223;   % 1674: <47> sw	a1, 4(sp) %
00000b53 : 00112423;   % 1674: <48> sw	ra, 8(sp) %
00000b54 : 00a00533;   % 1674: <50> mv 	a0, a0 %
00000b55 : 00c005b3;   % 1674: <51> mv 	a1, a2 %
00000b56 : 094000ef;   % 1674: <52> jal 	__mulsi3 %
00000b57 : 04051073;   % 1674: <53> csrw	a0,uscratch %
00000b58 : 00012503;   % 1674: <55> lw	a0, 0(sp) %
00000b59 : 00412583;   % 1674: <56> lw	a1, 4(sp) %
00000b5a : 00812083;   % 1674: <57> lw	ra, 8(sp) %
00000b5b : 00c10113;   % 1674: <58> addi 	sp, sp, 12 %
00000b5c : 040025f3;   % 1674: <59> csrr	a1,uscratch %
00000b5d : 40b68e33;   % 1674: <132> sub 	t3,a3,a1 %
00000b5e : 040e1073;   % 1674: <134> csrw	t3,uscratch %
00000b5f : 00012503;   % 1674: <135> lw	a0,0(sp) %
00000b60 : 00412583;   % 1674: <136> lw 	a1,4(sp) %
00000b61 : 00812603;   % 1674: <137> lw	a2,8(sp) %
00000b62 : 00c12683;   % 1674: <138> lw	a3,12(sp) %
00000b63 : 01010113;   % 1674: <139> addi 	sp,sp,16 %
00000b64 : 04002e73;   % 1674: <140> csrr	t3,uscratch %
00000b65 : 00c0006f;   % 1675: 			j	printIntUnsigned.pula1d %
00000b66 : 02755eb3;   % 1676: printIntUnsigned.pula1:	divu 	t4, a0, t2			# divide por 10 (quociente) %
00000b67 : 02757e33;   % 1677: 			remu 	t3, a0, t2			# resto %
00000b68 : ffc10113;   % 1678: printIntUnsigned.pula1d:addi 	sp, sp, -4			# aloca espaco na pilha %
00000b69 : 01c12023;   % 1679: 		sw 	t3, 0(sp)			# coloca resto na pilha %
00000b6a : 01d00533;   % 1680: 		mv 	a0, t4				# atualiza o numero com o quociente %
00000b6b : 00130313;   % 1681: 		addi 	t1, t1, 1			# incrementa o contador de digitos %
00000b6c : e6051ae3;   % 1682: 		bne 	a0, zero, printIntUnsigned.loop1# verifica se o numero eh zero %
00000b6d : 00012383;   % 1684: printIntUnsigned.loop2:	lw 	t2, 0(sp)		# le digito da pilha %
00000b6e : 00410113;   % 1685: 		addi 	sp, sp, 4			# libera espaco %
00000b6f : 03038393;   % 1686: 		addi 	t2, t2, 48			# converte o digito para ascii %
00000b70 : 00728023;   % 1687: 		sb 	t2, 0(t0)			# coloca caractere no buffer %
00000b71 : 00128293;   % 1688: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
00000b72 : fff30313;   % 1689: 		addi 	t1, t1, -1			# decrementa contador de digitos %
00000b73 : fe0314e3;   % 1690: 		bne 	t1, zero, printIntUnsigned.loop2# eh o ultimo? %
00000b74 : 00028023;   % 1691: 		sb 	zero, 0(t0)			# insere \NULL na string %
00000b75 : 0fc12517;   % 1693: 		la 	a0, TempBuffer			# Endereco do buffer da srting %
00000b76 : 23050513;   % 1693:  %
00000b77 : a6cff0ef;   % 1694: 		jal 	printString			# chama o print string %
00000b78 : 00012083;   % 1696: 		lw 	ra, 0(sp)			# recupera a %
00000b79 : 00410113;   % 1697: 		addi 	sp, sp, 4			# libera espaco %
00000b7a : 00008067;   % 1698: printIntUnsigned.fim:	ret %
00000b7b : ff410113;   % 1711: __mulsi3:	addi 	sp,sp,-12 %
00000b7c : 00b12023;   % 1712: 		sw 	a1,0(sp) %
00000b7d : 00e12223;   % 1713: 		sw 	a4,4(sp) %
00000b7e : 00f12423;   % 1714: 		sw	a5,8(sp) %
00000b7f : 00a007b3;   % 1716: 	 	mv      a5,a0 %
00000b80 : 00000513;   % 1717:         	li      a0,0 %
00000b81 : 00078e63;   % 1718: mulsi3.L4: 	beqz    a5,mulsi3.L1 %
00000b82 : 0017f713;   % 1719:         	andi    a4,a5,1 %
00000b83 : 00070463;   % 1720:         	beqz    a4,mulsi3.L3 %
00000b84 : 00b50533;   % 1721:         	add     a0,a0,a1 %
00000b85 : 0017d793;   % 1722: mulsi3.L3: 	srli    a5,a5,1 %
00000b86 : 00159593;   % 1723:         	slli    a1,a1,1 %
00000b87 : fe9ff06f;   % 1724:         	j       mulsi3.L4 %
00000b88 : 00012583;   % 1726: mulsi3.L1: 	lw 	a1,0(sp) %
00000b89 : 00412703;   % 1727: 		lw	a4,4(sp) %
00000b8a : 00812783;   % 1728: 		lw	a5,8(sp) %
00000b8b : 00c10113;   % 1729: 		addi 	sp,sp,12 %
00000b8c : 00008067;   % 1730: 		ret %
00000b8d : ff010113;   % 1734: __udivsi3:	addi 	sp,sp,-16 %
00000b8e : 00b12023;   % 1735: 		sw 	a1,0(sp) %
00000b8f : 00d12223;   % 1736: 		sw	a3,4(sp) %
00000b90 : 00e12423;   % 1737: 		sw 	a4,8(sp) %
00000b91 : 00f12623;   % 1738: 		sw	a5,12(sp) %
00000b92 : 00a00733;   % 1740:  		mv      a4,a0 %
00000b93 : 00155693;   % 1741:         	srli    a3,a0,1 %
00000b94 : 00100793;   % 1742:         	li      a5,1 %
00000b95 : 00b6e863;   % 1743: udivsi3.L3:    	bltu    a3,a1,udivsi3.L6 %
00000b96 : 00179793;   % 1744:         	slli    a5,a5,1 %
00000b97 : 00159593;   % 1745:         	slli    a1,a1,1 %
00000b98 : ff5ff06f;   % 1746:         	j       udivsi3.L3 %
00000b99 : 00000513;   % 1747: udivsi3.L6:    	li      a0,0 %
00000b9a : 00078e63;   % 1748: udivsi3.L2:   	beqz    a5,udivsi3.L1 %
00000b9b : 00b76663;   % 1749:         	bltu    a4,a1,udivsi3.L5 %
00000b9c : 40b70733;   % 1750:         	sub     a4,a4,a1 %
00000b9d : 00f50533;   % 1751:         	add     a0,a0,a5 %
00000b9e : 0017d793;   % 1752: udivsi3.L5:    	srli    a5,a5,1 %
00000b9f : 0015d593;   % 1753:         	srli    a1,a1,1 %
00000ba0 : fe9ff06f;   % 1754:         	j       udivsi3.L2 %
00000ba1 : 00012583;   % 1756: udivsi3.L1: 	lw 	a1,0(sp) %
00000ba2 : 00412683;   % 1757: 		lw	a3,4(sp) %
00000ba3 : 00812703;   % 1758: 		lw	a4,8(sp) %
00000ba4 : 00c12783;   % 1759: 		lw	a5,12(sp) %
00000ba5 : 01010113;   % 1760: 		addi 	sp,sp,16 %
00000ba6 : 00008067;   % 1761:     		ret %
00000ba7 : ff410113;   % 1764: __umodsi3:	addi	sp, sp, -12 %
00000ba8 : 00512023;   % 1765: 		sw 	t0, 0(sp) %
00000ba9 : 00612223;   % 1766: 		sw 	t1, 4(sp) %
00000baa : 00112423;   % 1767: 		sw 	ra, 8(sp) %
00000bab : 00a002b3;   % 1768: 	 	mv 	t0, a0		# dividendo %
00000bac : 00b00333;   % 1769: 		mv 	t1, a1		# divisor %
00000bad : f81ff0ef;   % 1770: 		jal 	__udivsi3 %
00000bae : 006005b3;   % 1771: 		mv 	a1, t1		# quociente * divisor %
00000baf : f31ff0ef;   % 1772: 		jal 	__mulsi3 %
00000bb0 : 40a28533;   % 1773: 		sub 	a0, t0, a0	# dividendo-quociente*divisor %
00000bb1 : 00012283;   % 1774: 		lw 	t0, 0(sp) %
00000bb2 : 00412303;   % 1775: 		lw 	t1, 4(sp) %
00000bb3 : 00812083;   % 1776: 		lw 	ra, 8(sp) %
00000bb4 : 00c10113;   % 1777: 		addi 	sp, sp, 12 %
00000bb5 : 00008067;   % 1778: 		ret %
00000bb6 : ff010113;   % 1781: __divsi3:	addi	sp, sp, -16 %
00000bb7 : 00512023;   % 1782: 		sw 	t0, 0(sp) %
00000bb8 : 00612223;   % 1783: 		sw 	t1, 4(sp) %
00000bb9 : 00712423;   % 1784: 		sw 	t2, 8(sp) %
00000bba : 00112623;   % 1785: 		sw 	ra, 12(sp) %
00000bbb : 41f55293;   % 1786: 		srai	t0,a0,31	# indica se a0 � pos(0) ou neg (2^32-1) %
00000bbc : 41f5d313;   % 1787: 		srai 	t1,a1,31	# indica se a1 � pos(0) ou neg (2^32-1) %
00000bbd : 0062c3b3;   % 1788: 		xor	t2,t0,t1	# indica se deve(!=0) ou n�o(==0) inverter o sinal do resultado %
00000bbe : 00028463;   % 1789: 		beqz 	t0,divsi3.pula1 %
00000bbf : 40a00533;   % 1790: 		neg	a0,a0		# nega %
00000bc0 : 00030463;   % 1791: divsi3.pula1:	beqz 	t1,divsi3.pula2 %
00000bc1 : 40b005b3;   % 1792: 		neg	a1,a1		# nega %
00000bc2 : f2dff0ef;   % 1793: divsi3.pula2:	jal 	__udivsi3	# divis�o unsigned %
00000bc3 : 00038463;   % 1794: 		beqz	t2, divsi3.pula3	 %
00000bc4 : 40a00533;   % 1795: 		neg	a0,a0		# nega %
00000bc5 : 00012283;   % 1796: divsi3.pula3:	lw 	t0, 0(sp) %
00000bc6 : 00412303;   % 1797: 		lw 	t1, 4(sp) %
00000bc7 : 00812383;   % 1798: 		lw 	t2, 8(sp) %
00000bc8 : 00c12083;   % 1799: 		lw 	ra, 12(sp) %
00000bc9 : 01010113;   % 1800: 		addi 	sp, sp, 16 %
00000bca : 00008067;   % 1801: 		ret %
00000bcb : ff410113;   % 1804: __modsi3:	addi	sp, sp, -12 %
00000bcc : 00512023;   % 1805: 		sw 	t0, 0(sp) %
00000bcd : 00612223;   % 1806: 		sw 	t1, 4(sp) %
00000bce : 00112423;   % 1807: 		sw 	ra, 8(sp) %
00000bcf : 41f55293;   % 1808: 		srai	t0,a0,31	# indica se a0 � pos(0) ou neg (2^32-1) %
00000bd0 : 41f5d313;   % 1809: 		srai 	t1,a1,31	# indica se a1 � pos(0) ou neg (2^32-1) %
00000bd1 : 00028463;   % 1810: 		beqz 	t0,modsi3.pula1 %
00000bd2 : 40a00533;   % 1811: 		neg	a0,a0		# nega %
00000bd3 : 00030463;   % 1812: modsi3.pula1:	beqz 	t1,modsi3.pula2 %
00000bd4 : 40b005b3;   % 1813: 		neg	a1,a1		# nega %
00000bd5 : f49ff0ef;   % 1814: modsi3.pula2:	jal 	__umodsi3	# resto unsigned %
00000bd6 : 00028463;   % 1815: 		beqz	t0, modsi3.pula3	# sinal do dividendo	 %
00000bd7 : 40a00533;   % 1816: 		neg	a0,a0		# nega %
00000bd8 : 00012283;   % 1817: modsi3.pula3:	lw 	t0, 0(sp) %
00000bd9 : 00412303;   % 1818: 		lw 	t1, 4(sp) %
00000bda : 00812083;   % 1819: 		lw 	ra, 8(sp) %
00000bdb : 00c10113;   % 1820: 		addi 	sp, sp, 12 %
00000bdc : 00008067;   % 1821: 		ret																				 %
END;
